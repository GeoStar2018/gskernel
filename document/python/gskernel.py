# This file was automatically generated by SWIG (http://www.swig.org).
# Version 4.0.0
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.

from sys import version_info as _swig_python_version_info
if _swig_python_version_info < (2, 7, 0):
    raise RuntimeError('Python 2.7 or later required')

# Import the low-level C/C++ module
if __package__ or '.' in __name__:
    from . import _gskernel
else:
    import _gskernel

try:
    import builtins as __builtin__
except ImportError:
    import __builtin__

def _swig_setattr_nondynamic(self, class_type, name, value, static=1):
    if name == "thisown":
        return self.this.own(value)
    if name == "this":
        if type(value).__name__ == 'SwigPyObject':
            self.__dict__[name] = value
            return
    method = class_type.__swig_setmethods__.get(name, None)
    if method:
        return method(self, value)
    if not static:
        object.__setattr__(self, name, value)
    else:
        raise AttributeError("You cannot add attributes to %s" % self)


def _swig_setattr(self, class_type, name, value):
    return _swig_setattr_nondynamic(self, class_type, name, value, 0)


def _swig_getattr(self, class_type, name):
    if name == "thisown":
        return self.this.own()
    method = class_type.__swig_getmethods__.get(name, None)
    if method:
        return method(self)
    raise AttributeError("'%s' object has no attribute '%s'" % (class_type.__name__, name))


def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except __builtin__.Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)


def _swig_setattr_nondynamic_instance_variable(set):
    def set_instance_attr(self, name, value):
        if name == "thisown":
            self.this.own(value)
        elif name == "this":
            set(self, name, value)
        elif hasattr(self, name) and isinstance(getattr(type(self), name), property):
            set(self, name, value)
        else:
            raise AttributeError("You cannot add instance attributes to %s" % self)
    return set_instance_attr


def _swig_setattr_nondynamic_class_variable(set):
    def set_class_attr(cls, name, value):
        if hasattr(cls, name) and not isinstance(getattr(cls, name), property):
            set(cls, name, value)
        else:
            raise AttributeError("You cannot add class attributes to %s" % cls)
    return set_class_attr


def _swig_add_metaclass(metaclass):
    """Class decorator for adding a metaclass to a SWIG wrapped class - a slimmed down version of six.add_metaclass"""
    def wrapper(cls):
        return metaclass(cls.__name__, cls.__bases__, cls.__dict__.copy())
    return wrapper


class _SwigNonDynamicMeta(type):
    """Meta class to enforce nondynamic attributes (no new attributes) for a class"""
    __setattr__ = _swig_setattr_nondynamic_class_variable(type.__setattr__)


import weakref

eBigEndian = _gskernel.eBigEndian
eLittleEndian = _gskernel.eLittleEndian
eLOGALL = _gskernel.eLOGALL
eLOGNONE = _gskernel.eLOGNONE
eLOGTRACE = _gskernel.eLOGTRACE
eLOGDEBUG = _gskernel.eLOGDEBUG
eLOGINFO = _gskernel.eLOGINFO
eLOGWARN = _gskernel.eLOGWARN
eLOGERROR = _gskernel.eLOGERROR
eLOGFATAL = _gskernel.eLOGFATAL
class GsLogger(object):
    r""" 创建日志"""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        _gskernel.GsLogger_swiginit(self, _gskernel.new_GsLogger(*args))

    @staticmethod
    def IsDebuging() -> "bool":
        r""" 判断当前程序是否运行在调试状态仅仅对于windows平台下Visual Studio中调试状态有效，其他情况下一律返回false。"""
        return _gskernel.GsLogger_IsDebuging()

    def LastError(self) -> "GsString":
        r""" 最后报告的错误"""
        return _gskernel.GsLogger_LastError(self)

    def LogLevel(self, *args) -> "GsLogLevel":
        return _gskernel.GsLogger_LogLevel(self, *args)

    def Name(self) -> "GsString":
        r""" 自定义输出 获取日志名"""
        return _gskernel.GsLogger_Name(self)
    __swig_destroy__ = _gskernel.delete_GsLogger

    def AutoFlush(self, *args) -> "void":
        r"""
        *Overload 1:*
         日志操作后输出流是否刷新:rtype: boolean
        :return: 返回true表示刷新，否则，不刷新

        |

        *Overload 2:*
         日志操作后输出流是否刷新:rtype: void
        :return: 返回true表示刷新，否则，不刷新
        """
        return _gskernel.GsLogger_AutoFlush(self, *args)

    def Log(self, l: 'GsLogLevel', log: 'char const *') -> "void":
        r""" 报告一段日志"""
        return _gskernel.GsLogger_Log(self, l, log)

    @staticmethod
    def Default() -> "GsLogger &":
        r""" 缺省的日志对象"""
        return _gskernel.GsLogger_Default()

# Register GsLogger in _gskernel:
_gskernel.GsLogger_swigregister(GsLogger)

def GsLogger_IsDebuging() -> "bool":
    r""" 判断当前程序是否运行在调试状态仅仅对于windows平台下Visual Studio中调试状态有效，其他情况下一律返回false。"""
    return _gskernel.GsLogger_IsDebuging()

def GsLogger_Default() -> "GsLogger &":
    r""" 缺省的日志对象"""
    return _gskernel.GsLogger_Default()

eEmpty = _gskernel.eEmpty
r""" 空数据"""
eI1 = _gskernel.eI1
r""" char"""
eI2 = _gskernel.eI2
r""" short"""
eI4 = _gskernel.eI4
r""" int"""
eI8 = _gskernel.eI8
r""" long long"""
eUI1 = _gskernel.eUI1
r""" unsigned char"""
eUI2 = _gskernel.eUI2
r""" unsigned short"""
eUI4 = _gskernel.eUI4
r""" unsigned int"""
eUI8 = _gskernel.eUI8
r""" unsigned long long"""
eR4 = _gskernel.eR4
r""" float"""
eR8 = _gskernel.eR8
r""" double"""
eString = _gskernel.eString
r""" const char*"""
eBool = _gskernel.eBool
r""" bool"""
eObject = _gskernel.eObject
r""" GsRefObject*"""
eBlob = _gskernel.eBlob
r""" 二进制数据"""
class GsAny(object):
    r""" 存储各种类型数据的对象。"""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    Type = property(_gskernel.GsAny_Type_get, _gskernel.GsAny_Type_set, doc=r""" 数据类型""")
    __swig_destroy__ = _gskernel.delete_GsAny

    def __init__(self, *args):
        r"""
        *Overload 1:*
        构造函数重载

        |

        *Overload 2:*
        单字符构造函数

        |

        *Overload 3:*
        无符号字符构造函数

        |

        *Overload 4:*
        无符号16位的构造函数

        |

        *Overload 5:*
        无符号32位的构造函数

        |

        *Overload 6:*
        无符号64位的构造函数

        |

        *Overload 7:*
        无符号字符常量构造函数

        |

        *Overload 8:*
        16位的构造函数

        |

        *Overload 9:*
        32位的构造函数

        |

        *Overload 10:*
        64位的构造函数

        |

        *Overload 11:*
        32位浮点构造函数

        |

        *Overload 12:*
        64位浮点构造函数

        |

        *Overload 13:*
        bool类型构造函数

        |

        *Overload 14:*
        GsRefObject类指针的构造函数

        |

        *Overload 15:*
        字符常量构造函数

        |

        *Overload 16:*
        类引用构造函数
        """
        _gskernel.GsAny_swiginit(self, _gskernel.new_GsAny(*args))

    def Clear(self) -> "void":
        return _gskernel.GsAny_Clear(self)

    def AsChar(self) -> "char":
        r""" 获取字符"""
        return _gskernel.GsAny_AsChar(self)

    def AsUChar(self) -> "unsigned char":
        r""" 获取无符号字符"""
        return _gskernel.GsAny_AsUChar(self)

    def AsShort(self) -> "short":
        r""" 获取短整型数"""
        return _gskernel.GsAny_AsShort(self)

    def AsUShort(self) -> "unsigned short":
        r""" 获取16位短整型数"""
        return _gskernel.GsAny_AsUShort(self)

    def AsInt(self) -> "int":
        r""" 获取32位整数"""
        return _gskernel.GsAny_AsInt(self)

    def AsUInt(self) -> "unsigned int":
        r""" 获取32位无符号整数"""
        return _gskernel.GsAny_AsUInt(self)

    def AsLongLong(self) -> "long long":
        r""" 获取64位整数"""
        return _gskernel.GsAny_AsLongLong(self)

    def AsULongLong(self) -> "unsigned long long":
        r""" 获取64位无符号整数"""
        return _gskernel.GsAny_AsULongLong(self)

    def AsFloat(self) -> "float":
        r""" 获取32位浮点数"""
        return _gskernel.GsAny_AsFloat(self)

    def AsDouble(self) -> "double":
        r""" 获取64位浮点数"""
        return _gskernel.GsAny_AsDouble(self)

    def AsBool(self) -> "bool":
        r""" 获取bool的值"""
        return _gskernel.GsAny_AsBool(self)

    def AsObj(self) -> "GsRefObject *":
        r""" 获取GsRefObject类"""
        return _gskernel.GsAny_AsObj(self)

    def AsString(self) -> "char *":
        r""" 获取字符串"""
        return _gskernel.GsAny_AsString(self)

    def AsBlob(self, bBlob: 'signed char *') -> "void":
        r""" 获取二进制数据块"""
        return _gskernel.GsAny_AsBlob(self, bBlob)

    def Set(self, bBlob: 'signed char *', nLen: 'int') -> "void":
        r""" 设置blob数据"""
        return _gskernel.GsAny_Set(self, bBlob, nLen)

    def AllocBlob(self, nLen: 'int') -> "void":
        r""" 分配空的blob空间，并设置类型为blob"""
        return _gskernel.GsAny_AllocBlob(self, nLen)

    def ValueSize(self) -> "int":
        r"""
         数据的大小:rtype: int
        :return: 返回数据的长度
        """
        return _gskernel.GsAny_ValueSize(self)

    def HashCode(self) -> "unsigned long long":
        r"""
         数据的头指针:rtype: int
        :return: 返回数据的头指针地址 计算对象的哈希值:rtype: int
        :return: 返回哈希值。
        """
        return _gskernel.GsAny_HashCode(self)

# Register GsAny in _gskernel:
_gskernel.GsAny_swigregister(GsAny)

class GsString(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        _gskernel.GsString_swiginit(self, _gskernel.new_GsString(*args))
    __swig_destroy__ = _gskernel.delete_GsString

# Register GsString in _gskernel:
_gskernel.GsString_swigregister(GsString)

class GsStringVector(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self):
        _gskernel.GsStringVector_swiginit(self, _gskernel.new_GsStringVector())
    __swig_destroy__ = _gskernel.delete_GsStringVector

    def add(self, obj: 'GsString') -> "void":
        return _gskernel.GsStringVector_add(self, obj)

    def size(self) -> "size_t":
        return _gskernel.GsStringVector_size(self)

    def clear(self) -> "void":
        return _gskernel.GsStringVector_clear(self)

    def empty(self) -> "bool":
        return _gskernel.GsStringVector_empty(self)

    def get(self, n: 'int') -> "GsString":
        return _gskernel.GsStringVector_get(self, n)

    def set(self, n: 'int', val: 'GsString') -> "void":
        return _gskernel.GsStringVector_set(self, n, val)

# Register GsStringVector in _gskernel:
_gskernel.GsStringVector_swigregister(GsStringVector)

class GsConfigVector(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self):
        _gskernel.GsConfigVector_swiginit(self, _gskernel.new_GsConfigVector())
    __swig_destroy__ = _gskernel.delete_GsConfigVector

    def add(self, obj: 'GsConfig') -> "void":
        return _gskernel.GsConfigVector_add(self, obj)

    def size(self) -> "size_t":
        return _gskernel.GsConfigVector_size(self)

    def clear(self) -> "void":
        return _gskernel.GsConfigVector_clear(self)

    def empty(self) -> "bool":
        return _gskernel.GsConfigVector_empty(self)

    def get(self, n: 'int') -> "GsConfig":
        return _gskernel.GsConfigVector_get(self, n)

    def set(self, n: 'int', val: 'GsConfig') -> "void":
        return _gskernel.GsConfigVector_set(self, n, val)

# Register GsConfigVector in _gskernel:
_gskernel.GsConfigVector_swigregister(GsConfigVector)

class GsConfig(object):
    r""" 配置类，实现配置的读取和写入。"""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        r"""
        *Overload 1:*
        缺省构造，构造一个空的配置

        |

        *Overload 2:*
        拷贝构造函数

        |

        *Overload 3:*
        从xml文件或者字符串打开配置 strXML字符串或者配置文件路径 bIsString判断strXML是xml字符串还是文件名，true表示strXML为纯的xml字符串

        |

        *Overload 4:*
        从xml文件或者字符串打开配置 strXML字符串或者配置文件路径 bIsString判断strXML是xml字符串还是文件名，true表示strXML为纯的xml字符串
        """
        _gskernel.GsConfig_swiginit(self, _gskernel.new_GsConfig(*args))
    __swig_destroy__ = _gskernel.delete_GsConfig

    def FileName(self) -> "GsString":
        r""" 获取配置文件的文件名 GsConfig其他配置项	"""
        return _gskernel.GsConfig_FileName(self)

    def Save(self, *args) -> "GsString":
        r"""
        *Overload 1:*
        保存到文件中

        |

        *Overload 2:*
        保存为XML字符串
        """
        return _gskernel.GsConfig_Save(self, *args)

    def IsDirty(self) -> "bool":
        r""" 判断配置是否发生了变化"""
        return _gskernel.GsConfig_IsDirty(self)

    def Root(self) -> "GsConfig":
        r""" 获取根配置对象"""
        return _gskernel.GsConfig_Root(self)

    def IsRoot(self) -> "bool":
        r""" 是否为根配置"""
        return _gskernel.GsConfig_IsRoot(self)

    def Parent(self) -> "GsConfig":
        r""" 获取父亲配置对象"""
        return _gskernel.GsConfig_Parent(self)

    def Name(self, *args) -> "void":
        return _gskernel.GsConfig_Name(self, *args)

    def Description(self, *args) -> "void":
        return _gskernel.GsConfig_Description(self, *args)

    def Type(self, *args) -> "void":
        return _gskernel.GsConfig_Type(self, *args)

    def IsValid(self) -> "bool":
        r""" 判断配置是否有效"""
        return _gskernel.GsConfig_IsValid(self)

    def Good(self) -> "bool":
        return _gskernel.GsConfig_Good(self)

    def IsNull(self) -> "bool":
        return _gskernel.GsConfig_IsNull(self)

    def Path(self) -> "GsString":
        r""" 获取配置的路径"""
        return _gskernel.GsConfig_Path(self)

    def Child(self, strName: 'char const *') -> "GsConfig":
        r""" 选择一个子的配置，如果不存在的话会创建这个子的配置并返回。"""
        return _gskernel.GsConfig_Child(self, strName)

    def Exist(self, strName: 'char const *') -> "bool":
        r""" 是否存在某个子的配置"""
        return _gskernel.GsConfig_Exist(self, strName)

    def HasChildren(self) -> "bool":
        r""" 是否存在子的配置"""
        return _gskernel.GsConfig_HasChildren(self)

    def IsEqual(self, config: 'GsConfig') -> "bool":
        r""" 是否为同一配置节点"""
        return _gskernel.GsConfig_IsEqual(self, config)

    def Children(self) -> "GsVector< GsConfig >":
        r""" 所有的子对象列表"""
        return _gskernel.GsConfig_Children(self)

    def ChildrenName(self) -> "GsVector< GsString >":
        r""" 子配置的名称"""
        return _gskernel.GsConfig_ChildrenName(self)

    def Peek(self, strName: 'char const *') -> "GsConfig":
        r""" 选择一个子的配置，如果不存在的话并不会创建"""
        return _gskernel.GsConfig_Peek(self, strName)

    def Item(self, strName: 'GsString') -> "GsConfig":
        return _gskernel.GsConfig_Item(self, strName)

    def Value(self, *args) -> "void":
        return _gskernel.GsConfig_Value(self, *args)

    def StringValue(self, strDefaultValue: 'char const *') -> "GsString":
        r""" 获取字符串值，不存在则返回缺省值"""
        return _gskernel.GsConfig_StringValue(self, strDefaultValue)

    def IsNumberValue(self) -> "bool":
        r""" 判断是否为特定值类型"""
        return _gskernel.GsConfig_IsNumberValue(self)

    def IsIntValue(self) -> "bool":
        return _gskernel.GsConfig_IsIntValue(self)

    def IsFloatValue(self) -> "bool":
        return _gskernel.GsConfig_IsFloatValue(self)

    def IsBooleanValue(self) -> "bool":
        return _gskernel.GsConfig_IsBooleanValue(self)

    def IntValue(self, nValue: 'int') -> "int":
        r""" 获取特定类型的值"""
        return _gskernel.GsConfig_IntValue(self, nValue)

    def Int64Value(self, nValue: 'long long') -> "long long":
        return _gskernel.GsConfig_Int64Value(self, nValue)

    def BoolValue(self, bValue: 'bool') -> "bool":
        return _gskernel.GsConfig_BoolValue(self, bValue)

    def FloatValue(self, bFloat: 'double') -> "double":
        return _gskernel.GsConfig_FloatValue(self, bFloat)

    def Append(self, config: 'GsConfig') -> "void":
        r""" 将另外的分支添加到这个GsConfig中"""
        return _gskernel.GsConfig_Append(self, config)

    def Clear(self) -> "void":
        r""" 清空所有的子配置"""
        return _gskernel.GsConfig_Clear(self)

    def Remove(self, childName: 'char const *') -> "void":
        r""" 删除一个子配置"""
        return _gskernel.GsConfig_Remove(self, childName)

# Register GsConfig in _gskernel:
_gskernel.GsConfig_swigregister(GsConfig)

class GsGlobeConfig(object):
    r""" 全局配置类"""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    @staticmethod
    def Instance() -> "GsConfig &":
        r""" 全局的配置类根对象。"""
        return _gskernel.GsGlobeConfig_Instance()

    @staticmethod
    def Save(*args) -> "GsString":
        r"""
        *Overload 1:*
        将全局的配置保存为文件

        |

        *Overload 2:*
        将全局的配置保存为字符串
        """
        return _gskernel.GsGlobeConfig_Save(*args)

    @staticmethod
    def Load(strFileOrXML: 'char const *', bFile: 'bool'=True) -> "bool":
        r""" 从xml或者配置中load配置信息"""
        return _gskernel.GsGlobeConfig_Load(strFileOrXML, bFile)

    def __init__(self):
        _gskernel.GsGlobeConfig_swiginit(self, _gskernel.new_GsGlobeConfig())
    __swig_destroy__ = _gskernel.delete_GsGlobeConfig

# Register GsGlobeConfig in _gskernel:
_gskernel.GsGlobeConfig_swigregister(GsGlobeConfig)

def GsGlobeConfig_Instance() -> "GsConfig &":
    r""" 全局的配置类根对象。"""
    return _gskernel.GsGlobeConfig_Instance()

def GsGlobeConfig_Save(*args) -> "GsString":
    r"""
    *Overload 1:*
    将全局的配置保存为文件

    |

    *Overload 2:*
    将全局的配置保存为字符串
    """
    return _gskernel.GsGlobeConfig_Save(*args)

def GsGlobeConfig_Load(strFileOrXML: 'char const *', bFile: 'bool'=True) -> "bool":
    r""" 从xml或者配置中load配置信息"""
    return _gskernel.GsGlobeConfig_Load(strFileOrXML, bFile)

class GsGlobalConfig(object):
    r""" 全局配置类"""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    @staticmethod
    def Instance() -> "GsConfig &":
        r""" 全局的配置类根对象。"""
        return _gskernel.GsGlobalConfig_Instance()

    @staticmethod
    def Save(*args) -> "GsString":
        r"""
        *Overload 1:*
        将全局的配置保存为文件

        |

        *Overload 2:*
        将全局的配置保存为字符串
        """
        return _gskernel.GsGlobalConfig_Save(*args)

    @staticmethod
    def Load(strFileOrXML: 'char const *', bFile: 'bool'=True) -> "bool":
        r""" 从xml或者配置中load配置信息"""
        return _gskernel.GsGlobalConfig_Load(strFileOrXML, bFile)

    def __init__(self):
        _gskernel.GsGlobalConfig_swiginit(self, _gskernel.new_GsGlobalConfig())
    __swig_destroy__ = _gskernel.delete_GsGlobalConfig

# Register GsGlobalConfig in _gskernel:
_gskernel.GsGlobalConfig_swigregister(GsGlobalConfig)

def GsGlobalConfig_Instance() -> "GsConfig &":
    r""" 全局的配置类根对象。"""
    return _gskernel.GsGlobalConfig_Instance()

def GsGlobalConfig_Save(*args) -> "GsString":
    r"""
    *Overload 1:*
    将全局的配置保存为文件

    |

    *Overload 2:*
    将全局的配置保存为字符串
    """
    return _gskernel.GsGlobalConfig_Save(*args)

def GsGlobalConfig_Load(strFileOrXML: 'char const *', bFile: 'bool'=True) -> "bool":
    r""" 从xml或者配置中load配置信息"""
    return _gskernel.GsGlobalConfig_Load(strFileOrXML, bFile)

class GsByteBuffer(object):
    r""" 直接内存块"""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __swig_destroy__ = _gskernel.delete_GsByteBuffer

    def BufferSize(self) -> "unsigned int":
        r""" 缓冲区的长度"""
        return _gskernel.GsByteBuffer_BufferSize(self)

    def SetBufferValue(self, *args) -> "void":
        return _gskernel.GsByteBuffer_SetBufferValue(self, *args)

    def Append(self, *args) -> "void":
        return _gskernel.GsByteBuffer_Append(self, *args)

    def Insert(self, nPos: 'int', val: 'signed char *', nLen: 'int') -> "void":
        return _gskernel.GsByteBuffer_Insert(self, nPos, val, nLen)

    def Allocate(self, nLen: 'unsigned int') -> "void":
        return _gskernel.GsByteBuffer_Allocate(self, nLen)

    def Clear(self) -> "void":
        r""" 清除内存数据"""
        return _gskernel.GsByteBuffer_Clear(self)

    def Reset(self) -> "void":
        r""" 释放内存"""
        return _gskernel.GsByteBuffer_Reset(self)

    def Copy(self, pBuff: 'signed char *', nLen: 'int') -> "void":
        return _gskernel.GsByteBuffer_Copy(self, pBuff, nLen)

    def CopyToArray(self, pBuff: 'signed char *', nLen: 'int') -> "bool":
        return _gskernel.GsByteBuffer_CopyToArray(self, pBuff, nLen)

    def ToBase64(self) -> "GsString":
        r""" 将二进制内存块转换为base64编码字符串"""
        return _gskernel.GsByteBuffer_ToBase64(self)

    def FromBase64(self, strBase64: 'char const *') -> "bool":
        r""" 从Base64字符串解码成为内存块"""
        return _gskernel.GsByteBuffer_FromBase64(self, strBase64)

# Register GsByteBuffer in _gskernel:
_gskernel.GsByteBuffer_swigregister(GsByteBuffer)

class GsGrowByteBuffer(GsByteBuffer):
    r""" 增长型直接内存块，内存只增加不减少"""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        r""" 构造函数，分配nLen个字符内存"""
        _gskernel.GsGrowByteBuffer_swiginit(self, _gskernel.new_GsGrowByteBuffer(*args))
    __swig_destroy__ = _gskernel.delete_GsGrowByteBuffer

# Register GsGrowByteBuffer in _gskernel:
_gskernel.GsGrowByteBuffer_swigregister(GsGrowByteBuffer)

class GsRefObject(object):
    r""" 引用对象，通过继承此类实现对象对引用计数的支持。"""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __swig_destroy__ = _gskernel.delete_GsRefObject

    def AddRef(self) -> "int":
        r"""
         增加一个引用计数:rtype: int
        :return: 返回增加后的引用计数值
        """
        return _gskernel.GsRefObject_AddRef(self)

    def Release(self) -> "int":
        r"""
         减少一个引用计数:rtype: int
        :return: 返回减少后的引用计数值
        """
        return _gskernel.GsRefObject_Release(self)

    def RefCount(self) -> "int":
        r"""
         获取引用计数的值:rtype: int
        :return: 返回当前引用计数的值
        """
        return _gskernel.GsRefObject_RefCount(self)

# Register GsRefObject in _gskernel:
_gskernel.GsRefObject_swigregister(GsRefObject)

class GsClassFactory(object):
    r""" GsRefObjectPtr 类工厂，用于注册类创建函数和创建类。"""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    @staticmethod
    def CreateInstance(className: 'char const *') -> "GsRefObject *":
        r""" 创建类的实例"""
        return _gskernel.GsClassFactory_CreateInstance(className)

    def __init__(self):
        _gskernel.GsClassFactory_swiginit(self, _gskernel.new_GsClassFactory())
    __swig_destroy__ = _gskernel.delete_GsClassFactory

# Register GsClassFactory in _gskernel:
_gskernel.GsClassFactory_swigregister(GsClassFactory)

def GsClassFactory_CreateInstance(className: 'char const *') -> "GsRefObject *":
    r""" 创建类的实例"""
    return _gskernel.GsClassFactory_CreateInstance(className)

eErrorType = _gskernel.eErrorType
eBoolType = _gskernel.eBoolType
r""" BOOL类型"""
eIntType = _gskernel.eIntType
r""" 32位的整型"""
eUIntType = _gskernel.eUIntType
r""" 32位的无符号整型"""
eInt64Type = _gskernel.eInt64Type
r""" 64位的整型"""
eUInt64Type = _gskernel.eUInt64Type
r""" 64位的无符号整型"""
eStringType = _gskernel.eStringType
r""" 字符串类型"""
eBlobType = _gskernel.eBlobType
r""" 二进制类型"""
eFloatType = _gskernel.eFloatType
r""" 浮点型"""
eDoubleType = _gskernel.eDoubleType
r""" 双精度浮点型"""
eGeometryType = _gskernel.eGeometryType
r""" 几何类型"""
eDateType = _gskernel.eDateType
r""" 日期类型"""
class GsColor(object):
    r""" 颜色对象"""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        r"""
        *Overload 1:*
         缺省构造

        |

        *Overload 2:*
         根据32位整数构造

        |

        *Overload 3:*
         根据32位整数构造

        |

        *Overload 4:*
         根据R，G，B，A通道构造 :type r: unsigned char
        :param r: 红色通道[0,255] :type g: unsigned char
        :param g: 绿色通道[0,255] :type b: unsigned char
        :param b: 蓝色通道[0,255] :type a: unsigned char
        :param a: 透明通道[0,255]

        |

        *Overload 5:*
         根据R，G，B，A通道构造 :type r: unsigned char
        :param r: 红色通道[0,255] :type g: unsigned char
        :param g: 绿色通道[0,255] :type b: unsigned char
        :param b: 蓝色通道[0,255] :param a: 透明通道[0,255]

        |

        *Overload 6:*
         拷贝构造

        |

        *Overload 7:*
         改变透明度构造已有颜色
        """
        _gskernel.GsColor_swiginit(self, _gskernel.new_GsColor(*args))

    def FlipRGB(self) -> "void":
        r""" 交换RGB中R和B的通道"""
        return _gskernel.GsColor_FlipRGB(self)

    @staticmethod
    def FromCSS(csscolor: 'char const *') -> "GsColor":
        r""" 从CSS颜色描述构造"""
        return _gskernel.GsColor_FromCSS(csscolor)

    @staticmethod
    def FromCOLORREF(rgb: 'unsigned int') -> "GsColor":
        r""" 从Win32的RGB颜色构造"""
        return _gskernel.GsColor_FromCOLORREF(rgb)

    @staticmethod
    def FromARGB(r: 'unsigned char', g: 'unsigned char', b: 'unsigned char', a: 'unsigned char'=255) -> "GsColor":
        r"""
         根据R，G，B，A通道构造 :type r: unsigned char
        :param r: 红色通道[0,255] :type g: unsigned char
        :param g: 绿色通道[0,255] :type b: unsigned char
        :param b: 蓝色通道[0,255] :type a: unsigned char
        :param a: 透明通道[0,255]
        """
        return _gskernel.GsColor_FromARGB(r, g, b, a)

    @staticmethod
    def FromARGBF(r: 'float', g: 'float', b: 'float', a: 'float'=1.0) -> "GsColor":
        r"""
         从浮点R，G，B，A通道构造 :type r: float
        :param r: 红色通道[0,1] :type g: float
        :param g: 绿色通道[0,1] :type b: float
        :param b: 蓝色通道[0,1] :type a: float
        :param a: 透明通道[0,1]
        """
        return _gskernel.GsColor_FromARGBF(r, g, b, a)

    @staticmethod
    def FromColor(rhs: 'GsColor', a: 'unsigned char') -> "GsColor":
        r""" 改变透明度构造已有颜色"""
        return _gskernel.GsColor_FromColor(rhs, a)

    @staticmethod
    def FromColorF(rhs: 'GsColor', a: 'float') -> "GsColor":
        r""" 改变透明度构造已有颜色"""
        return _gskernel.GsColor_FromColorF(rhs, a)

    @staticmethod
    def FromName(strName: 'char const *') -> "GsColor":
        r""" 从颜色名称构造"""
        return _gskernel.GsColor_FromName(strName)

    def Name(self) -> "GsString":
        r""" 颜色的名称，如果存在的话"""
        return _gskernel.GsColor_Name(self)

    def IsKnownColor(self) -> "bool":
        r""" 是否是已知的颜色。"""
        return _gskernel.GsColor_IsKnownColor(self)

    @staticmethod
    def Random() -> "GsColor":
        r""" 生成一个随机的颜色"""
        return _gskernel.GsColor_Random()

    @staticmethod
    def FromHSV(h: 'float', s: 'float', v: 'float', a: 'unsigned char'=255) -> "GsColor":
        r"""
         从HSV颜色构造 :type h: float
        :param h: Hue  色调 :type s: float
        :param s: Saturation 饱和度 :type v: float
        :param v: Value 亮度
        """
        return _gskernel.GsColor_FromHSV(h, s, v, a)

    def SetCOLORREF(self, rgb: 'unsigned int', a: 'unsigned char'=255) -> "void":
        r""" 用Win32 RGB颜色设置颜色值"""
        return _gskernel.GsColor_SetCOLORREF(self, rgb, a)

    def ToCOLORREF(self) -> "unsigned int":
        r""" 转换为win32 RGB颜色值"""
        return _gskernel.GsColor_ToCOLORREF(self)

    def ToHtml(self) -> "GsString":
        r""" 以html的形式返回颜色值#RRGGBB"""
        return _gskernel.GsColor_ToHtml(self)

    def ToHtmlRGBA(self) -> "GsString":
        r""" 以html的形式返回颜色值rgba(r,g,b,af);"""
        return _gskernel.GsColor_ToHtmlRGBA(self)

    def ToUInt(self) -> "unsigned int":
        r""" 转换为32位无符号整数"""
        return _gskernel.GsColor_ToUInt(self)

    def ToHSV(self, hsv: 'float *') -> "bool":
        r""" 转换HSV的颜色"""
        return _gskernel.GsColor_ToHSV(self, hsv)

    def ToInt(self) -> "int":
        r""" 转换为32位符号整数"""
        return _gskernel.GsColor_ToInt(self)

    def SetARGBF(self, r: 'float', g: 'float', b: 'float', a: 'float'=1.0) -> "void":
        r""" 根据R，G，B，A通道设置颜色值"""
        return _gskernel.GsColor_SetARGBF(self, r, g, b, a)

    def SetARGB(self, *args) -> "void":
        r"""
        *Overload 1:*
        根据R，G，B，A通道设置颜色值

        |

        *Overload 2:*
        根据ARGB值设置
        """
        return _gskernel.GsColor_SetARGB(self, *args)

    def SetHSV(self, h: 'float', s: 'float', v: 'float', a: 'unsigned char'=255) -> "void":
        r"""
         从HSV颜色设置 :type h: float
        :param h: Hue  色调 :type s: float
        :param s: Saturation 饱和度 :type v: float
        :param v: Value 亮度
        """
        return _gskernel.GsColor_SetHSV(self, h, s, v, a)

    def RedF(self) -> "float":
        r"""
         浮点数R通道值 :rtype: float
        :return: 返回R通道值[0,1]
        """
        return _gskernel.GsColor_RedF(self)

    def GreenF(self) -> "float":
        r"""
         浮点数G通道值 :rtype: float
        :return: 返回G通道值[0,1]
        """
        return _gskernel.GsColor_GreenF(self)

    def AlphaF(self) -> "float":
        r"""
         浮点数A通道值 :rtype: float
        :return: 返回A通道值[0,1]
        """
        return _gskernel.GsColor_AlphaF(self)

    def BlueF(self) -> "float":
        r"""
         浮点数B通道值 :rtype: float
        :return: 返回B通道值[0,1]
        """
        return _gskernel.GsColor_BlueF(self)
    AliceBlue = _gskernel.GsColor_AliceBlue
    AntiqueWhite = _gskernel.GsColor_AntiqueWhite
    Aqua = _gskernel.GsColor_Aqua
    Aquamarine = _gskernel.GsColor_Aquamarine
    Azure = _gskernel.GsColor_Azure
    Beige = _gskernel.GsColor_Beige
    Bisque = _gskernel.GsColor_Bisque
    Black = _gskernel.GsColor_Black
    BlanchedAlmond = _gskernel.GsColor_BlanchedAlmond
    Blue = _gskernel.GsColor_Blue
    BlueViolet = _gskernel.GsColor_BlueViolet
    Brown = _gskernel.GsColor_Brown
    BurlyWood = _gskernel.GsColor_BurlyWood
    CadetBlue = _gskernel.GsColor_CadetBlue
    Chartreuse = _gskernel.GsColor_Chartreuse
    Chocolate = _gskernel.GsColor_Chocolate
    Coral = _gskernel.GsColor_Coral
    CornflowerBlue = _gskernel.GsColor_CornflowerBlue
    Cornsilk = _gskernel.GsColor_Cornsilk
    Crimson = _gskernel.GsColor_Crimson
    Cyan = _gskernel.GsColor_Cyan
    DarkBlue = _gskernel.GsColor_DarkBlue
    DarkCyan = _gskernel.GsColor_DarkCyan
    DarkGoldenrod = _gskernel.GsColor_DarkGoldenrod
    DarkGray = _gskernel.GsColor_DarkGray
    DarkGreen = _gskernel.GsColor_DarkGreen
    DarkKhaki = _gskernel.GsColor_DarkKhaki
    DarkMagenta = _gskernel.GsColor_DarkMagenta
    DarkOliveGreen = _gskernel.GsColor_DarkOliveGreen
    DarkOrange = _gskernel.GsColor_DarkOrange
    DarkOrchid = _gskernel.GsColor_DarkOrchid
    DarkRed = _gskernel.GsColor_DarkRed
    DarkSalmon = _gskernel.GsColor_DarkSalmon
    DarkSeaGreen = _gskernel.GsColor_DarkSeaGreen
    DarkSlateBlue = _gskernel.GsColor_DarkSlateBlue
    DarkSlateGray = _gskernel.GsColor_DarkSlateGray
    DarkTurquoise = _gskernel.GsColor_DarkTurquoise
    DarkViolet = _gskernel.GsColor_DarkViolet
    DeepPink = _gskernel.GsColor_DeepPink
    DeepSkyBlue = _gskernel.GsColor_DeepSkyBlue
    DimGray = _gskernel.GsColor_DimGray
    DodgerBlue = _gskernel.GsColor_DodgerBlue
    Feldspar = _gskernel.GsColor_Feldspar
    Firebrick = _gskernel.GsColor_Firebrick
    FloralWhite = _gskernel.GsColor_FloralWhite
    ForestGreen = _gskernel.GsColor_ForestGreen
    Fuchsia = _gskernel.GsColor_Fuchsia
    Gainsboro = _gskernel.GsColor_Gainsboro
    GhostWhite = _gskernel.GsColor_GhostWhite
    Gold = _gskernel.GsColor_Gold
    Goldenrod = _gskernel.GsColor_Goldenrod
    Gray = _gskernel.GsColor_Gray
    Green = _gskernel.GsColor_Green
    GreenYellow = _gskernel.GsColor_GreenYellow
    Honeydew = _gskernel.GsColor_Honeydew
    HotPink = _gskernel.GsColor_HotPink
    IndianRed = _gskernel.GsColor_IndianRed
    Indigo = _gskernel.GsColor_Indigo
    Ivory = _gskernel.GsColor_Ivory
    Khaki = _gskernel.GsColor_Khaki
    Lavender = _gskernel.GsColor_Lavender
    LavenderBlush = _gskernel.GsColor_LavenderBlush
    LawnGreen = _gskernel.GsColor_LawnGreen
    LemonChiffon = _gskernel.GsColor_LemonChiffon
    LightBlue = _gskernel.GsColor_LightBlue
    LightCoral = _gskernel.GsColor_LightCoral
    LightCyan = _gskernel.GsColor_LightCyan
    LightGoldenrodYellow = _gskernel.GsColor_LightGoldenrodYellow
    LightGray = _gskernel.GsColor_LightGray
    LightGrey = _gskernel.GsColor_LightGrey
    LightGreen = _gskernel.GsColor_LightGreen
    LightPink = _gskernel.GsColor_LightPink
    LightSalmon = _gskernel.GsColor_LightSalmon
    LightSeaGreen = _gskernel.GsColor_LightSeaGreen
    LightSkyBlue = _gskernel.GsColor_LightSkyBlue
    LightSlateBlue = _gskernel.GsColor_LightSlateBlue
    LightSlateGray = _gskernel.GsColor_LightSlateGray
    LightSteelBlue = _gskernel.GsColor_LightSteelBlue
    LightYellow = _gskernel.GsColor_LightYellow
    Lime = _gskernel.GsColor_Lime
    LimeGreen = _gskernel.GsColor_LimeGreen
    Linen = _gskernel.GsColor_Linen
    Magenta = _gskernel.GsColor_Magenta
    Maroon = _gskernel.GsColor_Maroon
    MediumAquamarine = _gskernel.GsColor_MediumAquamarine
    MediumBlue = _gskernel.GsColor_MediumBlue
    MediumOrchid = _gskernel.GsColor_MediumOrchid
    MediumPurple = _gskernel.GsColor_MediumPurple
    MediumSeaGreen = _gskernel.GsColor_MediumSeaGreen
    MediumSlateBlue = _gskernel.GsColor_MediumSlateBlue
    MediumSpringGreen = _gskernel.GsColor_MediumSpringGreen
    MediumTurquoise = _gskernel.GsColor_MediumTurquoise
    MediumVioletRed = _gskernel.GsColor_MediumVioletRed
    MidnightBlue = _gskernel.GsColor_MidnightBlue
    MintCream = _gskernel.GsColor_MintCream
    MistyRose = _gskernel.GsColor_MistyRose
    Moccasin = _gskernel.GsColor_Moccasin
    NavajoWhite = _gskernel.GsColor_NavajoWhite
    Navy = _gskernel.GsColor_Navy
    OldLace = _gskernel.GsColor_OldLace
    Olive = _gskernel.GsColor_Olive
    OliveDrab = _gskernel.GsColor_OliveDrab
    Orange = _gskernel.GsColor_Orange
    OrangeRed = _gskernel.GsColor_OrangeRed
    Orchid = _gskernel.GsColor_Orchid
    PaleGoldenrod = _gskernel.GsColor_PaleGoldenrod
    PaleGreen = _gskernel.GsColor_PaleGreen
    PaleTurquoise = _gskernel.GsColor_PaleTurquoise
    PaleVioletRed = _gskernel.GsColor_PaleVioletRed
    PapayaWhip = _gskernel.GsColor_PapayaWhip
    PeachPuff = _gskernel.GsColor_PeachPuff
    Peru = _gskernel.GsColor_Peru
    Pink = _gskernel.GsColor_Pink
    Plum = _gskernel.GsColor_Plum
    PowderBlue = _gskernel.GsColor_PowderBlue
    Purple = _gskernel.GsColor_Purple
    Red = _gskernel.GsColor_Red
    RosyBrown = _gskernel.GsColor_RosyBrown
    RoyalBlue = _gskernel.GsColor_RoyalBlue
    SaddleBrown = _gskernel.GsColor_SaddleBrown
    Salmon = _gskernel.GsColor_Salmon
    SandyBrown = _gskernel.GsColor_SandyBrown
    SeaGreen = _gskernel.GsColor_SeaGreen
    SeaShell = _gskernel.GsColor_SeaShell
    Sienna = _gskernel.GsColor_Sienna
    Silver = _gskernel.GsColor_Silver
    SkyBlue = _gskernel.GsColor_SkyBlue
    SlateBlue = _gskernel.GsColor_SlateBlue
    SlateGray = _gskernel.GsColor_SlateGray
    Snow = _gskernel.GsColor_Snow
    SpringGreen = _gskernel.GsColor_SpringGreen
    SteelBlue = _gskernel.GsColor_SteelBlue
    Tan = _gskernel.GsColor_Tan
    Teal = _gskernel.GsColor_Teal
    Thistle = _gskernel.GsColor_Thistle
    Tomato = _gskernel.GsColor_Tomato
    Transparent = _gskernel.GsColor_Transparent
    Turquoise = _gskernel.GsColor_Turquoise
    Violet = _gskernel.GsColor_Violet
    VioletRed = _gskernel.GsColor_VioletRed
    Wheat = _gskernel.GsColor_Wheat
    White = _gskernel.GsColor_White
    WhiteSmoke = _gskernel.GsColor_WhiteSmoke
    Yellow = _gskernel.GsColor_Yellow
    YellowGreen = _gskernel.GsColor_YellowGreen
    __swig_destroy__ = _gskernel.delete_GsColor

# Register GsColor in _gskernel:
_gskernel.GsColor_swigregister(GsColor)

def GsColor_FromCSS(csscolor: 'char const *') -> "GsColor":
    r""" 从CSS颜色描述构造"""
    return _gskernel.GsColor_FromCSS(csscolor)

def GsColor_FromCOLORREF(rgb: 'unsigned int') -> "GsColor":
    r""" 从Win32的RGB颜色构造"""
    return _gskernel.GsColor_FromCOLORREF(rgb)

def GsColor_FromARGB(r: 'unsigned char', g: 'unsigned char', b: 'unsigned char', a: 'unsigned char'=255) -> "GsColor":
    r"""
     根据R，G，B，A通道构造 :type r: unsigned char
    :param r: 红色通道[0,255] :type g: unsigned char
    :param g: 绿色通道[0,255] :type b: unsigned char
    :param b: 蓝色通道[0,255] :type a: unsigned char
    :param a: 透明通道[0,255]
    """
    return _gskernel.GsColor_FromARGB(r, g, b, a)

def GsColor_FromARGBF(r: 'float', g: 'float', b: 'float', a: 'float'=1.0) -> "GsColor":
    r"""
     从浮点R，G，B，A通道构造 :type r: float
    :param r: 红色通道[0,1] :type g: float
    :param g: 绿色通道[0,1] :type b: float
    :param b: 蓝色通道[0,1] :type a: float
    :param a: 透明通道[0,1]
    """
    return _gskernel.GsColor_FromARGBF(r, g, b, a)

def GsColor_FromColor(rhs: 'GsColor', a: 'unsigned char') -> "GsColor":
    r""" 改变透明度构造已有颜色"""
    return _gskernel.GsColor_FromColor(rhs, a)

def GsColor_FromColorF(rhs: 'GsColor', a: 'float') -> "GsColor":
    r""" 改变透明度构造已有颜色"""
    return _gskernel.GsColor_FromColorF(rhs, a)

def GsColor_FromName(strName: 'char const *') -> "GsColor":
    r""" 从颜色名称构造"""
    return _gskernel.GsColor_FromName(strName)

def GsColor_Random() -> "GsColor":
    r""" 生成一个随机的颜色"""
    return _gskernel.GsColor_Random()

def GsColor_FromHSV(h: 'float', s: 'float', v: 'float', a: 'unsigned char'=255) -> "GsColor":
    r"""
     从HSV颜色构造 :type h: float
    :param h: Hue  色调 :type s: float
    :param s: Saturation 饱和度 :type v: float
    :param v: Value 亮度
    """
    return _gskernel.GsColor_FromHSV(h, s, v, a)

class GsPT(object):
    r""" 创建一个int类型的点结构体"""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    X = property(_gskernel.GsPT_X_get, _gskernel.GsPT_X_set)
    Y = property(_gskernel.GsPT_Y_get, _gskernel.GsPT_Y_set)

    def __init__(self, *args):
        _gskernel.GsPT_swiginit(self, _gskernel.new_GsPT(*args))
    __swig_destroy__ = _gskernel.delete_GsPT

# Register GsPT in _gskernel:
_gskernel.GsPT_swigregister(GsPT)

class GsPTF(object):
    r""" 创建一个float类型的点结构体"""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    X = property(_gskernel.GsPTF_X_get, _gskernel.GsPTF_X_set)
    Y = property(_gskernel.GsPTF_Y_get, _gskernel.GsPTF_Y_set)

    def __init__(self, *args):
        r"""
        *Overload 1:*
        缺省构造函数

        |

        *Overload 2:*
        重载构造函数

        |

        *Overload 3:*
        重载构造函数

        |

        *Overload 4:*
        重载构造函数

        |

        *Overload 5:*
        重载构造函数
        """
        _gskernel.GsPTF_swiginit(self, _gskernel.new_GsPTF(*args))
    __swig_destroy__ = _gskernel.delete_GsPTF

# Register GsPTF in _gskernel:
_gskernel.GsPTF_swigregister(GsPTF)

class GsSize(object):
    r""" 设置int型宽度和高度"""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    Width = property(_gskernel.GsSize_Width_get, _gskernel.GsSize_Width_set)
    Height = property(_gskernel.GsSize_Height_get, _gskernel.GsSize_Height_set)

    def __init__(self, *args):
        r"""
        *Overload 1:*
        缺省构造函数

        |

        *Overload 2:*
        重载构造函数

        |

        *Overload 3:*
        从点构造

        |

        *Overload 4:*
        重载构造函数
        """
        _gskernel.GsSize_swiginit(self, _gskernel.new_GsSize(*args))
    __swig_destroy__ = _gskernel.delete_GsSize

# Register GsSize in _gskernel:
_gskernel.GsSize_swigregister(GsSize)

class GsSizeF(object):
    r""" 设置float型宽度和高度"""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    Width = property(_gskernel.GsSizeF_Width_get, _gskernel.GsSizeF_Width_set)
    Height = property(_gskernel.GsSizeF_Height_get, _gskernel.GsSizeF_Height_set)

    def __init__(self, *args):
        r"""
        *Overload 1:*
        缺省构造函数

        |

        *Overload 2:*
        重载构造函数

        |

        *Overload 3:*
        重载构造函数

        |

        *Overload 4:*
        重载构造函数
        """
        _gskernel.GsSizeF_swiginit(self, _gskernel.new_GsSizeF(*args))
    __swig_destroy__ = _gskernel.delete_GsSizeF

# Register GsSizeF in _gskernel:
_gskernel.GsSizeF_swigregister(GsSizeF)

class GsRect(object):
    r""" 创建一个int类型的矩形"""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    Left = property(_gskernel.GsRect_Left_get, _gskernel.GsRect_Left_set)
    Right = property(_gskernel.GsRect_Right_get, _gskernel.GsRect_Right_set)
    Top = property(_gskernel.GsRect_Top_get, _gskernel.GsRect_Top_set)
    Bottom = property(_gskernel.GsRect_Bottom_get, _gskernel.GsRect_Bottom_set)

    def __init__(self, *args):
        r"""
        *Overload 1:*
        缺省构造函数

        |

        *Overload 2:*
        重载构造函数

        |

        *Overload 3:*
        重载构造函数

        |

        *Overload 4:*
        重载构造函数
        """
        _gskernel.GsRect_swiginit(self, _gskernel.new_GsRect(*args))

    def Width(self) -> "int":
        r""" 设置宽度"""
        return _gskernel.GsRect_Width(self)

    def Height(self) -> "int":
        r""" 设置高度"""
        return _gskernel.GsRect_Height(self)

    def Offset(self, pt: 'GsPT') -> "GsRect &":
        r""" 偏移一个位置"""
        return _gskernel.GsRect_Offset(self, pt)

    def Center(self) -> "GsPT":
        r""" 中心点"""
        return _gskernel.GsRect_Center(self)

    def IsIntersects(self, rhs: 'GsRect') -> "bool":
        r""" 是否相交"""
        return _gskernel.GsRect_IsIntersects(self, rhs)

    def Intersects(self, rhs: 'GsRect') -> "GsRect":
        r""" 计算两个相交的部分"""
        return _gskernel.GsRect_Intersects(self, rhs)

    def IsDisjoin(self, *args) -> "bool":
        r"""
        *Overload 1:*
        是否和线相离

        |

        *Overload 2:*
        是否相离
        """
        return _gskernel.GsRect_IsDisjoin(self, *args)

    def IsContain(self, *args) -> "bool":
        r"""
        *Overload 1:*
        是否包含

        |

        *Overload 2:*
        是否包含

        |

        *Overload 3:*
        是否包含
        """
        return _gskernel.GsRect_IsContain(self, *args)

    def Location(self) -> "GsPT":
        r""" 定位点"""
        return _gskernel.GsRect_Location(self)

    def Size(self) -> "GsSize":
        r""" 大小"""
        return _gskernel.GsRect_Size(self)

    def LeftTop(self) -> "GsPT":
        r""" 左上角"""
        return _gskernel.GsRect_LeftTop(self)

    def RightTop(self) -> "GsPT":
        r""" 右上角"""
        return _gskernel.GsRect_RightTop(self)

    def LeftBottom(self) -> "GsPT":
        r""" 左下角"""
        return _gskernel.GsRect_LeftBottom(self)

    def RightBottom(self) -> "GsPT":
        r""" 右下角"""
        return _gskernel.GsRect_RightBottom(self)

    def OffsetTo(self, pt: 'GsPT') -> "GsRect":
        r""" 矩形偏移 矩形偏移 矩形偏移返回新的偏移后的矩形"""
        return _gskernel.GsRect_OffsetTo(self, pt)

    def Union(self, rect: 'GsRect') -> "GsRect &":
        r""" 矩形合并 合并到自身 矩形合并"""
        return _gskernel.GsRect_Union(self, rect)
    __swig_destroy__ = _gskernel.delete_GsRect

# Register GsRect in _gskernel:
_gskernel.GsRect_swigregister(GsRect)

class GsRectF(object):
    r""" 创建一个float类型的矩形"""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    Left = property(_gskernel.GsRectF_Left_get, _gskernel.GsRectF_Left_set)
    Right = property(_gskernel.GsRectF_Right_get, _gskernel.GsRectF_Right_set)
    Top = property(_gskernel.GsRectF_Top_get, _gskernel.GsRectF_Top_set)
    Bottom = property(_gskernel.GsRectF_Bottom_get, _gskernel.GsRectF_Bottom_set)

    def __init__(self, *args):
        r"""
        *Overload 1:*
        缺省构造函数

        |

        *Overload 2:*
        构造函数重载

        |

        *Overload 3:*
        构造函数重载

        |

        *Overload 4:*
        构造函数重载

        |

        *Overload 5:*
        构造函数重载

        |

        *Overload 6:*
        构造函数重载

        |

        *Overload 7:*
        构造函数重载
        """
        _gskernel.GsRectF_swiginit(self, _gskernel.new_GsRectF(*args))

    def Width(self) -> "float":
        r""" 设置宽度"""
        return _gskernel.GsRectF_Width(self)

    def Height(self) -> "float":
        r""" 设置高度"""
        return _gskernel.GsRectF_Height(self)

    def Offset(self, pt: 'GsPTF') -> "GsRectF &":
        return _gskernel.GsRectF_Offset(self, pt)

    def Center(self) -> "GsPTF":
        r""" 中心点"""
        return _gskernel.GsRectF_Center(self)

    def IsIntersects(self, rhs: 'GsRectF') -> "bool":
        r""" 是否相交"""
        return _gskernel.GsRectF_IsIntersects(self, rhs)

    def Intersects(self, rhs: 'GsRectF') -> "GsRectF":
        r""" 计算两个相交的部分"""
        return _gskernel.GsRectF_Intersects(self, rhs)

    def IsDisjoin(self, *args) -> "bool":
        r"""
        *Overload 1:*
        是否和线相离

        |

        *Overload 2:*
        是否相离
        """
        return _gskernel.GsRectF_IsDisjoin(self, *args)

    def IsContain(self, *args) -> "bool":
        r"""
        *Overload 1:*
        是否包含

        |

        *Overload 2:*
        是否包含

        |

        *Overload 3:*
        是否包含
        """
        return _gskernel.GsRectF_IsContain(self, *args)

    def Location(self) -> "GsPTF":
        r""" 定位点"""
        return _gskernel.GsRectF_Location(self)

    def Size(self) -> "GsSizeF":
        r""" 大小"""
        return _gskernel.GsRectF_Size(self)

    def LeftTop(self) -> "GsPTF":
        r""" 左上角"""
        return _gskernel.GsRectF_LeftTop(self)

    def RightTop(self) -> "GsPTF":
        r""" 右上角"""
        return _gskernel.GsRectF_RightTop(self)

    def LeftBottom(self) -> "GsPTF":
        r""" 左下角"""
        return _gskernel.GsRectF_LeftBottom(self)

    def RightBottom(self) -> "GsPTF":
        r""" 右下角"""
        return _gskernel.GsRectF_RightBottom(self)

    def Union(self, rect: 'GsRectF') -> "GsRectF &":
        r""" 矩形合并 合并到自身 矩形合并"""
        return _gskernel.GsRectF_Union(self, rect)

    def OffsetTo(self, *args) -> "GsRectF":
        r"""
        *Overload 1:*
        矩形偏移 矩形偏移 矩形偏移返回新的偏移后的矩形

        |

        *Overload 2:*
        矩形偏移 矩形偏移 矩形偏移返回新的偏移后的矩形
        """
        return _gskernel.GsRectF_OffsetTo(self, *args)
    __swig_destroy__ = _gskernel.delete_GsRectF

# Register GsRectF in _gskernel:
_gskernel.GsRectF_swigregister(GsRectF)

eBGRA32 = _gskernel.eBGRA32
eABGR32 = _gskernel.eABGR32
eRGBA32 = _gskernel.eRGBA32
eARGB32 = _gskernel.eARGB32
class GsImage(GsRefObject):
    r""" 影像对象"""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __swig_destroy__ = _gskernel.delete_GsImage

    def CopyFrom(self, pImage: 'GsImage') -> "bool":
        r""" 拷贝"""
        return _gskernel.GsImage_CopyFrom(self, pImage)

    def Width(self) -> "unsigned int":
        r""" 设置宽度"""
        return _gskernel.GsImage_Width(self)

    def Height(self) -> "unsigned int":
        r""" 设置高度"""
        return _gskernel.GsImage_Height(self)

    def Stride(self) -> "unsigned int":
        r""" 获取图像的字节数组，并非所有图像都能够成功 图像一行的字节长度"""
        return _gskernel.GsImage_Stride(self)

    def SavePNG(self, *args) -> "bool":
        r"""
        *Overload 1:*
        获取某行的首指针 保存图像为PNG格式文件

        |

        *Overload 2:*
        保存图像为PNG格式的内存块。
        """
        return _gskernel.GsImage_SavePNG(self, *args)

    def SaveJPEG(self, *args) -> "bool":
        r"""
        *Overload 1:*
        保存图像为JPEG格式文件

        |

        *Overload 2:*
        保存图像为JPEG格式的内存块。

        |

        *Overload 3:*
        保存图像为JPEG格式的内存块。
        """
        return _gskernel.GsImage_SaveJPEG(self, *args)

    @staticmethod
    def LoadFrom(*args) -> "GsSmarterPtr< GsImage >":
        r"""
        *Overload 1:*
        从文件载入生成图像

        |

        *Overload 2:*
        从内存块载入生成图像对象
        """
        return _gskernel.GsImage_LoadFrom(*args)

    def FillImageData(self, buff: 'signed char const *', nLen: 'int', eType: 'GsRGBAType') -> "bool":
        r""" 拷贝外部数据到自身"""
        return _gskernel.GsImage_FillImageData(self, buff, nLen, eType)

    def CopyImageData(self, pBuff: 'signed char *', nLen: 'int', eType: 'GsRGBAType') -> "int":
        return _gskernel.GsImage_CopyImageData(self, pBuff, nLen, eType)

# Register GsImage in _gskernel:
_gskernel.GsImage_swigregister(GsImage)

def GsImage_LoadFrom(*args) -> "GsSmarterPtr< GsImage >":
    r"""
    *Overload 1:*
    从文件载入生成图像

    |

    *Overload 2:*
    从内存块载入生成图像对象
    """
    return _gskernel.GsImage_LoadFrom(*args)

class GsSimpleBitmap(GsImage):
    r""" 内存中存储的简单位图对象"""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        r"""
        *Overload 1:*
        重载构造函数

        |

        *Overload 2:*
        解码文件格式的图像
        """
        _gskernel.GsSimpleBitmap_swiginit(self, _gskernel.new_GsSimpleBitmap(*args))
    __swig_destroy__ = _gskernel.delete_GsSimpleBitmap

# Register GsSimpleBitmap in _gskernel:
_gskernel.GsSimpleBitmap_swigregister(GsSimpleBitmap)

class GsPAMBitmap(GsImage):
    r""" 基于NetPbm的PAM格式文件影像 http://netpbm.sourceforge.net/"""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        _gskernel.GsPAMBitmap_swiginit(self, _gskernel.new_GsPAMBitmap(*args))
    __swig_destroy__ = _gskernel.delete_GsPAMBitmap

# Register GsPAMBitmap in _gskernel:
_gskernel.GsPAMBitmap_swigregister(GsPAMBitmap)

class GsSVGImage(GsImage):
    r""" 解析SVG为位图。"""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, svg: 'char const *', bFileName: 'bool'):
        r""" 根据SVG文件或者字符串构造位图"""
        _gskernel.GsSVGImage_swiginit(self, _gskernel.new_GsSVGImage(svg, bFileName))

    def SVG(self, *args) -> "void":
        r"""
        *Overload 1:*
        获取SVG的xml字符串

        |

        *Overload 2:*
        设置SVG字符串或者SVG文件
        """
        return _gskernel.GsSVGImage_SVG(self, *args)

    def IsValid(self) -> "bool":
        r""" 是否是有效的SVG"""
        return _gskernel.GsSVGImage_IsValid(self)

    def SVGSize(self) -> "GsSize":
        r""" SVG图像的宽和高"""
        return _gskernel.GsSVGImage_SVGSize(self)

    def SVGScale(self, *args) -> "void":
        r"""
        *Overload 1:*
        获取SVG绘制时的缩放比率

        |

        *Overload 2:*
        设置SVG绘制时的缩放比率
        """
        return _gskernel.GsSVGImage_SVGScale(self, *args)

    def DPI(self, *args) -> "void":
        r"""
        *Overload 1:*
        获取图像显示分辨率

        |

        *Overload 2:*
        设置图像显示分辨率
        """
        return _gskernel.GsSVGImage_DPI(self, *args)
    __swig_destroy__ = _gskernel.delete_GsSVGImage

# Register GsSVGImage in _gskernel:
_gskernel.GsSVGImage_swigregister(GsSVGImage)

class GsColorRamp_OnGenerateColors(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    __swig_destroy__ = _gskernel.delete_GsColorRamp_OnGenerateColors

    def OnGenerateColors(self, i: 'int', color: 'GsColor') -> "bool":
        return _gskernel.GsColorRamp_OnGenerateColors_OnGenerateColors(self, i, color)

    def __init__(self):
        _gskernel.GsColorRamp_OnGenerateColors_swiginit(self, _gskernel.new_GsColorRamp_OnGenerateColors())

# Register GsColorRamp_OnGenerateColors in _gskernel:
_gskernel.GsColorRamp_OnGenerateColors_swigregister(GsColorRamp_OnGenerateColors)

class GsColorRamp(GsRefObject):
    r""" 色带"""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr

    def Name(self, *args) -> "void":
        r"""
        *Overload 1:*
        获取名称

        |

        *Overload 2:*
        设置名称
        """
        return _gskernel.GsColorRamp_Name(self, *args)

    def Color(self, value: 'double') -> "GsColor":
        r"""
         获取颜色 :type value: float
        :param value: 色带渐变区间,取值0-1,其中0对应开始颜色,1对应结束颜色 :rtype: :py:class:`GsColor`
        :return: GsColor颜色对象
        """
        return _gskernel.GsColorRamp_Color(self, value)

    def GenerateColors(self, nCount: 'int', start: 'double'=0, end: 'double'=1) -> "void":
        r""" 根据起止区间(0-1)和颜色数生成颜色 :param nCount颜色数量: :param start,end起止区间,取值0-1,其中0对应开始颜色,1对应结束颜色:"""
        return _gskernel.GsColorRamp_GenerateColors(self, nCount, start, end)

    def OnGenerateColorsAdd(self, call: 'GsColorRamp_OnGenerateColors') -> "void":
        r""" 颜色代理,通过代理获取生成颜色的索引和颜色 参数1 颜色索引 参数2 颜色 返回值 颜色是否生成成功"""
        return _gskernel.GsColorRamp_OnGenerateColorsAdd(self, call)

    def OnGenerateColorsRemove(self, call: 'GsColorRamp_OnGenerateColors') -> "void":
        return _gskernel.GsColorRamp_OnGenerateColorsRemove(self, call)
    __swig_destroy__ = _gskernel.delete_GsColorRamp

# Register GsColorRamp in _gskernel:
_gskernel.GsColorRamp_swigregister(GsColorRamp)

class GsGradsColor(GsColorRamp):
    r""" 渐变色"""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def From(self, *args) -> "void":
        r"""
        *Overload 1:*
        获取开始颜色

        |

        *Overload 2:*
        设置开始颜色
        """
        return _gskernel.GsGradsColor_From(self, *args)

    def To(self, *args) -> "void":
        r"""
        *Overload 1:*
        获取结束颜色

        |

        *Overload 2:*
        设置结束颜色
        """
        return _gskernel.GsGradsColor_To(self, *args)

    def Color(self, value: 'double') -> "GsColor":
        r"""
         获取渐变色 :type value: float
        :param value: 渐变区间,取值0-1,其中0对应开始颜色,1对应结束颜色 :rtype: :py:class:`GsColor`
        :return: GsColor颜色对象
        """
        return _gskernel.GsGradsColor_Color(self, value)

    def GenerateColors(self, nCount: 'int', start: 'double'=0, end: 'double'=1) -> "void":
        r""" 根据渐变区间(0-1)和颜色数生成颜色 :param nCount颜色数量: :param start,end渐变区间,取值0-1,其中0对应开始颜色,1对应结束颜色:"""
        return _gskernel.GsGradsColor_GenerateColors(self, nCount, start, end)

    def __init__(self):
        _gskernel.GsGradsColor_swiginit(self, _gskernel.new_GsGradsColor())
    __swig_destroy__ = _gskernel.delete_GsGradsColor

# Register GsGradsColor in _gskernel:
_gskernel.GsGradsColor_swigregister(GsGradsColor)

eHSVFormula = _gskernel.eHSVFormula
eHFormula = _gskernel.eHFormula
eSFormula = _gskernel.eSFormula
eVFormula = _gskernel.eVFormula
class GsFormulaGradsColor(GsGradsColor):
    r""" 方程式渐变色"""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, _from: 'GsColor', to: 'GsColor'):
        r"""
         从起止颜色构造 :type from: :py:class:`GsColor`
        :param from: 开始颜色 :type to: :py:class:`GsColor`
        :param to: 结束颜色
        """
        _gskernel.GsFormulaGradsColor_swiginit(self, _gskernel.new_GsFormulaGradsColor(_from, to))

    def Style(self, *args) -> "void":
        r"""
        *Overload 1:*
        获取变换类型

        |

        *Overload 2:*
        设置变换类型
        """
        return _gskernel.GsFormulaGradsColor_Style(self, *args)

    def Color(self, value: 'double') -> "GsColor":
        r"""
         获取渐变色 :type value: float
        :param value: 渐变区间,取值0-1,其中0对应开始颜色,1对应结束颜色 :rtype: :py:class:`GsColor`
        :return: GsColor颜色对象
        """
        return _gskernel.GsFormulaGradsColor_Color(self, value)

    def GenerateColors(self, nCount: 'int', start: 'double'=0, end: 'double'=1) -> "void":
        r""" 根据渐变区间(0-1)和颜色数生成颜色 :param nCount颜色数量: :param start,end渐变区间,取值0-1,其中0对应开始颜色,1对应结束颜色:"""
        return _gskernel.GsFormulaGradsColor_GenerateColors(self, nCount, start, end)
    __swig_destroy__ = _gskernel.delete_GsFormulaGradsColor

# Register GsFormulaGradsColor in _gskernel:
_gskernel.GsFormulaGradsColor_swigregister(GsFormulaGradsColor)

class GsColorVector(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self):
        _gskernel.GsColorVector_swiginit(self, _gskernel.new_GsColorVector())
    __swig_destroy__ = _gskernel.delete_GsColorVector

    def add(self, obj: 'GsColor') -> "void":
        return _gskernel.GsColorVector_add(self, obj)

    def size(self) -> "size_t":
        return _gskernel.GsColorVector_size(self)

    def clear(self) -> "void":
        return _gskernel.GsColorVector_clear(self)

    def empty(self) -> "bool":
        return _gskernel.GsColorVector_empty(self)

    def get(self, n: 'int') -> "GsColor":
        return _gskernel.GsColorVector_get(self, n)

    def set(self, n: 'int', val: 'GsColor') -> "void":
        return _gskernel.GsColorVector_set(self, n, val)

# Register GsColorVector in _gskernel:
_gskernel.GsColorVector_swigregister(GsColorVector)

class GsFixedGradsColor(GsGradsColor):
    r""" 固定颜色数量的渐变色 通过一定数量的颜色进行堆叠，达到渐变的效果"""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        r"""
        *Overload 1:*
        通过起止颜色，颜色数量，以及变换类型构造 在起止颜色范围内,通过变换类型,随机生成由count个颜色构成的色带

        |

        *Overload 2:*
        通过一定数量的颜色数组构造
        """
        _gskernel.GsFixedGradsColor_swiginit(self, _gskernel.new_GsFixedGradsColor(*args))

    def Colors(self) -> "GsVector< GsColor > &":
        r""" 获取渐变色数组"""
        return _gskernel.GsFixedGradsColor_Colors(self)

    def Color(self, value: 'double') -> "GsColor":
        r"""
         获取渐变色 :type value: float
        :param value: 渐变区间,取值0-1,其中0对应开始颜色,1对应结束颜色 :rtype: :py:class:`GsColor`
        :return: GsColor颜色对象
        """
        return _gskernel.GsFixedGradsColor_Color(self, value)

    def GenerateColors(self, nCount: 'int', start: 'double'=0, end: 'double'=1) -> "void":
        r""" 根据渐变区间(0-1)和颜色数生成颜色 :param nCount颜色数量: :param start,end渐变区间,取值0-1,其中0对应开始颜色,1对应结束颜色:"""
        return _gskernel.GsFixedGradsColor_GenerateColors(self, nCount, start, end)
    __swig_destroy__ = _gskernel.delete_GsFixedGradsColor

# Register GsFixedGradsColor in _gskernel:
_gskernel.GsFixedGradsColor_swigregister(GsFixedGradsColor)

class GsTimeSpan(object):
    r""" 时间间隔"""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    TimeSpan = property(_gskernel.GsTimeSpan_TimeSpan_get, _gskernel.GsTimeSpan_TimeSpan_set, doc=r""" 时间间隔（秒	）""")

    def __init__(self, *args):
        _gskernel.GsTimeSpan_swiginit(self, _gskernel.new_GsTimeSpan(*args))

    def Days(self) -> "int":
        r""" 时间间隔的天数"""
        return _gskernel.GsTimeSpan_Days(self)

    def TotalHours(self) -> "int":
        r""" 时间间隔的总小时数"""
        return _gskernel.GsTimeSpan_TotalHours(self)

    def Hours(self) -> "int":
        r""" 时间间隔的小时数"""
        return _gskernel.GsTimeSpan_Hours(self)

    def TotalMinutes(self) -> "int":
        r""" 时间间隔的总分钟数"""
        return _gskernel.GsTimeSpan_TotalMinutes(self)

    def Minutes(self) -> "int":
        r""" 时间间隔的分钟数"""
        return _gskernel.GsTimeSpan_Minutes(self)

    def TotalSeconds(self) -> "int":
        r""" 时间间隔的总秒数"""
        return _gskernel.GsTimeSpan_TotalSeconds(self)

    def Seconds(self) -> "int":
        r""" 时间间隔的秒数"""
        return _gskernel.GsTimeSpan_Seconds(self)
    __swig_destroy__ = _gskernel.delete_GsTimeSpan

# Register GsTimeSpan in _gskernel:
_gskernel.GsTimeSpan_swigregister(GsTimeSpan)

eSunday = _gskernel.eSunday
r""" 星期天"""
eMonday = _gskernel.eMonday
r""" 星期一"""
eTuesday = _gskernel.eTuesday
r""" 星期二"""
eWednesday = _gskernel.eWednesday
r""" 星期三"""
eThursday = _gskernel.eThursday
r""" 星期四"""
eFriday = _gskernel.eFriday
r""" 星期五"""
eSaturday = _gskernel.eSaturday
r""" 星期六"""
class GsDateTime(object):
    r""" 日期时间，缺省为UTC时间 https://en.wikipedia.org/wiki/Coordinated_Universal_Time"""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    Time = property(_gskernel.GsDateTime_Time_get, _gskernel.GsDateTime_Time_set, doc=r""" 从1970.1.1日经过的秒 首先确定 【格林威治时间1970年01月01日00时00分00秒】 时间等于 【北京时间1970年01月01日08时00分00秒】 时间戳：从上面的时间开始至现在的总秒数。 1：time_t 类型就是实际的时间戳。也是内核中GsDateTime真正存储的long long Time。 2：time_t now = time(0),也正好验证了时间戳的概念。返回的是当前时间戳。""")

    def __init__(self, *args):
        r"""
        *Overload 1:*
         缺省构造，当前时间,UTC时间

        |

        *Overload 2:*
         拷贝构造

        |

        *Overload 3:*
         从1970.1.1日经过的秒构造时间 根据年月日时分秒构造:type year: int
        :param year: 四位年yyyy:type mon: int
        :param mon:  月[1~12]:type day: int
        :param day:  日[1~31]:type hour: int
        :param hour: 时[0~23]:type min: int
        :param min:  分[0~59]:type sec: int
        :param sec:  秒[0~59]
        """
        _gskernel.GsDateTime_swiginit(self, _gskernel.new_GsDateTime(*args))

    @staticmethod
    def TimeZone() -> "long long":
        r""" 当前时区偏移，单位秒 时区偏移是UTC时间到本地时间的时间差。比如正8区的时区偏移是-288000=-8*60*60"""
        return _gskernel.GsDateTime_TimeZone()

    @staticmethod
    def Now() -> "GsDateTime":
        r""" 当前时间，UTC时间"""
        return _gskernel.GsDateTime_Now()

    def ToUTC(self) -> "GsDateTime":
        r""" 将当前时间当作本地时间转换为UTC时间 等价于当前时间减去时区偏移"""
        return _gskernel.GsDateTime_ToUTC(self)

    def ToLocal(self) -> "GsDateTime":
        r""" 将当前时间UTC时间转换为本地时间 等价于当前时间加上时区偏移"""
        return _gskernel.GsDateTime_ToLocal(self)

    def MakeDateTime(self, year: 'int', mon: 'int', day: 'int', hour: 'int', min: 'int', sec: 'int') -> "void":
        r"""
         根据年月日时分秒构造:type year: int
        :param year:  四位年yyyy:type mon: int
        :param mon:  月[1~12]:type day: int
        :param day:  日[1~31]:type hour: int
        :param hour: 时[0~23]:type min: int
        :param min:  分[0~59]:type sec: int
        :param sec:  秒[0~59]
        """
        return _gskernel.GsDateTime_MakeDateTime(self, year, mon, day, hour, min, sec)

    def Year(self) -> "int":
        r""" 获取年"""
        return _gskernel.GsDateTime_Year(self)

    def Month(self) -> "int":
        r""" 获取月"""
        return _gskernel.GsDateTime_Month(self)

    def Day(self) -> "int":
        r""" 获取日"""
        return _gskernel.GsDateTime_Day(self)

    def Hour(self) -> "int":
        r""" 获取小时"""
        return _gskernel.GsDateTime_Hour(self)

    def Minute(self) -> "int":
        r""" 获取分"""
        return _gskernel.GsDateTime_Minute(self)

    def Second(self) -> "int":
        r""" 获取秒"""
        return _gskernel.GsDateTime_Second(self)

    def DayOfWeek(self) -> "GsWeekDay":
        r""" 获取星期几"""
        return _gskernel.GsDateTime_DayOfWeek(self)

    def ToLongDateString(self) -> "GsString":
        r""" 转换为长日期字符串 格式 %Y-%m-%d"""
        return _gskernel.GsDateTime_ToLongDateString(self)

    def ToLongTimeString(self) -> "GsString":
        r""" 转换为长时间字符串 格式 %H:%M:%S"""
        return _gskernel.GsDateTime_ToLongTimeString(self)

    def ToShortDateString(self) -> "GsString":
        r""" 转换短日期字符串 格式 %Y/%m/%d"""
        return _gskernel.GsDateTime_ToShortDateString(self)

    def ToShortTimeString(self) -> "GsString":
        r""" 转换短时间字符串 格式 %H:%M"""
        return _gskernel.GsDateTime_ToShortTimeString(self)

    def ToString(self, *args) -> "GsString":
        r"""
        *Overload 1:*
        转换字符串 格式 %Y-%m-%d %H:%M:%S

        |

        *Overload 2:*
        按照格式转换为字符串 参考strftime http://www.cplusplus.com/reference/ctime/strftime/
        """
        return _gskernel.GsDateTime_ToString(self, *args)

    @staticmethod
    def TryParse(strTime: 'char const *', result: 'GsDateTime') -> "bool":
        r""" 解析字符串时间为时间数据"""
        return _gskernel.GsDateTime_TryParse(strTime, result)

    @staticmethod
    def TickCount() -> "unsigned long long":
        r""" 当前cpu时钟周期"""
        return _gskernel.GsDateTime_TickCount()
    __swig_destroy__ = _gskernel.delete_GsDateTime

# Register GsDateTime in _gskernel:
_gskernel.GsDateTime_swigregister(GsDateTime)

def GsDateTime_TimeZone() -> "long long":
    r""" 当前时区偏移，单位秒 时区偏移是UTC时间到本地时间的时间差。比如正8区的时区偏移是-288000=-8*60*60"""
    return _gskernel.GsDateTime_TimeZone()

def GsDateTime_Now() -> "GsDateTime":
    r""" 当前时间，UTC时间"""
    return _gskernel.GsDateTime_Now()

def GsDateTime_TryParse(strTime: 'char const *', result: 'GsDateTime') -> "bool":
    r""" 解析字符串时间为时间数据"""
    return _gskernel.GsDateTime_TryParse(strTime, result)

def GsDateTime_TickCount() -> "unsigned long long":
    r""" 当前cpu时钟周期"""
    return _gskernel.GsDateTime_TickCount()

eUTCTime = _gskernel.eUTCTime
r""" UTC时间表示法"""
eLocalTime = _gskernel.eLocalTime
r""" 本地时间"""
class GsSignedDateTime(GsDateTime):
    r""" 标记了类型的日期"""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    Type = property(_gskernel.GsSignedDateTime_Type_get, _gskernel.GsSignedDateTime_Type_set, doc=r""" 时间类型""")

    def __init__(self, *args):
        _gskernel.GsSignedDateTime_swiginit(self, _gskernel.new_GsSignedDateTime(*args))
    __swig_destroy__ = _gskernel.delete_GsSignedDateTime

# Register GsSignedDateTime in _gskernel:
_gskernel.GsSignedDateTime_swigregister(GsSignedDateTime)

class GsStopWatch(object):
    r""" 高精度计时器"""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, bStart: 'bool'=False):
        r""" 构造"""
        _gskernel.GsStopWatch_swiginit(self, _gskernel.new_GsStopWatch(bStart))
    __swig_destroy__ = _gskernel.delete_GsStopWatch

    def IsStarted(self) -> "bool":
        r""" 计时器是否已经开始工作了"""
        return _gskernel.GsStopWatch_IsStarted(self)

    def Start(self) -> "bool":
        r""" 启动计时器"""
        return _gskernel.GsStopWatch_Start(self)

    def EscapedSecond(self) -> "double":
        r""" 经过的时间（单位秒）"""
        return _gskernel.GsStopWatch_EscapedSecond(self)

    def EscapedMillisecond(self) -> "double":
        r""" 经过的时间（单位毫秒）"""
        return _gskernel.GsStopWatch_EscapedMillisecond(self)

    def EscapedNanosecond(self) -> "double":
        r""" 经过的时间（单位纳秒）"""
        return _gskernel.GsStopWatch_EscapedNanosecond(self)

# Register GsStopWatch in _gskernel:
_gskernel.GsStopWatch_swigregister(GsStopWatch)

class GsTimeTracker(object):
    r""" 计时器跟踪者，当时间超过约定时间则通知到期"""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, nPeriodByMillisecond: 'int'=-1):
        r""" 毫秒构造，小于等于0则标识没有期限限制。"""
        _gskernel.GsTimeTracker_swiginit(self, _gskernel.new_GsTimeTracker(nPeriodByMillisecond))

    def IsExpire(self) -> "bool":
        r""" 时间是否到期了"""
        return _gskernel.GsTimeTracker_IsExpire(self)
    __swig_destroy__ = _gskernel.delete_GsTimeTracker

# Register GsTimeTracker in _gskernel:
_gskernel.GsTimeTracker_swigregister(GsTimeTracker)

class GsQRCodePage(object):
    r""" 一个二维码对象"""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    __swig_destroy__ = _gskernel.delete_GsQRCodePage

    def __init__(self, rhs: 'GsQRCodePage'):
        _gskernel.GsQRCodePage_swiginit(self, _gskernel.new_GsQRCodePage(rhs))

    def Size(self) -> "int":
        r""" 二维码的大小"""
        return _gskernel.GsQRCodePage_Size(self)

    def IsSet(self, r: 'int', c: 'int') -> "bool":
        r""" 根据行列获取是否存在色块。"""
        return _gskernel.GsQRCodePage_IsSet(self, r, c)

# Register GsQRCodePage in _gskernel:
_gskernel.GsQRCodePage_swigregister(GsQRCodePage)

eQR_ECLEVEL_L = _gskernel.eQR_ECLEVEL_L
r""" lowest"""
eQR_ECLEVEL_M = _gskernel.eQR_ECLEVEL_M
eQR_ECLEVEL_Q = _gskernel.eQR_ECLEVEL_Q
eQR_ECLEVEL_H = _gskernel.eQR_ECLEVEL_H
r""" highest"""
eQR_MODE_NUL = _gskernel.eQR_MODE_NUL
r""" Terminator (NUL character). Internal use only"""
eQR_MODE_NUM = _gskernel.eQR_MODE_NUM
r""" Numeric mode"""
eQR_MODE_AN = _gskernel.eQR_MODE_AN
r""" Alphabet-numeric mode"""
eQR_MODE_8 = _gskernel.eQR_MODE_8
r""" 8-bit data mode"""
eQR_MODE_KANJI = _gskernel.eQR_MODE_KANJI
r""" Kanji (shift-jis) mode"""
eQR_MODE_STRUCTURE = _gskernel.eQR_MODE_STRUCTURE
r""" Internal use only"""
eQR_MODE_ECI = _gskernel.eQR_MODE_ECI
r""" ECI mode"""
eQR_MODE_FNC1FIRST = _gskernel.eQR_MODE_FNC1FIRST
r""" FNC1, first position"""
eQR_MODE_FNC1SECOND = _gskernel.eQR_MODE_FNC1SECOND
r""" FNC1, second position"""
eQRCodeUnknown = _gskernel.eQRCodeUnknown
r""" 未知类型，错误类型"""
eQRCodeString = _gskernel.eQRCodeString
r""" 字符串二维编码"""
eQRCodeBinary = _gskernel.eQRCodeBinary
r""" 任意二进制数据"""
class GsQRCode(object):
    r""" 二维码生成类。"""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        _gskernel.GsQRCode_swiginit(self, _gskernel.new_GsQRCode(*args))
    __swig_destroy__ = _gskernel.delete_GsQRCode

    def Level(self, *args) -> "void":
        r"""
        *Overload 1:*
        二维码的编码级别 级别越高，容错性越好

        |

        *Overload 2:*
        二维码的编码级别 级别越高，容错性越好
        """
        return _gskernel.GsQRCode_Level(self, *args)

    def Mode(self, *args) -> "void":
        r"""
        *Overload 1:*
        二维码的编码模式

        |

        *Overload 2:*
        二维码的编码模式
        """
        return _gskernel.GsQRCode_Mode(self, *args)

    def Encode(self, *args) -> "bool":
        r"""
        *Overload 1:*
        任意字符串进行编码

        |

        *Overload 2:*
        任意内存块进行编码
        """
        return _gskernel.GsQRCode_Encode(self, *args)

    def PageCount(self) -> "int":
        r""" 生成的二维码数量"""
        return _gskernel.GsQRCode_PageCount(self)

    def QRCodePage(self, i: 'int') -> "GsQRCodePage":
        r""" 获取一个二维码数据 返回对象的生命周期应保持小于GsQRCode对象自身"""
        return _gskernel.GsQRCode_QRCodePage(self, i)

    def Reset(self) -> "void":
        r""" 重置"""
        return _gskernel.GsQRCode_Reset(self)

# Register GsQRCode in _gskernel:
_gskernel.GsQRCode_swigregister(GsQRCode)

class GsEnvironment(object):
    r""" 环境变量"""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    @staticmethod
    def EnvironmentVariableSeparator() -> "char":
        r""" 环境变量分隔符 多个环境变量如PATH环境变量多个路径的分隔符。linux下为冒号（:）,windows下为分号（;）"""
        return _gskernel.GsEnvironment_EnvironmentVariableSeparator()

    @staticmethod
    def EnvironmentVariable(name: 'char const *') -> "GsString":
        r""" 获取环境变量的值"""
        return _gskernel.GsEnvironment_EnvironmentVariable(name)

    @staticmethod
    def ChangeEnvironmentVariable(name: 'char const *', value: 'char const *') -> "void":
        r""" 修改环境变量的值"""
        return _gskernel.GsEnvironment_ChangeEnvironmentVariable(name, value)

    @staticmethod
    def RemoveEnvironmentVariable(*args) -> "GsString":
        r"""
        *Overload 1:*
        删除环境变量的值

        |

        *Overload 2:*
        删除环境变量中指定的内容，如果存在的话
        """
        return _gskernel.GsEnvironment_RemoveEnvironmentVariable(*args)

    @staticmethod
    def AppendEnvironmentVariable(name: 'char const *', content: 'char const *', bAddToTail: 'bool'=True) -> "GsString":
        r"""
         向环境变量中插入一段内容。如果存在此内容则不工作任何动作 :type name: string
        :param name: 环境变量的名称 :type content: string
        :param content: 要添加的内容 :type bAddToTail: boolean
        :param bAddToTail: 是否添加到尾部，否则就添加到头部 :rtype: :py:class:`GsString`
        :return: 返回添加后的的环境变量内容
        """
        return _gskernel.GsEnvironment_AppendEnvironmentVariable(name, content, bAddToTail)

    def __init__(self):
        _gskernel.GsEnvironment_swiginit(self, _gskernel.new_GsEnvironment())
    __swig_destroy__ = _gskernel.delete_GsEnvironment

# Register GsEnvironment in _gskernel:
_gskernel.GsEnvironment_swigregister(GsEnvironment)

def GsEnvironment_EnvironmentVariableSeparator() -> "char":
    r""" 环境变量分隔符 多个环境变量如PATH环境变量多个路径的分隔符。linux下为冒号（:）,windows下为分号（;）"""
    return _gskernel.GsEnvironment_EnvironmentVariableSeparator()

def GsEnvironment_EnvironmentVariable(name: 'char const *') -> "GsString":
    r""" 获取环境变量的值"""
    return _gskernel.GsEnvironment_EnvironmentVariable(name)

def GsEnvironment_ChangeEnvironmentVariable(name: 'char const *', value: 'char const *') -> "void":
    r""" 修改环境变量的值"""
    return _gskernel.GsEnvironment_ChangeEnvironmentVariable(name, value)

def GsEnvironment_RemoveEnvironmentVariable(*args) -> "GsString":
    r"""
    *Overload 1:*
    删除环境变量的值

    |

    *Overload 2:*
    删除环境变量中指定的内容，如果存在的话
    """
    return _gskernel.GsEnvironment_RemoveEnvironmentVariable(*args)

def GsEnvironment_AppendEnvironmentVariable(name: 'char const *', content: 'char const *', bAddToTail: 'bool'=True) -> "GsString":
    r"""
     向环境变量中插入一段内容。如果存在此内容则不工作任何动作 :type name: string
    :param name: 环境变量的名称 :type content: string
    :param content: 要添加的内容 :type bAddToTail: boolean
    :param bAddToTail: 是否添加到尾部，否则就添加到头部 :rtype: :py:class:`GsString`
    :return: 返回添加后的的环境变量内容
    """
    return _gskernel.GsEnvironment_AppendEnvironmentVariable(name, content, bAddToTail)

class GsFileSystem(object):
    r""" 文件路径相关的操作静态函数"""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    @staticmethod
    def IsUtf8Path() -> "bool":
        r""" 路径是否使用utf8字符串"""
        return _gskernel.GsFileSystem_IsUtf8Path()

    @staticmethod
    def PathSeparator() -> "char":
        r""" 文件路径的的分隔符"""
        return _gskernel.GsFileSystem_PathSeparator()

    @staticmethod
    def Exists(strPath: 'char const *') -> "bool":
        r"""
         判断文件路径、目录路径是否存在 :type strPath: string
        :param strPath: 文件或者目录的路径:rtype: boolean
        :return: 返回路径是或否存在
        """
        return _gskernel.GsFileSystem_Exists(strPath)

    @staticmethod
    def PathFolder() -> "GsString":
        r""" 系统PATH目录"""
        return _gskernel.GsFileSystem_PathFolder()

    @staticmethod
    def AddSearchPath(path: 'char const *') -> "void":
        r""" 增加搜索路径到系统PATH环境变量中"""
        return _gskernel.GsFileSystem_AddSearchPath(path)

    @staticmethod
    def TemporaryFolder() -> "GsString":
        r""" 系统临时目录"""
        return _gskernel.GsFileSystem_TemporaryFolder()

    @staticmethod
    def WorkingFolder() -> "GsString":
        r""" 工作目录"""
        return _gskernel.GsFileSystem_WorkingFolder()

    @staticmethod
    def ModuleFileName() -> "GsString":
        r""" 当前执行文件所在的文件路径"""
        return _gskernel.GsFileSystem_ModuleFileName()

    @staticmethod
    def Combine(path1: 'char const *', path2: 'char const *') -> "GsString":
        r"""
         合并两个路径字符串 :type path1: string
        :param path1: 第一个路径 :type path2: string
        :param path2: 第二个路径:rtype: :py:class:`GsString`
        :return: 包含合并的路径的字符串。如果指定的路径之一是零长度字符串，则该方法返回其他路径。如果 path2 包含绝对路径，则该方法返回 path2
        """
        return _gskernel.GsFileSystem_Combine(path1, path2)

    @staticmethod
    def MakeExistFullPath(path: 'char const *') -> "GsString":
        r""" 搜索Path获取一个路径存在的绝对路径 输入路径为绝对路径，如果该路径存在则返回，否则返回空 输入路径为相对路径，遍历PATH环境变量设置，组装第一个存在的路径返回，无法成功组装则返回空"""
        return _gskernel.GsFileSystem_MakeExistFullPath(path)

    @staticmethod
    def PathRelativePathTo(_from: 'char const *', to: 'char const *') -> "GsString":
        r"""
         从两个绝对路径计算相对路径 :type from: string
        :param from: 绝对路径，从这个绝对路径计算 :type to: string
        :param to:  绝对路径，计算该路径相对于from的相对路径:rtype: :py:class:`GsString`
        :return: 返回相对路径，如果输入路径无效则返回to
        """
        return _gskernel.GsFileSystem_PathRelativePathTo(_from, to)

    @staticmethod
    def IsFile(strPath: 'char const *') -> "bool":
        r"""
         判断一个路径是否是文件 :type strPath: string
        :param strPath: 路径:rtype: boolean
        :return: 返回路径是否是文件路径
        """
        return _gskernel.GsFileSystem_IsFile(strPath)

    @staticmethod
    def IsPathRooted(path: 'char const *') -> "bool":
        r"""
         获取一个值，该值指示指定的路径字符串是包含绝对路径信息还是包含相对路径信息。 :type path: string
        :param path: 要测试的路径:rtype: boolean
        :return: 如果 path 包含绝对路径，则为 true；否则为 false
        """
        return _gskernel.GsFileSystem_IsPathRooted(path)

    def __init__(self):
        _gskernel.GsFileSystem_swiginit(self, _gskernel.new_GsFileSystem())
    __swig_destroy__ = _gskernel.delete_GsFileSystem

# Register GsFileSystem in _gskernel:
_gskernel.GsFileSystem_swigregister(GsFileSystem)

def GsFileSystem_IsUtf8Path() -> "bool":
    r""" 路径是否使用utf8字符串"""
    return _gskernel.GsFileSystem_IsUtf8Path()

def GsFileSystem_PathSeparator() -> "char":
    r""" 文件路径的的分隔符"""
    return _gskernel.GsFileSystem_PathSeparator()

def GsFileSystem_Exists(strPath: 'char const *') -> "bool":
    r"""
     判断文件路径、目录路径是否存在 :type strPath: string
    :param strPath: 文件或者目录的路径:rtype: boolean
    :return: 返回路径是或否存在
    """
    return _gskernel.GsFileSystem_Exists(strPath)

def GsFileSystem_PathFolder() -> "GsString":
    r""" 系统PATH目录"""
    return _gskernel.GsFileSystem_PathFolder()

def GsFileSystem_AddSearchPath(path: 'char const *') -> "void":
    r""" 增加搜索路径到系统PATH环境变量中"""
    return _gskernel.GsFileSystem_AddSearchPath(path)

def GsFileSystem_TemporaryFolder() -> "GsString":
    r""" 系统临时目录"""
    return _gskernel.GsFileSystem_TemporaryFolder()

def GsFileSystem_WorkingFolder() -> "GsString":
    r""" 工作目录"""
    return _gskernel.GsFileSystem_WorkingFolder()

def GsFileSystem_ModuleFileName() -> "GsString":
    r""" 当前执行文件所在的文件路径"""
    return _gskernel.GsFileSystem_ModuleFileName()

def GsFileSystem_Combine(path1: 'char const *', path2: 'char const *') -> "GsString":
    r"""
     合并两个路径字符串 :type path1: string
    :param path1: 第一个路径 :type path2: string
    :param path2: 第二个路径:rtype: :py:class:`GsString`
    :return: 包含合并的路径的字符串。如果指定的路径之一是零长度字符串，则该方法返回其他路径。如果 path2 包含绝对路径，则该方法返回 path2
    """
    return _gskernel.GsFileSystem_Combine(path1, path2)

def GsFileSystem_MakeExistFullPath(path: 'char const *') -> "GsString":
    r""" 搜索Path获取一个路径存在的绝对路径 输入路径为绝对路径，如果该路径存在则返回，否则返回空 输入路径为相对路径，遍历PATH环境变量设置，组装第一个存在的路径返回，无法成功组装则返回空"""
    return _gskernel.GsFileSystem_MakeExistFullPath(path)

def GsFileSystem_PathRelativePathTo(_from: 'char const *', to: 'char const *') -> "GsString":
    r"""
     从两个绝对路径计算相对路径 :type from: string
    :param from: 绝对路径，从这个绝对路径计算 :type to: string
    :param to:  绝对路径，计算该路径相对于from的相对路径:rtype: :py:class:`GsString`
    :return: 返回相对路径，如果输入路径无效则返回to
    """
    return _gskernel.GsFileSystem_PathRelativePathTo(_from, to)

def GsFileSystem_IsFile(strPath: 'char const *') -> "bool":
    r"""
     判断一个路径是否是文件 :type strPath: string
    :param strPath: 路径:rtype: boolean
    :return: 返回路径是否是文件路径
    """
    return _gskernel.GsFileSystem_IsFile(strPath)

def GsFileSystem_IsPathRooted(path: 'char const *') -> "bool":
    r"""
     获取一个值，该值指示指定的路径字符串是包含绝对路径信息还是包含相对路径信息。 :type path: string
    :param path: 要测试的路径:rtype: boolean
    :return: 如果 path 包含绝对路径，则为 true；否则为 false
    """
    return _gskernel.GsFileSystem_IsPathRooted(path)

class GsDirVector(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self):
        _gskernel.GsDirVector_swiginit(self, _gskernel.new_GsDirVector())
    __swig_destroy__ = _gskernel.delete_GsDirVector

    def add(self, obj: 'GsDir') -> "void":
        return _gskernel.GsDirVector_add(self, obj)

    def size(self) -> "size_t":
        return _gskernel.GsDirVector_size(self)

    def clear(self) -> "void":
        return _gskernel.GsDirVector_clear(self)

    def empty(self) -> "bool":
        return _gskernel.GsDirVector_empty(self)

    def get(self, n: 'int') -> "GsDir":
        return _gskernel.GsDirVector_get(self, n)

    def set(self, n: 'int', val: 'GsDir') -> "void":
        return _gskernel.GsDirVector_set(self, n, val)

# Register GsDirVector in _gskernel:
_gskernel.GsDirVector_swigregister(GsDirVector)

class GsFileVector(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self):
        _gskernel.GsFileVector_swiginit(self, _gskernel.new_GsFileVector())
    __swig_destroy__ = _gskernel.delete_GsFileVector

    def add(self, obj: 'GsFile') -> "void":
        return _gskernel.GsFileVector_add(self, obj)

    def size(self) -> "size_t":
        return _gskernel.GsFileVector_size(self)

    def clear(self) -> "void":
        return _gskernel.GsFileVector_clear(self)

    def empty(self) -> "bool":
        return _gskernel.GsFileVector_empty(self)

    def get(self, n: 'int') -> "GsFile":
        return _gskernel.GsFileVector_get(self, n)

    def set(self, n: 'int', val: 'GsFile') -> "void":
        return _gskernel.GsFileVector_set(self, n, val)

# Register GsFileVector in _gskernel:
_gskernel.GsFileVector_swigregister(GsFileVector)

class GsFile(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        r"""
        *Overload 1:*
         拷贝构造函数 rhs拷贝的对象

        |

        *Overload 2:*
         文件的完整路径构造对象 :type strName: string
        :param strName: 文件完整路径
        """
        _gskernel.GsFile_swiginit(self, _gskernel.new_GsFile(*args))
    __swig_destroy__ = _gskernel.delete_GsFile

    def Path(self) -> "char const *":
        r"""
         获取文件的内部字符串路径:rtype: string
        :return: 返回路径字符串指针
        """
        return _gskernel.GsFile_Path(self)

    def Name(self, bHasExtension: 'bool'=True) -> "GsString":
        r"""
         获取文件名称，不包含路径:rtype: :py:class:`GsString`
        :return: 返回文件的名称
        """
        return _gskernel.GsFile_Name(self, bHasExtension)

    def FullPath(self) -> "GsString":
        r"""
         获取文件完整路径（UTF-8）:rtype: :py:class:`GsString`
        :return: 返回文件的完整路径
        """
        return _gskernel.GsFile_FullPath(self)

    def Exists(self) -> "bool":
        r"""
         获取文件是否存在:rtype: boolean
        :return: 返回文件是否存在
        """
        return _gskernel.GsFile_Exists(self)

    def Size(self) -> "unsigned long long":
        r"""
         获取文件的大小:rtype: int
        :return: 返回文件大小，字节
        """
        return _gskernel.GsFile_Size(self)

    def Parent(self) -> "GsDir":
        r"""
         判断文件是否为同一个文件 :param rhs: 其他文件:rtype: :py:class:`GsDir`
        :return: 传入文件是否和本文件为同一个文件 赋值 rhs其他文件:rtype: :py:class:`GsDir`
        :return: 自身 bool操作符  赋值 :param file: 其他文件:rtype: :py:class:`GsDir`
        :return: 自身 文件所在的目录:rtype: :py:class:`GsDir`
        :return: 分返文件所在的目录
        """
        return _gskernel.GsFile_Parent(self)

    def Extension(self) -> "GsString":
        r"""
         文件的扩展名，(不带.):rtype: :py:class:`GsString`
        :return: 返回文件的扩展名
        """
        return _gskernel.GsFile_Extension(self)

    def ChangeExtension(self, strExt: 'char const *') -> "GsString":
        r"""
         改变文件路径的扩展名 注意并非修改文件的扩展名。 :type strExt: string
        :param strExt: 新的扩展名，(不带.) :rtype: :py:class:`GsString`
        :return: 返回文件的扩展名
        """
        return _gskernel.GsFile_ChangeExtension(self, strExt)

    def ReadAll(self) -> "GsString":
        r"""
         将文件当作文本文件全部读取为字符串:rtype: :py:class:`GsString`
        :return: 输出文件中读取的字符串
        """
        return _gskernel.GsFile_ReadAll(self)

    def WriteAllText(self, str: 'char const *') -> "bool":
        r""" 将字符串写入到文件中"""
        return _gskernel.GsFile_WriteAllText(self, str)

    def ReadAllBytes(self, buff: 'GsByteBuffer') -> "int":
        r""" 将文件当作二进制文件全部读取出来"""
        return _gskernel.GsFile_ReadAllBytes(self, buff)

    def ReadAllLines(self, *args) -> "int":
        r"""
        *Overload 1:*
        将文件当作文本文件读取所有的行

        |

        *Overload 2:*
        将文件当作文本文件读取所有的行
        """
        return _gskernel.GsFile_ReadAllLines(self, *args)

    def WriteAllBytes(self, bytes: 'signed char const *', nSize: 'int') -> "bool":
        r""" 将文件当二进制文件写入所有的数据"""
        return _gskernel.GsFile_WriteAllBytes(self, bytes, nSize)

    def WriteAllLines(self, vec: 'GsStringVector') -> "bool":
        r""" 将文件当作文本文件写入所有的行"""
        return _gskernel.GsFile_WriteAllLines(self, vec)

    def AppendLine(self, line: 'char const *') -> "bool":
        r""" 将文件当作文本文件在末尾添加一行"""
        return _gskernel.GsFile_AppendLine(self, line)

    def AppendLines(self, vec: 'GsStringVector') -> "bool":
        r""" 将文件当作文本文件在末尾添加多行"""
        return _gskernel.GsFile_AppendLines(self, vec)

    @staticmethod
    def Delete(*args) -> "bool":
        r"""
        *Overload 1:*
         删除当前文件:rtype: boolean
        :return: 返回是否成功

        |

        *Overload 2:*
         删除一个文件:rtype: boolean
        :return: 返回是否删除成功
        """
        return _gskernel.GsFile_Delete(*args)

    @staticmethod
    def ReName(*args) -> "bool":
        r"""
        *Overload 1:*
         重命名当前文件:rtype: boolean
        :return: 返回是否成功

        |

        *Overload 2:*
         重命名一个文件:rtype: boolean
        :return: 返回是否重命名成功
        """
        return _gskernel.GsFile_ReName(*args)

# Register GsFile in _gskernel:
_gskernel.GsFile_swigregister(GsFile)

def GsFile_Delete(*args) -> "bool":
    r"""
    *Overload 1:*
     删除当前文件:rtype: boolean
    :return: 返回是否成功

    |

    *Overload 2:*
     删除一个文件:rtype: boolean
    :return: 返回是否删除成功
    """
    return _gskernel.GsFile_Delete(*args)

def GsFile_ReName(*args) -> "bool":
    r"""
    *Overload 1:*
     重命名当前文件:rtype: boolean
    :return: 返回是否成功

    |

    *Overload 2:*
     重命名一个文件:rtype: boolean
    :return: 返回是否重命名成功
    """
    return _gskernel.GsFile_ReName(*args)

class GsDir(object):
    r""" 文件系统的目录"""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        r"""
        *Overload 1:*
         拷贝构造函数 :type pDir: :py:class:`GsDir`
        :param pDir: 拷贝的对象

        |

        *Overload 2:*
         目录的完整路径构造对象 :type strDirPath: string
        :param strDirPath: 目录完整路径
        """
        _gskernel.GsDir_swiginit(self, _gskernel.new_GsDir(*args))
    __swig_destroy__ = _gskernel.delete_GsDir

    def Path(self) -> "char const *":
        r"""
         获取目录的内部字符串路径:rtype: string
        :return: 返回目录字符串指针
        """
        return _gskernel.GsDir_Path(self)

    def Create(self) -> "bool":
        r""" 如果文件夹不存在则创建文件夹"""
        return _gskernel.GsDir_Create(self)

    def Name(self) -> "GsString":
        r"""
         目录的名称:rtype: :py:class:`GsString`
        :return: 返回目录的名称
        """
        return _gskernel.GsDir_Name(self)

    def FullPath(self) -> "GsString":
        r"""
         目录的完整路径（UTF-8）:rtype: :py:class:`GsString`
        :return: 返回目录的完整路径
        """
        return _gskernel.GsDir_FullPath(self)

    def Exists(self) -> "bool":
        r"""
         目录是否存在:rtype: boolean
        :return: 返回目录是否存在
        """
        return _gskernel.GsDir_Exists(self)

    def IsRoot(self) -> "bool":
        r"""
         是否为根目录:rtype: boolean
        :return: 返回目录是否是跟目录
        """
        return _gskernel.GsDir_IsRoot(self)

    def Parent(self) -> "GsDir":
        r"""
         返回父目录:rtype: :py:class:`GsDir`
        :return: 返回父目录
        """
        return _gskernel.GsDir_Parent(self)

    def Files(self, searchPattern: 'char const *'=None) -> "GsVector< GsFile >":
        r"""
         目录下所有的文件 :type searchPattern: string
        :param searchPattern: 搜索条件，比如*.txt:rtype: GsVector< GsFile >
        :return: 返回目录下的所有文件对象
        """
        return _gskernel.GsDir_Files(self, searchPattern)

    def SubDir(self, subName: 'char const *') -> "GsDir":
        r"""
         目录下所有的文件 :param files: 保存文件对象的集合 :rtype: :py:class:`GsDir`
        :return: 返回保存集合的指针 获取子目录 :rtype: :py:class:`GsDir`
        :return: 返回子目录对象
        """
        return _gskernel.GsDir_SubDir(self, subName)

    def File(self, fileName: 'char const *') -> "GsFile":
        r"""
         获取目录下的文件:rtype: :py:class:`GsFile`
        :return: 目录下的文件
        """
        return _gskernel.GsDir_File(self, fileName)

    def Dirs(self) -> "GsVector< GsDir >":
        r"""
         目录下所有的子目录 :rtype: GsVector< GsDir >
        :return: 返回目录下的所有子目录对象
        """
        return _gskernel.GsDir_Dirs(self)

    @staticmethod
    def Delete(*args) -> "bool":
        r"""
        *Overload 1:*
         目录下所有的子目录:rtype: boolean
        :return: 返回目录下的所有子目录对象 判断目录是否为同一个目录 rhs 其他目录 :rtype: boolean
        :return: 传入目录是否和本目录为同一个文件 赋值 :param rhs: 对象:rtype: boolean
        :return: 自身 赋值 strDirPath 对象:rtype: boolean
        :return: 自身 赋值 :param strDirPath: 对象 :rtype: boolean
        :return: 自身 bool操作符  删除当前目录 :type recursive: boolean
        :param recursive: 是否删除子目录 :rtype: boolean
        :return: 返回是否成功

        |

        *Overload 2:*
         删除一个目录 :rtype: boolean
        :return: 返回是否删除成功

        |

        *Overload 3:*
         删除一个目录 :rtype: boolean
        :return: 返回是否删除成功
        """
        return _gskernel.GsDir_Delete(*args)

# Register GsDir in _gskernel:
_gskernel.GsDir_swigregister(GsDir)

def GsDir_Delete(*args) -> "bool":
    r"""
    *Overload 1:*
     目录下所有的子目录:rtype: boolean
    :return: 返回目录下的所有子目录对象 判断目录是否为同一个目录 rhs 其他目录 :rtype: boolean
    :return: 传入目录是否和本目录为同一个文件 赋值 :param rhs: 对象:rtype: boolean
    :return: 自身 赋值 strDirPath 对象:rtype: boolean
    :return: 自身 赋值 :param strDirPath: 对象 :rtype: boolean
    :return: 自身 bool操作符  删除当前目录 :type recursive: boolean
    :param recursive: 是否删除子目录 :rtype: boolean
    :return: 返回是否成功

    |

    *Overload 2:*
     删除一个目录 :rtype: boolean
    :return: 返回是否删除成功

    |

    *Overload 3:*
     删除一个目录 :rtype: boolean
    :return: 返回是否删除成功
    """
    return _gskernel.GsDir_Delete(*args)

class GsQuadKey(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        _gskernel.GsQuadKey_swiginit(self, _gskernel.new_GsQuadKey(*args))

    def ParentRow(self, grand: 'GsQuadKey') -> "int":
        r""" 获取瓦片在父级瓦片中的行索引"""
        return _gskernel.GsQuadKey_ParentRow(self, grand)

    def Sibling(self, i: 'int') -> "GsQuadKey":
        r""" 获取同一父亲的第i个兄弟节点"""
        return _gskernel.GsQuadKey_Sibling(self, i)

    def ParentCol(self, grand: 'GsQuadKey') -> "int":
        r""" 获取瓦片在父级瓦片中的列索引"""
        return _gskernel.GsQuadKey_ParentCol(self, grand)

    def Index(self) -> "int":
        r""" 获取瓦片在父瓦片中的索引"""
        return _gskernel.GsQuadKey_Index(self)

    def RowIndex(self) -> "int":
        r""" 获取瓦片在父瓦片中的行索引"""
        return _gskernel.GsQuadKey_RowIndex(self)

    def ColIndex(self) -> "int":
        r""" 获取瓦片在父瓦片中的列索引"""
        return _gskernel.GsQuadKey_ColIndex(self)

    def Child(self, i: 'int') -> "GsQuadKey":
        r""" 根据子瓦片的索引获取子瓦片的Key [0][1] [2][3]"""
        return _gskernel.GsQuadKey_Child(self, i)

    def IsParent(self, rhs: 'GsQuadKey') -> "bool":
        r""" 判断一个瓦片是否是自身的父瓦片Key"""
        return _gskernel.GsQuadKey_IsParent(self, rhs)

    def Parent(self) -> "GsQuadKey":
        r""" 获取瓦片的父瓦片Key"""
        return _gskernel.GsQuadKey_Parent(self)

    def ChildQuadKey(self, first: 'char') -> "GsString":
        return _gskernel.GsQuadKey_ChildQuadKey(self, first)

    def QuadStringKey(self, first: 'char') -> "GsString":
        return _gskernel.GsQuadKey_QuadStringKey(self, first)

    def OddEven(self, odd: 'int'=7) -> "GsString":
        return _gskernel.GsQuadKey_OddEven(self, odd)
    Level = property(_gskernel.GsQuadKey_Level_get, _gskernel.GsQuadKey_Level_set, doc=r""" 瓦片级别""")
    Row = property(_gskernel.GsQuadKey_Row_get, _gskernel.GsQuadKey_Row_set, doc=r""" 瓦片行""")
    Col = property(_gskernel.GsQuadKey_Col_get, _gskernel.GsQuadKey_Col_set, doc=r""" 瓦片列""")
    __swig_destroy__ = _gskernel.delete_GsQuadKey

# Register GsQuadKey in _gskernel:
_gskernel.GsQuadKey_swigregister(GsQuadKey)

eKernelDatabase = _gskernel.eKernelDatabase
eKernelSymbol = _gskernel.eKernelSymbol
eKernelUser = _gskernel.eKernelUser
eAllKernelModule = _gskernel.eAllKernelModule
class GsKernel(object):
    r""" 内核初始化"""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    @staticmethod
    def Version() -> "GsString":
        r""" 创建类的实例"""
        return _gskernel.GsKernel_Version()

    @staticmethod
    def Initialize(*args) -> "void":
        r"""
        *Overload 1:*
        初始化

        |

        *Overload 2:*
        初始化
        """
        return _gskernel.GsKernel_Initialize(*args)

    @staticmethod
    def InitializeLogFile(file: 'char const *', level: 'GsLogLevel') -> "void":
        return _gskernel.GsKernel_InitializeLogFile(file, level)

    def __init__(self):
        _gskernel.GsKernel_swiginit(self, _gskernel.new_GsKernel())
    __swig_destroy__ = _gskernel.delete_GsKernel

# Register GsKernel in _gskernel:
_gskernel.GsKernel_swigregister(GsKernel)

def GsKernel_Version() -> "GsString":
    r""" 创建类的实例"""
    return _gskernel.GsKernel_Version()

def GsKernel_Initialize(*args) -> "void":
    r"""
    *Overload 1:*
    初始化

    |

    *Overload 2:*
    初始化
    """
    return _gskernel.GsKernel_Initialize(*args)

def GsKernel_InitializeLogFile(file: 'char const *', level: 'GsLogLevel') -> "void":
    return _gskernel.GsKernel_InitializeLogFile(file, level)

e360DegreePyramid = _gskernel.e360DegreePyramid
r""" 天地图360金字塔模型 针对经纬度坐标系，0层金字塔瓦片数为1，1层金字塔瓦片数为2     Level-0        Level-1   ┌───┐┌───┐┌───┐   │L,R,C ││L,R,C ││L,R,C │   │0,0,0 ││1,0,0 ││0,0,1 │   └───┘└───┘└───┘"""
eWebMercatorPyramid = _gskernel.eWebMercatorPyramid
r""" WebMercator通用金字塔模型 针对Mercator坐标系，0层金字塔瓦片数为1，1层金字塔瓦片数为4     Level-0        Level-1   ┌───┐┌───┐┌───┐   │L,R,C ││L,R,C ││L,R,C │   │0,0,0 ││1,0,0 ││0,0,1 │   └───┘└───┘└───┘				┌───┐┌───┐				│L,R,C ││L,R,C │				│1,1,0 ││1,1,1 │				└───┘└───┘"""
e180DegreePyramid = _gskernel.e180DegreePyramid
r""" 180度金字塔 针对经纬度坐标系，0层金字塔瓦片数为2，1层金字塔瓦片数为8          Level-0							Level-1   ┌───┐┌───┐     ┌───┐┌───┐┌───┐┌───┐   │L,R,C ││L,R,C │	   │L,R,C ││L,R,C ││L,R,C ││L,R,C │   │0,0,0 ││0,0,1 │	   │1,0,0 ││1,0,1 ││1,0,2 ││1,0,3 │   └───┘└───┘     └───┘└───┘└───┘└───┘						       ┌───┐┌───┐┌───┐┌───┐   						   │L,R,C ││L,R,C ││L,R,C ││L,R,C │   						   │1,1,0 ││1,1,1 ││1,1,2 ││1,1,3 │							   └───┘└───┘└───┘└───┘"""
eBaiduPyramid = _gskernel.eBaiduPyramid
r""" 百度地图金字塔模型 百度地图坐标系为墨卡托坐标系，金字塔从1层开始，1层金字塔为4个瓦片          Level-1   ┌────┐┌────┐   │L,R, C  ││L, R, C │   │1,0,-1  ││1, 0, 0 │   └────┘└────┘	  ┌────┐┌────┐	  │L, R, C	││L, R,C  │	  │1,-1,-1 ││1,-1,0  │	  └────┘└────┘"""
eNorthWest = _gskernel.eNorthWest
r""" 起算远点在西北角   ■□   □□"""
eNorthEast = _gskernel.eNorthEast
r""" 起算远点在东北角   □■   □□"""
eSouthWest = _gskernel.eSouthWest
r""" 起算远点在西南角   □□   ■□"""
eSouthEast = _gskernel.eSouthEast
r""" 起算远点在东南角 □□ □■"""
class GsPyramid(GsRefObject):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    TopLevelIndex = property(_gskernel.GsPyramid_TopLevelIndex_get, _gskernel.GsPyramid_TopLevelIndex_set, doc=r""" 顶级瓦片的级别索引""")
    BottomLevelIndex = property(_gskernel.GsPyramid_BottomLevelIndex_get, _gskernel.GsPyramid_BottomLevelIndex_set, doc=r""" 最下级瓦片的级别索引""")
    ScaleX = property(_gskernel.GsPyramid_ScaleX_get, _gskernel.GsPyramid_ScaleX_set, doc=r""" 两级之间X方向上的缩放比例""")
    ScaleY = property(_gskernel.GsPyramid_ScaleY_get, _gskernel.GsPyramid_ScaleY_set, doc=r""" 两级之间Y方向上的缩放比例""")
    TileSizeX = property(_gskernel.GsPyramid_TileSizeX_get, _gskernel.GsPyramid_TileSizeX_set, doc=r""" 瓦片X方向上的瓦片像素大小""")
    TileSizeY = property(_gskernel.GsPyramid_TileSizeY_get, _gskernel.GsPyramid_TileSizeY_set, doc=r""" 瓦片Y方向上的瓦片像素大小""")
    OriginRowIndex = property(_gskernel.GsPyramid_OriginRowIndex_get, _gskernel.GsPyramid_OriginRowIndex_set, doc=r""" 瓦片行列的起始行坐标""")
    OriginColIndex = property(_gskernel.GsPyramid_OriginColIndex_get, _gskernel.GsPyramid_OriginColIndex_set, doc=r""" 瓦片行列的起始列坐标""")
    Description = property(_gskernel.GsPyramid_Description_get, _gskernel.GsPyramid_Description_set, doc=r""" 金字塔详细描述信息""")
    PyramidID = property(_gskernel.GsPyramid_PyramidID_get, _gskernel.GsPyramid_PyramidID_set, doc=r""" 金字塔ID，可用于唯一区别金字塔""")
    Name = property(_gskernel.GsPyramid_Name_get, _gskernel.GsPyramid_Name_set, doc=r""" 金字塔名称，用于可读性""")
    FromX = property(_gskernel.GsPyramid_FromX_get, _gskernel.GsPyramid_FromX_set, doc=r""" 顶级定位瓦片范围开始X坐标""")
    FromY = property(_gskernel.GsPyramid_FromY_get, _gskernel.GsPyramid_FromY_set, doc=r""" 顶级定位瓦片范围开始Y坐标""")
    ToX = property(_gskernel.GsPyramid_ToX_get, _gskernel.GsPyramid_ToX_set, doc=r""" 顶级定位瓦片范围结束X坐标""")
    ToY = property(_gskernel.GsPyramid_ToY_get, _gskernel.GsPyramid_ToY_set, doc=r""" 顶级定位瓦片范围结束Y坐标""")
    XMin = property(_gskernel.GsPyramid_XMin_get, _gskernel.GsPyramid_XMin_set, doc=r""" 金字塔的有效范围最小X""")
    YMin = property(_gskernel.GsPyramid_YMin_get, _gskernel.GsPyramid_YMin_set, doc=r""" 金字塔的有效范围最小Y""")
    XMax = property(_gskernel.GsPyramid_XMax_get, _gskernel.GsPyramid_XMax_set, doc=r""" 金字塔的有效范围最大X""")
    YMax = property(_gskernel.GsPyramid_YMax_get, _gskernel.GsPyramid_YMax_set, doc=r""" 金字塔的有效范围最大Y""")
    PAI = property(_gskernel.GsPyramid_PAI_get, _gskernel.GsPyramid_PAI_set, doc=r""" 金字塔计算使用的常数PI""")
    Tolerance = property(_gskernel.GsPyramid_Tolerance_get, _gskernel.GsPyramid_Tolerance_set, doc=r""" 金字塔计算使用的常数容差""")

    def __init__(self, *args):
        _gskernel.GsPyramid_swiginit(self, _gskernel.new_GsPyramid(*args))
    __swig_destroy__ = _gskernel.delete_GsPyramid

    def CreateDefault(self) -> "void":
        r""" 设置参数为缺省参数"""
        return _gskernel.GsPyramid_CreateDefault(self)

    @staticmethod
    def WellknownPyramid(ePyramid: 'GsWellknownPyramid') -> "GsSmarterPtr< GsPyramid >":
        r"""
         获取已知的金字塔模型 :type ePyramid: int
        :param ePyramid:  :rtype: GsSmarterPtr< GsPyramid >
        :return: 
        """
        return _gskernel.GsPyramid_WellknownPyramid(ePyramid)

    def OriginLocation(self) -> "GsPyramidOriginLocation":
        r"""
         获取金字塔的起算原点位置 :rtype: int
        :return: 
        """
        return _gskernel.GsPyramid_OriginLocation(self)

    @staticmethod
    def CreatePyramid(*args) -> "GsSmarterPtr< GsPyramid >":
        r"""
        *Overload 1:*
         根据金字塔序列化的xml字符串创建金字塔 :type xml: string
        :param xml:  :rtype: GsSmarterPtr< GsPyramid >
        :return: 

        |

        *Overload 2:*
         根据分辨率计算金字塔。 :type OriginX: float
        :param OriginX: 起算原点x坐标 :type OriginY: float
        :param OriginY: 起算原点y坐标 :type res: float
        :param res: 金字塔分辨率的数组 :type nResCount: int
        :param nResCount: 金字塔辨率的数量 :type tileSizeWidth: int
        :param tileSizeWidth: 瓦片的像素宽度 :type tileSizeHeight: int
        :param tileSizeHeight: 瓦片的像素高度 :type originLocation: int
        :param originLocation: 起算原点的位置 :rtype: GsSmarterPtr< GsPyramid >
        :return: 

        |

        *Overload 3:*
         根据分辨率计算金字塔。 :type OriginX: float
        :param OriginX: 起算原点x坐标 :type OriginY: float
        :param OriginY: 起算原点y坐标 :type res: float
        :param res: 金字塔分辨率的数组 :type nResCount: int
        :param nResCount: 金字塔辨率的数量 :type tileSizeWidth: int
        :param tileSizeWidth: 瓦片的像素宽度 :type tileSizeHeight: int
        :param tileSizeHeight: 瓦片的像素高度 :param originLocation: 起算原点的位置 :rtype: GsSmarterPtr< GsPyramid >
        :return: 

        |

        *Overload 4:*
         根据分辨率计算金字塔。 :type OriginX: float
        :param OriginX: 起算原点x坐标 :type OriginY: float
        :param OriginY: 起算原点y坐标 :type res: float
        :param res: 金字塔分辨率的数组 :type nResCount: int
        :param nResCount: 金字塔辨率的数量 :type tileSizeWidth: int
        :param tileSizeWidth: 瓦片的像素宽度 :param tileSizeHeight: 瓦片的像素高度 :param originLocation: 起算原点的位置 :rtype: GsSmarterPtr< GsPyramid >
        :return: 

        |

        *Overload 5:*
         根据分辨率计算金字塔。 :type OriginX: float
        :param OriginX: 起算原点x坐标 :type OriginY: float
        :param OriginY: 起算原点y坐标 :type res: float
        :param res: 金字塔分辨率的数组 :type nResCount: int
        :param nResCount: 金字塔辨率的数量 :param tileSizeWidth: 瓦片的像素宽度 :param tileSizeHeight: 瓦片的像素高度 :param originLocation: 起算原点的位置 :rtype: GsSmarterPtr< GsPyramid >
        :return: 
        """
        return _gskernel.GsPyramid_CreatePyramid(*args)

    def TileIndex(self, level: 'int', x: 'double', y: 'double', range: 'int *') -> "bool":
        r"""
         根据层号和地理坐标计算落入的行列号 :type level: int
        :param level: 级别 :type x: float
        :param x: 地理x坐标 :type y: float
        :param y: 地理y坐标 :param nRow: 返回瓦片的行坐标 :param nCol: 返回瓦片的列坐标 :param pixelX: 相对瓦片左上角的像素x坐标 :param pixelY: 相对瓦片左上角的像素y坐标 :rtype: boolean
        :return: 返回计算是否成功
        """
        return _gskernel.GsPyramid_TileIndex(self, level, x, y, range)

    def TileExtent(self, nLevel: 'int', nRow: 'int', nCol: 'int', range: 'double *') -> "bool":
        r"""
         根据瓦片行列号计算瓦片经纬度范围 :param level: 级别 :type nRow: int
        :param nRow: 瓦片的行坐标 :type nCol: int
        :param nCol: 瓦片的列坐标 :param dblXMin: 地理范围最小x :param dblYMin: 地理范围最小y :param dblXMax: 地理范围最大x :param dblYMax: 地理范围最大y :rtype: boolean
        :return: 返回计算是否成功
        """
        return _gskernel.GsPyramid_TileExtent(self, nLevel, nRow, nCol, range)

    def TileIndexRange(self, xmin: 'double', ymin: 'double', xmax: 'double', ymax: 'double', level: 'int', range: 'int *') -> "bool":
        r"""
         计算一个地理坐标范围落入的瓦片行列号 :type xmin: float
        :param xmin: 地理范围最小x :type ymin: float
        :param ymin: 地理范围最小y :type xmax: float
        :param xmax: 地理范围最大x :type ymax: float
        :param ymax: 地理范围最大y :type level: int
        :param level: 级别 :param nMinRow: 返回瓦片的最小行坐标 :param nMinCol: 返回瓦片的最小列坐标 :param nMaxRow: 返回瓦片的最大行坐标 :param nMaxCol: 返回瓦片的最大列坐标 :rtype: boolean
        :return: 返回计算是否成功
        """
        return _gskernel.GsPyramid_TileIndexRange(self, xmin, ymin, xmax, ymax, level, range)

    def TileExtentRange(self, nLevel: 'int', nMinRow: 'int', nMinCol: 'int', nMaxRow: 'int', nMaxCol: 'int', range: 'double *') -> "bool":
        r"""
         计算一个范围的瓦片行列号覆盖的地理范围 :type nLevel: int
        :param nLevel: 级别 :type nMinRow: int
        :param nMinRow: 瓦片的最小行坐标 :type nMinCol: int
        :param nMinCol: 瓦片的最小列坐标 :type nMaxRow: int
        :param nMaxRow: 瓦片的最大行坐标 :type nMaxCol: int
        :param nMaxCol: 瓦片的最大列坐标 :param dblXMin: 返回地理范围最小x :param dblYMin: 返回地理范围最小y :param dblXMax: 返回地理范围最大x :param dblYMax: 返回地理范围最大y :rtype: boolean
        :return: 返回计算是否成功
        """
        return _gskernel.GsPyramid_TileExtentRange(self, nLevel, nMinRow, nMinCol, nMaxRow, nMaxCol, range)

    def TileSpanX(self, nLevel: 'int', x: 'double', y: 'double') -> "double":
        r"""
         用于确定设备坐标轴方向分别为X方向从左到右，Y轴方向从上到下的情况下，相对这个区域的一个瓦片的裁切区域。 :param GsRect: 设置的范围 :param nRow: 瓦片的行坐标 :param nCol: 瓦片的列坐标 :param position: 返回列的范围 :type nLevel: int
        :param nLevel: 瓦片级别 :rtype: float
        :return: 返回计算是否成功 计算某层的瓦片X方向上的地理跨度 :type nLevel: int
        :param nLevel: 瓦片的级别 :type x: float
        :param x: 测试的x坐标 :type y: float
        :param y: 测试的y坐标 :rtype: float
        :return: 返回地理跨度
        """
        return _gskernel.GsPyramid_TileSpanX(self, nLevel, x, y)

    def TileSpanY(self, nLevel: 'int', x: 'double', y: 'double') -> "double":
        r"""
         计算某层的瓦片Y方向上的地理跨度 :type nLevel: int
        :param nLevel: 瓦片的级别 :type x: float
        :param x: 测试的x坐标 :type y: float
        :param y: 测试的y坐标 :rtype: float
        :return: 返回地理跨度
        """
        return _gskernel.GsPyramid_TileSpanY(self, nLevel, x, y)

    def ResolutionX(self, nLevel: 'int') -> "double":
        r"""
         计算某层的瓦片X方向上的分辨率 :type nLevel: int
        :param nLevel:  :rtype: float
        :return: 
        """
        return _gskernel.GsPyramid_ResolutionX(self, nLevel)

    def ResolutionY(self, nLevel: 'int') -> "double":
        r"""
         计算某层的瓦片Y方向上的分辨率 :type nLevel: int
        :param nLevel:  :rtype: float
        :return: 
        """
        return _gskernel.GsPyramid_ResolutionY(self, nLevel)

    def FromString(self, str: 'char const *') -> "bool":
        r"""
         从字符串反序列化 :type str: string
        :param str: 字符串 :rtype: boolean
        :return: 返回是否成功
        """
        return _gskernel.GsPyramid_FromString(self, str)

    def ToString(self) -> "GsString":
        r"""
         序列化成字符串 :param str: 输出的序列化字符串 :rtype: :py:class:`GsString`
        :return: 返回是否成功
        """
        return _gskernel.GsPyramid_ToString(self)

    def BestLevel(self, dblRes: 'double') -> "int":
        r"""
         从输入的分辨率计算最合适的级别 :type dblRes: float
        :param dblRes: 分辨率 :rtype: int
        :return: 返回StartLevel到EndLevel之间最为合适的级别。
        """
        return _gskernel.GsPyramid_BestLevel(self, dblRes)

    def MathchLevel(self, OriginX: 'double', OriginY: 'double', res: 'double *', nResCount: 'int', tileSizeWidth: 'int'=256, tileSizeHeight: 'int'=256, originLocation: 'GsPyramidOriginLocation'=eNorthWest) -> "int":
        r"""
         根据输入分辨率等相关信息判断是否匹配当前金字塔 :type OriginX: float
        :param OriginX: 起算原点x坐标 :type OriginY: float
        :param OriginY: 起算原点y坐标 :type res: float
        :param res: 金字塔分辨率的数组 :type nResCount: int
        :param nResCount: 金字塔辨率的数量 :type tileSizeWidth: int
        :param tileSizeWidth: 瓦片的像素宽度 :type tileSizeHeight: int
        :param tileSizeHeight: 瓦片的像素高度 :type originLocation: int
        :param originLocation: 起算原点的位置 :rtype: int
        :return: 返回输入的分辨率从金字塔第几级开始匹配，如果返回INT_MIN则标识无法匹配
        """
        return _gskernel.GsPyramid_MathchLevel(self, OriginX, OriginY, res, nResCount, tileSizeWidth, tileSizeHeight, originLocation)

# Register GsPyramid in _gskernel:
_gskernel.GsPyramid_swigregister(GsPyramid)

def GsPyramid_WellknownPyramid(ePyramid: 'GsWellknownPyramid') -> "GsSmarterPtr< GsPyramid >":
    r"""
     获取已知的金字塔模型 :type ePyramid: int
    :param ePyramid:  :rtype: GsSmarterPtr< GsPyramid >
    :return: 
    """
    return _gskernel.GsPyramid_WellknownPyramid(ePyramid)

def GsPyramid_CreatePyramid(*args) -> "GsSmarterPtr< GsPyramid >":
    r"""
    *Overload 1:*
     根据金字塔序列化的xml字符串创建金字塔 :type xml: string
    :param xml:  :rtype: GsSmarterPtr< GsPyramid >
    :return: 

    |

    *Overload 2:*
     根据分辨率计算金字塔。 :type OriginX: float
    :param OriginX: 起算原点x坐标 :type OriginY: float
    :param OriginY: 起算原点y坐标 :type res: float
    :param res: 金字塔分辨率的数组 :type nResCount: int
    :param nResCount: 金字塔辨率的数量 :type tileSizeWidth: int
    :param tileSizeWidth: 瓦片的像素宽度 :type tileSizeHeight: int
    :param tileSizeHeight: 瓦片的像素高度 :type originLocation: int
    :param originLocation: 起算原点的位置 :rtype: GsSmarterPtr< GsPyramid >
    :return: 

    |

    *Overload 3:*
     根据分辨率计算金字塔。 :type OriginX: float
    :param OriginX: 起算原点x坐标 :type OriginY: float
    :param OriginY: 起算原点y坐标 :type res: float
    :param res: 金字塔分辨率的数组 :type nResCount: int
    :param nResCount: 金字塔辨率的数量 :type tileSizeWidth: int
    :param tileSizeWidth: 瓦片的像素宽度 :type tileSizeHeight: int
    :param tileSizeHeight: 瓦片的像素高度 :param originLocation: 起算原点的位置 :rtype: GsSmarterPtr< GsPyramid >
    :return: 

    |

    *Overload 4:*
     根据分辨率计算金字塔。 :type OriginX: float
    :param OriginX: 起算原点x坐标 :type OriginY: float
    :param OriginY: 起算原点y坐标 :type res: float
    :param res: 金字塔分辨率的数组 :type nResCount: int
    :param nResCount: 金字塔辨率的数量 :type tileSizeWidth: int
    :param tileSizeWidth: 瓦片的像素宽度 :param tileSizeHeight: 瓦片的像素高度 :param originLocation: 起算原点的位置 :rtype: GsSmarterPtr< GsPyramid >
    :return: 

    |

    *Overload 5:*
     根据分辨率计算金字塔。 :type OriginX: float
    :param OriginX: 起算原点x坐标 :type OriginY: float
    :param OriginY: 起算原点y坐标 :type res: float
    :param res: 金字塔分辨率的数组 :type nResCount: int
    :param nResCount: 金字塔辨率的数量 :param tileSizeWidth: 瓦片的像素宽度 :param tileSizeHeight: 瓦片的像素高度 :param originLocation: 起算原点的位置 :rtype: GsSmarterPtr< GsPyramid >
    :return: 
    """
    return _gskernel.GsPyramid_CreatePyramid(*args)

class GsMultiPyramid(GsPyramid):
    r""" 复合金字塔对象 允许其中的部分或者全部级别都拥有不同的数学基础。"""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        _gskernel.GsMultiPyramid_swiginit(self, _gskernel.new_GsMultiPyramid(*args))

    @staticmethod
    def CanDowncast(b: 'GsPyramid') -> "bool":
        return _gskernel.GsMultiPyramid_CanDowncast(b)

    @staticmethod
    def DowncastTo(b: 'GsPyramid') -> "GsSmarterPtr< GsMultiPyramid >":
        return _gskernel.GsMultiPyramid_DowncastTo(b)
    __swig_destroy__ = _gskernel.delete_GsMultiPyramid

# Register GsMultiPyramid in _gskernel:
_gskernel.GsMultiPyramid_swigregister(GsMultiPyramid)

def GsMultiPyramid_CanDowncast(b: 'GsPyramid') -> "bool":
    return _gskernel.GsMultiPyramid_CanDowncast(b)

def GsMultiPyramid_DowncastTo(b: 'GsPyramid') -> "GsSmarterPtr< GsMultiPyramid >":
    return _gskernel.GsMultiPyramid_DowncastTo(b)

class GsFloatVector(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self):
        _gskernel.GsFloatVector_swiginit(self, _gskernel.new_GsFloatVector())
    __swig_destroy__ = _gskernel.delete_GsFloatVector

    def add(self, obj: 'float const &') -> "void":
        return _gskernel.GsFloatVector_add(self, obj)

    def size(self) -> "size_t":
        return _gskernel.GsFloatVector_size(self)

    def clear(self) -> "void":
        return _gskernel.GsFloatVector_clear(self)

    def empty(self) -> "bool":
        return _gskernel.GsFloatVector_empty(self)

    def get(self, n: 'int') -> "float":
        return _gskernel.GsFloatVector_get(self, n)

    def set(self, n: 'int', val: 'float const &') -> "void":
        return _gskernel.GsFloatVector_set(self, n, val)

# Register GsFloatVector in _gskernel:
_gskernel.GsFloatVector_swigregister(GsFloatVector)

class GsMatrix(object):
    r""" 基于模板的二维矩阵"""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        r"""
        *Overload 1:*
        由矩阵构造矩阵

        |

        *Overload 2:*
        构造矩阵6元素

        |

        *Overload 3:*
        此方法初始化新矩阵，这样它表示从 source 参数指定的矩形映射到 target 参数中的三个浮点型点定义的平行四边形的几何变换。

        |

        *Overload 4:*
        平移矩阵

        |

        *Overload 5:*
        旋转矩阵,角度单位（弧度）

        |

        *Overload 6:*
        缩放矩阵
        """
        _gskernel.GsMatrix_swiginit(self, _gskernel.new_GsMatrix(*args))
    __swig_destroy__ = _gskernel.delete_GsMatrix

    def Elements(self, *args) -> "GsMatrixT< float > &":
        r"""
        *Overload 1:*
        得到矩阵6元素

        |

        *Overload 2:*
        为矩阵6元素赋值
        """
        return _gskernel.GsMatrix_Elements(self, *args)

    def OffsetX(self) -> "float":
        r""" 矩阵X轴上偏移量"""
        return _gskernel.GsMatrix_OffsetX(self)

    def OffsetY(self) -> "float":
        r""" 矩阵Y轴上偏移量"""
        return _gskernel.GsMatrix_OffsetY(self)

    def ScaleX(self) -> "float":
        r""" 矩阵X轴上缩放量"""
        return _gskernel.GsMatrix_ScaleX(self)

    def ScaleY(self) -> "float":
        r""" 矩阵Y轴上缩放量"""
        return _gskernel.GsMatrix_ScaleY(self)

    def RotationAngle(self) -> "float":
        r""" 矩阵旋转角度"""
        return _gskernel.GsMatrix_RotationAngle(self)

    def Reset(self) -> "GsMatrixT< float > &":
        r""" 矩阵初始化，导入一个单位矩阵"""
        return _gskernel.GsMatrix_Reset(self)

    def Multiply(self, matrix: 'GsMatrix') -> "GsMatrixT< float > &":
        r""" 矩阵相乘"""
        return _gskernel.GsMatrix_Multiply(self, matrix)

    def Translate(self, offsetX: 'float', offsetY: 'float') -> "GsMatrixT< float > &":
        r""" 仿射变换矩阵平移 :param offsetX　x轴上平移量: :param offsetY　y轴上平移量:"""
        return _gskernel.GsMatrix_Translate(self, offsetX, offsetY)

    @staticmethod
    def DoTranslate(offsetX: 'float', offsetY: 'float') -> "GsMatrixT< float >":
        r""" 生成一个偏移的矩阵 :param offsetX　x轴上平移量: :param offsetY　y轴上平移量:"""
        return _gskernel.GsMatrix_DoTranslate(offsetX, offsetY)

    @staticmethod
    def DoScale(scaleX: 'float', scaleY: 'float') -> "GsMatrixT< float >":
        r""" 生成缩放矩阵 :param scaleX　x轴上缩放量: :param scaleY　y轴上缩放量:"""
        return _gskernel.GsMatrix_DoScale(scaleX, scaleY)

    @staticmethod
    def DoRotate(*args) -> "GsMatrixT< float >":
        r"""
        *Overload 1:*
         生成一个旋转矩阵 :param angle　矩阵旋转角度单位（弧度）:

        |

        *Overload 2:*
         仿射变换矩阵旋转 :param angle　矩阵旋转角度: :type x: float
        :param x: 选中中心x坐标 :type y: float
        :param y: 选中中心y坐标
        """
        return _gskernel.GsMatrix_DoRotate(*args)

    @staticmethod
    def DoShear(shearX: 'float', shearY: 'float') -> "GsMatrixT< float >":
        r""" 仿射变换剪切变换（错切变换） :param shearX　矩阵横向剪切距离: :param shearY　矩阵纵向剪切距离:"""
        return _gskernel.GsMatrix_DoShear(shearX, shearY)

    def Scale(self, scaleX: 'float', scaleY: 'float') -> "GsMatrixT< float > &":
        r""" 仿射变换矩阵缩放 :param scaleX　x轴上缩放量: :param scaleY　y轴上缩放量:"""
        return _gskernel.GsMatrix_Scale(self, scaleX, scaleY)

    def Rotate(self, *args) -> "GsMatrixT< float > &":
        r"""
        *Overload 1:*
         仿射变换矩阵旋转 :param angle　矩阵旋转角度单位（弧度）:

        |

        *Overload 2:*
         仿射变换矩阵旋转 :param angle　矩阵旋转角度: :type x: float
        :param x: 选中中心x坐标 :type y: float
        :param y: 选中中心y坐标
        """
        return _gskernel.GsMatrix_Rotate(self, *args)

    def Shear(self, shearX: 'float', shearY: 'float') -> "GsMatrixT< float > &":
        r""" 仿射变换剪切变换（错切变换） :param shearX　矩阵横向剪切距离: :param shearY　矩阵纵向剪切距离:"""
        return _gskernel.GsMatrix_Shear(self, shearX, shearY)

    def Invert(self) -> "GsMatrixT< float > &":
        r""" 矩阵求逆"""
        return _gskernel.GsMatrix_Invert(self)

    def TransformPointsT(self, pts: 'float *', count: 'int') -> "bool":
        r""" 点变换"""
        return _gskernel.GsMatrix_TransformPointsT(self, pts, count)

    def TransformVectorsT(self, pts: 'float *', count: 'int') -> "bool":
        r""" 变换"""
        return _gskernel.GsMatrix_TransformVectorsT(self, pts, count)

    def IsInvertible(self) -> "bool":
        r""" 判断矩阵是否可以求逆"""
        return _gskernel.GsMatrix_IsInvertible(self)

    def IsIdentity(self) -> "bool":
        r""" 判断矩阵是否是单位矩阵"""
        return _gskernel.GsMatrix_IsIdentity(self)

    def Equals(self, rhs: 'GsMatrix') -> "bool":
        r""" 判断矩阵是否相等"""
        return _gskernel.GsMatrix_Equals(self, rhs)

# Register GsMatrix in _gskernel:
_gskernel.GsMatrix_swigregister(GsMatrix)

def GsMatrix_DoTranslate(offsetX: 'float', offsetY: 'float') -> "GsMatrixT< float >":
    r""" 生成一个偏移的矩阵 :param offsetX　x轴上平移量: :param offsetY　y轴上平移量:"""
    return _gskernel.GsMatrix_DoTranslate(offsetX, offsetY)

def GsMatrix_DoScale(scaleX: 'float', scaleY: 'float') -> "GsMatrixT< float >":
    r""" 生成缩放矩阵 :param scaleX　x轴上缩放量: :param scaleY　y轴上缩放量:"""
    return _gskernel.GsMatrix_DoScale(scaleX, scaleY)

def GsMatrix_DoRotate(*args) -> "GsMatrixT< float >":
    r"""
    *Overload 1:*
     生成一个旋转矩阵 :param angle　矩阵旋转角度单位（弧度）:

    |

    *Overload 2:*
     仿射变换矩阵旋转 :param angle　矩阵旋转角度: :type x: float
    :param x: 选中中心x坐标 :type y: float
    :param y: 选中中心y坐标
    """
    return _gskernel.GsMatrix_DoRotate(*args)

def GsMatrix_DoShear(shearX: 'float', shearY: 'float') -> "GsMatrixT< float >":
    r""" 仿射变换剪切变换（错切变换） :param shearX　矩阵横向剪切距离: :param shearY　矩阵纵向剪切距离:"""
    return _gskernel.GsMatrix_DoShear(shearX, shearY)

eSolidLine = _gskernel.eSolidLine
r""" 实线 Image: eSolidLine.png("SolidLine")"""
eDashLine = _gskernel.eDashLine
r""" 虚线 Image: eDashLine.png("SolidLine")"""
eDotLine = _gskernel.eDotLine
r""" 点线 Image: eDotLine.png("SolidLine")"""
eDashDotLine = _gskernel.eDashDotLine
r""" 点划线 Image: eDashDotLine.png("SolidLine")"""
eDashDotDotLine = _gskernel.eDashDotDotLine
r""" 点点划线 Image: eDashDotDotLine.png("SolidLine")"""
eCustomDashLine = _gskernel.eCustomDashLine
r""" 自定义线 Image: eCustomDashLine.png("SolidLine")"""
eFlatCap = _gskernel.eFlatCap
r""" 平头 Image: eFlatCap.png("FlatCap")"""
eSquareCap = _gskernel.eSquareCap
r""" 方头 Image: eSquareCap.png("SquareCap")"""
eRoundCap = _gskernel.eRoundCap
r""" 圆头 Image: eRoundCap.png("RoundCap")"""
eMiterJoin = _gskernel.eMiterJoin
r""" 尖 Image: eMiterJoin.png("MiterJoin")"""
eBevelJoin = _gskernel.eBevelJoin
r""" 楔形 Image: eBevelJoin.png("BevelJoin")"""
eRoundJoin = _gskernel.eRoundJoin
r""" 圆头 Image: eRoundJoin.png("RoundJoin")"""
eHorizontalBrush = _gskernel.eHorizontalBrush
eVerticalBrush = _gskernel.eVerticalBrush
eFdiagonalBrush = _gskernel.eFdiagonalBrush
eBdiagonalBrush = _gskernel.eBdiagonalBrush
eCrossBrush = _gskernel.eCrossBrush
eDiagCrossBrush = _gskernel.eDiagCrossBrush
eEmptyBrush = _gskernel.eEmptyBrush
eSolidBrush = _gskernel.eSolidBrush
eFontStyleRegular = _gskernel.eFontStyleRegular
eFontStyleBlack = _gskernel.eFontStyleBlack
eFontStyleBold = _gskernel.eFontStyleBold
eFontStyleItalic = _gskernel.eFontStyleItalic
eFontStyleBoldItalic = _gskernel.eFontStyleBoldItalic
eFontStyleBlackItalic = _gskernel.eFontStyleBlackItalic
eFontStyleUnderline = _gskernel.eFontStyleUnderline
eFontStyleStrikeout = _gskernel.eFontStyleStrikeout
eNormalItalic = _gskernel.eNormalItalic
r""" 不倾斜"""
eRightItalic = _gskernel.eRightItalic
r""" 右倾斜"""
eLeftItalic = _gskernel.eLeftItalic
r""" 左倾斜"""
eStringAlignmentNear = _gskernel.eStringAlignmentNear
eStringAlignmentCenter = _gskernel.eStringAlignmentCenter
eStringAlignmentFar = _gskernel.eStringAlignmentFar
class GsStringFormat(GsRefObject):
    r""" 字符串格式化对象"""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self):
        _gskernel.GsStringFormat_swiginit(self, _gskernel.new_GsStringFormat())
    __swig_destroy__ = _gskernel.delete_GsStringFormat

    def Font(self, *args) -> "GsString":
        r"""
        *Overload 1:*
        设置字体名称

        |

        *Overload 2:*
        获取字体名称
        """
        return _gskernel.GsStringFormat_Font(self, *args)

    def FontSize(self, *args) -> "float":
        r"""
        *Overload 1:*
        设置字体大小,单位磅

        |

        *Overload 2:*
        设置字体大小,单位磅
        """
        return _gskernel.GsStringFormat_FontSize(self, *args)

    def FontStyle(self, *args) -> "void":
        r"""
        *Overload 1:*
        字体式样

        |

        *Overload 2:*
        字体式样
        """
        return _gskernel.GsStringFormat_FontStyle(self, *args)

    def Alignment(self, *args) -> "void":
        r"""
        *Overload 1:*
        列对齐

        |

        *Overload 2:*
        列对齐
        """
        return _gskernel.GsStringFormat_Alignment(self, *args)

    def LineAlignment(self, *args) -> "void":
        r"""
        *Overload 1:*
        行对齐

        |

        *Overload 2:*
        行对齐
        """
        return _gskernel.GsStringFormat_LineAlignment(self, *args)

# Register GsStringFormat in _gskernel:
_gskernel.GsStringFormat_swigregister(GsStringFormat)

class GsGraphicsPath(GsRefObject):
    r""" 路径对象 复杂线、面绘制数据对象，从GsCanvas::CreatePath()创建"""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _gskernel.delete_GsGraphicsPath

    def StartFigure(self) -> "bool":
        r""" 开始一个子绘制段"""
        return _gskernel.GsGraphicsPath_StartFigure(self)

    def CloseFigure(self) -> "bool":
        r""" 封闭一个子绘制段"""
        return _gskernel.GsGraphicsPath_CloseFigure(self)

    def Reset(self) -> "bool":
        r""" 恢复路径对象为初始状态"""
        return _gskernel.GsGraphicsPath_Reset(self)

    def AddLine(self, *args) -> "bool":
        r"""
        *Overload 1:*
        增加一根线段

        |

        *Overload 2:*
        增加一根线段
        """
        return _gskernel.GsGraphicsPath_AddLine(self, *args)

    def AddLines(self, *args) -> "bool":
        r"""
        *Overload 1:*
        增加一段连续的线段

        |

        *Overload 2:*
        增加一段连续的线段
        """
        return _gskernel.GsGraphicsPath_AddLines(self, *args)

    def AddArc(self, *args) -> "bool":
        return _gskernel.GsGraphicsPath_AddArc(self, *args)

    def AddBezier(self, *args) -> "bool":
        r"""
        *Overload 1:*
        增加三次贝塞尔曲线

        |

        *Overload 2:*
        增加三次贝塞尔曲线
        """
        return _gskernel.GsGraphicsPath_AddBezier(self, *args)

    def AddQuadraticBezier(self, *args) -> "bool":
        r"""
        *Overload 1:*
        增加二次贝塞尔曲线

        |

        *Overload 2:*
        增加二次贝塞尔曲线
        """
        return _gskernel.GsGraphicsPath_AddQuadraticBezier(self, *args)

    def AddString(self, str: 'char const *', nLen: 'int', pStrFormat: 'GsStringFormat', layoutRect: 'GsRectF') -> "bool":
        r""" 向path中添加一个字符串。"""
        return _gskernel.GsGraphicsPath_AddString(self, str, nLen, pStrFormat, layoutRect)

    def Transform(self, *args) -> "void":
        r"""
        *Overload 1:*
        获取仿射变换矩阵

        |

        *Overload 2:*
        设置仿射变换矩阵
        """
        return _gskernel.GsGraphicsPath_Transform(self, *args)

    def ResetTransform(self) -> "void":
        r""" 重置仿射变换矩阵为单位矩阵"""
        return _gskernel.GsGraphicsPath_ResetTransform(self)

    def Envelope(self) -> "GsRectF":
        r""" 范围"""
        return _gskernel.GsGraphicsPath_Envelope(self)

# Register GsGraphicsPath in _gskernel:
_gskernel.GsGraphicsPath_swigregister(GsGraphicsPath)

class GsRegion(GsRefObject):
    r""" 区域对象 标示一个范围，可用于裁切"""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __swig_destroy__ = _gskernel.delete_GsRegion

    def Bounds(self) -> "GsRect":
        r""" 区域的外接矩形范围"""
        return _gskernel.GsRegion_Bounds(self)

# Register GsRegion in _gskernel:
_gskernel.GsRegion_swigregister(GsRegion)

class GsBrush(GsRefObject):
    r""" 画刷对象基类"""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self):
        _gskernel.GsBrush_swiginit(self, _gskernel.new_GsBrush())
    __swig_destroy__ = _gskernel.delete_GsBrush

# Register GsBrush in _gskernel:
_gskernel.GsBrush_swigregister(GsBrush)

class GsSolidBrush(GsBrush):
    r""" 颜色填充画刷对象"""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, c: 'GsColor'):
        r""" 从颜色构造画刷"""
        _gskernel.GsSolidBrush_swiginit(self, _gskernel.new_GsSolidBrush(c))
    __swig_destroy__ = _gskernel.delete_GsSolidBrush

    def Color(self, *args) -> "void":
        r"""
        *Overload 1:*
        画刷的颜色

        |

        *Overload 2:*
        设置画刷的颜色
        """
        return _gskernel.GsSolidBrush_Color(self, *args)

    def Style(self, *args) -> "void":
        r"""
        *Overload 1:*
        画笔的式样

        |

        *Overload 2:*
        画笔的式样
        """
        return _gskernel.GsSolidBrush_Style(self, *args)

# Register GsSolidBrush in _gskernel:
_gskernel.GsSolidBrush_swigregister(GsSolidBrush)

class GsBrushStylePixels(object):
    r""" 根据刷子样式获得最小范围(8*8)的像素块，用来填充"""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, eStyle: 'GsBrushStyle', c: 'GsColor'):
        _gskernel.GsBrushStylePixels_swiginit(self, _gskernel.new_GsBrushStylePixels(eStyle, c))
    __swig_destroy__ = _gskernel.delete_GsBrushStylePixels

# Register GsBrushStylePixels in _gskernel:
_gskernel.GsBrushStylePixels_swigregister(GsBrushStylePixels)

class GsTextureBrush(GsBrush):
    r""" 使用图片填充的画刷"""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, pImage: 'GsImage'):
        r""" 从图片构造画刷"""
        _gskernel.GsTextureBrush_swiginit(self, _gskernel.new_GsTextureBrush(pImage))

    def Image(self, *args) -> "void":
        r"""
        *Overload 1:*
        获取画刷的图像

        |

        *Overload 2:*
        设置画刷的图像
        """
        return _gskernel.GsTextureBrush_Image(self, *args)

    def Transform(self, *args) -> "void":
        r"""
        *Overload 1:*
        获取变换矩阵

        |

        *Overload 2:*
        设置变换矩阵
        """
        return _gskernel.GsTextureBrush_Transform(self, *args)
    __swig_destroy__ = _gskernel.delete_GsTextureBrush

# Register GsTextureBrush in _gskernel:
_gskernel.GsTextureBrush_swigregister(GsTextureBrush)

class GsLinearGradientBrush(GsBrush):
    r""" 使用线型渐变填充的画刷"""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        r"""
        *Overload 1:*
        默认构造画刷

        |

        *Overload 2:*
        从颜色和区域构造画刷
        """
        _gskernel.GsLinearGradientBrush_swiginit(self, _gskernel.new_GsLinearGradientBrush(*args))
    __swig_destroy__ = _gskernel.delete_GsLinearGradientBrush

    def StartColor(self, *args) -> "void":
        r"""
        *Overload 1:*
        画刷的颜色

        |

        *Overload 2:*
        设置画刷的颜色
        """
        return _gskernel.GsLinearGradientBrush_StartColor(self, *args)

    def EndColor(self, *args) -> "void":
        r"""
        *Overload 1:*
        画刷的颜色

        |

        *Overload 2:*
        设置画刷的颜色
        """
        return _gskernel.GsLinearGradientBrush_EndColor(self, *args)

    def StartPoint(self, *args) -> "void":
        r"""
        *Overload 1:*
        渐变的开始位置

        |

        *Overload 2:*
        设置渐变的开始位置
        """
        return _gskernel.GsLinearGradientBrush_StartPoint(self, *args)

    def EndPoint(self, *args) -> "void":
        r"""
        *Overload 1:*
        渐变的结束位置

        |

        *Overload 2:*
        设置渐变的结束位置
        """
        return _gskernel.GsLinearGradientBrush_EndPoint(self, *args)

# Register GsLinearGradientBrush in _gskernel:
_gskernel.GsLinearGradientBrush_swigregister(GsLinearGradientBrush)

class GsRadialGradientBrush(GsBrush):
    r""" 使用辐射渐变填充的画刷"""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        r"""
        *Overload 1:*
        默认构造画刷

        |

        *Overload 2:*
        从颜色和范围构造画刷
        """
        _gskernel.GsRadialGradientBrush_swiginit(self, _gskernel.new_GsRadialGradientBrush(*args))
    __swig_destroy__ = _gskernel.delete_GsRadialGradientBrush

    def StartColor(self, *args) -> "void":
        r"""
        *Overload 1:*
        画刷的颜色

        |

        *Overload 2:*
        设置画刷的颜色
        """
        return _gskernel.GsRadialGradientBrush_StartColor(self, *args)

    def EndColor(self, *args) -> "void":
        r"""
        *Overload 1:*
        画刷的颜色

        |

        *Overload 2:*
        设置画刷的颜色
        """
        return _gskernel.GsRadialGradientBrush_EndColor(self, *args)

    def CenterPoint(self, *args) -> "void":
        r"""
        *Overload 1:*
        辐射中心

        |

        *Overload 2:*
        设置辐射中心
        """
        return _gskernel.GsRadialGradientBrush_CenterPoint(self, *args)

    def Radius(self, *args) -> "void":
        r"""
        *Overload 1:*
        辐射半径

        |

        *Overload 2:*
        设置辐射半径
        """
        return _gskernel.GsRadialGradientBrush_Radius(self, *args)

# Register GsRadialGradientBrush in _gskernel:
_gskernel.GsRadialGradientBrush_swigregister(GsRadialGradientBrush)

class GsPen(GsRefObject):
    r""" 画笔对象"""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        r"""
        *Overload 1:*
        从颜色和宽度构造画笔

        |

        *Overload 2:*
        从画刷构建画笔

        |

        *Overload 3:*
        从画刷构建画笔
        """
        _gskernel.GsPen_swiginit(self, _gskernel.new_GsPen(*args))

    def Brush(self, *args) -> "void":
        r"""
        *Overload 1:*
        获取画刷

        |

        *Overload 2:*
        设置画刷
        """
        return _gskernel.GsPen_Brush(self, *args)
    __swig_destroy__ = _gskernel.delete_GsPen

    def Color(self, *args) -> "void":
        r"""
        *Overload 1:*
        颜色

        |

        *Overload 2:*
        设置颜色
        """
        return _gskernel.GsPen_Color(self, *args)

    def Width(self, *args) -> "void":
        r"""
        *Overload 1:*
        宽度

        |

        *Overload 2:*
        设置宽度
        """
        return _gskernel.GsPen_Width(self, *args)

    def Style(self, *args) -> "void":
        r"""
        *Overload 1:*
        画笔式样

        |

        *Overload 2:*
        设置画笔式样
        """
        return _gskernel.GsPen_Style(self, *args)

    def DashOffset(self, *args) -> "float":
        r"""
        *Overload 1:*
        点线、点划线偏移量

        |

        *Overload 2:*
        获取点线、点划线偏移量
        """
        return _gskernel.GsPen_DashOffset(self, *args)

    def DashPattern(self, *args) -> "GsVector< float >":
        r"""
        *Overload 1:*
        设置自定义点划线的模板

        |

        *Overload 2:*
        自定义点划线的模板
        """
        return _gskernel.GsPen_DashPattern(self, *args)

    def MiterLimit(self, *args) -> "void":
        r"""
        *Overload 1:*
        线衔接尖头限制

        |

        *Overload 2:*
        设置线衔接尖头限制
        """
        return _gskernel.GsPen_MiterLimit(self, *args)

    def StartCap(self, *args) -> "void":
        r"""
        *Overload 1:*
        线起点的头类型

        |

        *Overload 2:*
        设置线起点的头类型
        """
        return _gskernel.GsPen_StartCap(self, *args)

    def EndCap(self, *args) -> "void":
        r"""
        *Overload 1:*
        线终点的头类型

        |

        *Overload 2:*
        设置线终点的头类型
        """
        return _gskernel.GsPen_EndCap(self, *args)

    def LineJoin(self, *args) -> "void":
        r"""
        *Overload 1:*
        线衔接类型

        |

        *Overload 2:*
        设置线衔接类型
        """
        return _gskernel.GsPen_LineJoin(self, *args)

# Register GsPen in _gskernel:
_gskernel.GsPen_swigregister(GsPen)

class GsCanvas(GsRefObject):
    r""" 通过继承此基类实现不同平台和不同绘制技术的画布。"""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __swig_destroy__ = _gskernel.delete_GsCanvas

    def RenderingOrigin(self, *args) -> "void":
        r"""
        *Overload 1:*
        获取绘制起算的原点

        |

        *Overload 2:*
        设置绘制起算的原点
        """
        return _gskernel.GsCanvas_RenderingOrigin(self, *args)

    def Transform(self, *args) -> "void":
        r"""
        *Overload 1:*
        获取仿射变换矩阵

        |

        *Overload 2:*
        设置仿射变换矩阵
        """
        return _gskernel.GsCanvas_Transform(self, *args)

    def ResetTransform(self) -> "void":
        r""" 重置仿射变换矩阵为单位矩阵"""
        return _gskernel.GsCanvas_ResetTransform(self)

    def ClipBounds(self) -> "GsRect":
        r""" 画布裁切的最大矩形范围或者画布的范围 画布如果设置了裁切范围则返回裁切的最大矩形，否则返回画布的范围"""
        return _gskernel.GsCanvas_ClipBounds(self)

    def ClearClip(self) -> "void":
        r""" 清除裁切范围"""
        return _gskernel.GsCanvas_ClearClip(self)

    def Clip(self, *args) -> "GsRegion *":
        r"""
        *Overload 1:*
        设置矩形的裁切范围

        |

        *Overload 2:*
        设置path作为的裁切范围

        |

        *Overload 3:*
        设置path作为的裁切范围

        |

        *Overload 4:*
        获取裁切范围
        """
        return _gskernel.GsCanvas_Clip(self, *args)

    def CreateRegion(self, *args) -> "GsSmarterPtr< GsRegion >":
        r"""
        *Overload 1:*
        创建一个裁切范围

        |

        *Overload 2:*
        创建一个裁切范围
        """
        return _gskernel.GsCanvas_CreateRegion(self, *args)

    def IsVisible(self, *args) -> "bool":
        r"""
        *Overload 1:*
        一个点是否在画布可见

        |

        *Overload 2:*
        一个点是否在画布可见

        |

        *Overload 3:*
        一个点是否在画布可见

        |

        *Overload 4:*
        一个点是否在画布可见

        |

        *Overload 5:*
        一个矩形是否在画布中可见

        |

        *Overload 6:*
        一个矩形是否在画布中可见

        |

        *Overload 7:*
        一个线段是否在画布中可见

        |

        *Overload 8:*
        一个线段是否在画布中可见

        |

        *Overload 9:*
        一个点或者一段线是否在画布中可见

        |

        *Overload 10:*
        一段线是否在画布中可见
        """
        return _gskernel.GsCanvas_IsVisible(self, *args)

    def CreateImage(self, *args) -> "GsSmarterPtr< GsImage >":
        r"""
        *Overload 1:*
         从文件创建存放于内存中的图像对象 :param strFile　要打开的文件名: :rtype: GsSmarterPtr< GsImage >
        :return: 返回图像对象

        |

        *Overload 2:*
         从内存块直接创建图像对象 :param strData　图像的内存块: :type nLen: int
        :param nLen:  内存块的长度 :rtype: GsSmarterPtr< GsImage >
        :return: 返回图像对象
        """
        return _gskernel.GsCanvas_CreateImage(self, *args)

    def CreateCompatibleImageCanvas(self, width: 'int', height: 'int') -> "GsSmarterPtr< GsImageCanvas >":
        r"""
         创建一个和当前画布兼容的Image画布 :param width　画布的高度: :type height: int
        :param height:  画布的宽度
        """
        return _gskernel.GsCanvas_CreateCompatibleImageCanvas(self, width, height)

    def CreatePen(self, *args) -> "GsSmarterPtr< GsPen >":
        r"""
        *Overload 1:*
         创建画笔对象 :type color: :py:class:`GsColor`
        :param color: 画笔的颜色 :type fWidth: float
        :param fWidth: 画笔的宽度，像素单位 :rtype: GsSmarterPtr< GsPen >
        :return: 返回创建的画笔对象指针

        |

        *Overload 2:*
         从画刷创建画笔对象 :param brush: 画刷 :type fWidth: float
        :param fWidth: 画笔的宽度，像素单位 :rtype: GsSmarterPtr< GsPen >
        :return: 返回创建的画笔对象指针

        |

        *Overload 3:*
         从画刷创建画笔对象 :param brush: 画刷 :param fWidth: 画笔的宽度，像素单位 :rtype: GsSmarterPtr< GsPen >
        :return: 返回创建的画笔对象指针
        """
        return _gskernel.GsCanvas_CreatePen(self, *args)

    def CreateSolidBrush(self, color: 'GsColor') -> "GsSmarterPtr< GsSolidBrush >":
        r"""
         创建颜色画刷 :type color: :py:class:`GsColor`
        :param color: 画刷的颜色  :rtype: GsSmarterPtr< GsSolidBrush >
        :return: 返回创建的画刷对象指针
        """
        return _gskernel.GsCanvas_CreateSolidBrush(self, color)

    def CreateTextureBrush(self, pImg: 'GsImage') -> "GsSmarterPtr< GsTextureBrush >":
        r"""
         创建纹理画刷 :type pImg: :py:class:`GsImage`
        :param pImg: 画刷使用的纹理 :rtype: GsSmarterPtr< GsTextureBrush >
        :return: 返回创建的画刷对象指针
        """
        return _gskernel.GsCanvas_CreateTextureBrush(self, pImg)

    def CreateLinearGradientBrush(self, StartColor: 'GsColor', EndColor: 'GsColor') -> "GsSmarterPtr< GsLinearGradientBrush >":
        r"""
         创建颜色线性渐变画刷 :type StartColor: :py:class:`GsColor`
        :param StartColor: 变化开始的颜色 :type EndColor: :py:class:`GsColor`
        :param EndColor: 变化结束的颜色 :rtype: GsSmarterPtr< GsLinearGradientBrush >
        :return: 返回创建的画刷对象指针
        """
        return _gskernel.GsCanvas_CreateLinearGradientBrush(self, StartColor, EndColor)

    def CreateRadialGradientBrush(self, StartColor: 'GsColor', EndColor: 'GsColor') -> "GsSmarterPtr< GsRadialGradientBrush >":
        r"""
         创建颜色辐射渐变画刷 :type StartColor: :py:class:`GsColor`
        :param StartColor: 变化开始的颜色 :type EndColor: :py:class:`GsColor`
        :param EndColor: 变化结束的颜色 :rtype: GsSmarterPtr< GsRadialGradientBrush >
        :return: 返回创建的画刷对象指针
        """
        return _gskernel.GsCanvas_CreateRadialGradientBrush(self, StartColor, EndColor)

    def CreatePath(self) -> "GsSmarterPtr< GsGraphicsPath >":
        r"""
         创建路径对象  :rtype: GsSmarterPtr< GsGraphicsPath >
        :return: 返回创建的路径对象指针
        """
        return _gskernel.GsCanvas_CreatePath(self)

    def CreateStringFormat(self) -> "GsSmarterPtr< GsStringFormat >":
        r"""
         创建字符串格式化话对象 :rtype: GsSmarterPtr< GsStringFormat >
        :return: 返回字符串格式化对象
        """
        return _gskernel.GsCanvas_CreateStringFormat(self)

    def DrawLine(self, *args) -> "bool":
        r"""
        *Overload 1:*
         绘制一根线段 :param x1　线段的起点x坐标: :param y1　线段的起点y坐标: :param x2　线段的终点x坐标: :param y2　线段的终点y坐标: :param 　GsPen　画笔对象: :rtype: boolean
        :return: 返回绘制是否成功

        |

        *Overload 2:*
         绘制多个点连续的线  :type pCoord: float
        :param pCoord: 坐标数组指针，以X，Y坐标连续存储 :type nPointCount: int
        :param nPointCount: 坐标点的数量 :type pPen: :py:class:`GsPen`
        :param pPen: 绘制的画笔 :rtype: boolean
        :return: 返回绘制是否成功
        """
        return _gskernel.GsCanvas_DrawLine(self, *args)

    def DrawArc(self, *args) -> "bool":
        r"""
        *Overload 1:*
         :type rect: :py:class:`GsRectF`
         :param rect: 圆弧所在椭圆的的矩形范围 :param fStartAngle: 圆弧开始的角度（单位度） :type fSweepAngle: float
        :param fSweepAngle: 圆弧旋转的角度（单位度）

        |

        *Overload 2:*
         :type rect: :py:class:`GsRect`
         :param rect: 圆弧所在椭圆的的矩形范围 :param fStartAngle: 圆弧开始的角度（单位度） :type fSweepAngle: float
        :param fSweepAngle: 圆弧旋转的角度（单位度）
        """
        return _gskernel.GsCanvas_DrawArc(self, *args)

    def DrawEllipse(self, *args) -> "bool":
        r"""
        *Overload 1:*
         绘制椭圆  :type rect: :py:class:`GsRectF`
        :param rect: 椭圆的外接矩形范围 :type pPen: :py:class:`GsPen`
        :param pPen: 绘制的画笔  :rtype: boolean
        :return: 返回绘制是否成功

        |

        *Overload 2:*
         绘制椭圆  :type rect: :py:class:`GsRect`
        :param rect: 椭圆的外接矩形范围 :type pPen: :py:class:`GsPen`
        :param pPen: 绘制的画笔  :rtype: boolean
        :return: 返回绘制是否成功
        """
        return _gskernel.GsCanvas_DrawEllipse(self, *args)

    def FillEllipse(self, *args) -> "bool":
        r"""
        *Overload 1:*
         填充椭圆  :type rect: :py:class:`GsRectF`
        :param rect: 椭圆的外接矩形范围 :type pBrush: :py:class:`GsBrush`
        :param pBrush: 填充的画刷  :rtype: boolean
        :return: 返回绘制是否成功

        |

        *Overload 2:*
         填充椭圆  :type rect: :py:class:`GsRect`
        :param rect: 椭圆的外接矩形范围 :type pBrush: :py:class:`GsBrush`
        :param pBrush: 填充的画刷  :rtype: boolean
        :return: 返回绘制是否成功
        """
        return _gskernel.GsCanvas_FillEllipse(self, *args)

    def DrawRectangle(self, *args) -> "bool":
        r"""
        *Overload 1:*
         绘制矩形  :type rect: :py:class:`GsRect`
        :param rect: 矩形范围 :type pPen: :py:class:`GsPen`
        :param pPen: 绘制的画笔  :rtype: boolean
        :return: 返回绘制是否成功

        |

        *Overload 2:*
         绘制矩形  :type rect: :py:class:`GsRectF`
        :param rect: 矩形范围 :type pPen: :py:class:`GsPen`
        :param pPen: 绘制的画笔  :rtype: boolean
        :return: 返回绘制是否成功
        """
        return _gskernel.GsCanvas_DrawRectangle(self, *args)

    def FillRectangle(self, *args) -> "bool":
        r"""
        *Overload 1:*
         填充矩形  :type rect: :py:class:`GsRect`
        :param rect: 矩形范围 :type pBrush: :py:class:`GsBrush`
        :param pBrush: 填充的画刷  :rtype: boolean
        :return: 返回绘制是否成功

        |

        *Overload 2:*
         填充矩形  :type rect: :py:class:`GsRectF`
        :param rect: 矩形范围 :type pBrush: :py:class:`GsBrush`
        :param pBrush: 填充的画刷  :rtype: boolean
        :return: 返回绘制是否成功
        """
        return _gskernel.GsCanvas_FillRectangle(self, *args)

    def DrawPie(self, rect: 'GsRectF', start_angle: 'float', sweepAngle: 'float', pPen: 'GsPen') -> "bool":
        r"""
         绘制Pie轮廓 :type rect: :py:class:`GsRectF`
        :param rect: Pie所在椭圆的外接矩形范围 :type start_angle: float
        :param start_angle: 饼的开始角度 :type sweepAngle: float
        :param sweepAngle: 饼的旋转角度 :type pPen: :py:class:`GsPen`
        :param pPen: 绘制的画笔 :rtype: boolean
        :return: 返回绘制是否成功
        """
        return _gskernel.GsCanvas_DrawPie(self, rect, start_angle, sweepAngle, pPen)

    def FillPie(self, rect: 'GsRectF', start_angle: 'float', sweepAngle: 'float', pBrush: 'GsBrush') -> "bool":
        r"""
         填充Pie :type rect: :py:class:`GsRectF`
        :param rect: Pie所在椭圆的外接矩形范围 :type start_angle: float
        :param start_angle: 饼的开始角度 :type sweepAngle: float
        :param sweepAngle: 饼的旋转角度 :type pBrush: :py:class:`GsBrush`
        :param pBrush: 填充的画刷  :rtype: boolean
        :return: 返回绘制是否成功
        """
        return _gskernel.GsCanvas_FillPie(self, rect, start_angle, sweepAngle, pBrush)

    def DrawPath(self, pPath: 'GsGraphicsPath', pPen: 'GsPen') -> "bool":
        r"""
         绘制路径  :type pPath: :py:class:`GsGraphicsPath`
        :param pPath: 要绘制的路径 :type pPen: :py:class:`GsPen`
        :param pPen: 绘制的画笔  :rtype: boolean
        :return: 返回绘制是否成功
        """
        return _gskernel.GsCanvas_DrawPath(self, pPath, pPen)

    def FillPath(self, pPath: 'GsGraphicsPath', pBrush: 'GsBrush') -> "bool":
        r"""
         填充路径  :type pPath: :py:class:`GsGraphicsPath`
        :param pPath: 要填充的路径 :type pBrush: :py:class:`GsBrush`
        :param pBrush: 填充的画刷  :rtype: boolean
        :return: 返回绘制是否成功
        """
        return _gskernel.GsCanvas_FillPath(self, pPath, pBrush)

    def DrawImage(self, *args) -> "bool":
        r"""
        *Overload 1:*
         绘制一个位图到指定坐标 :param pImg　要绘制的图片: :param pt　图片左上角对应绘制的坐标y坐标　: :rtype: boolean
        :return: 返回绘制是否成功

        |

        *Overload 2:*
         绘制图片的特定部分到特定范围  :type pImg: :py:class:`GsImage`
        :param pImg: 要绘制的图片 :type source: :py:class:`GsRect`
        :param source: 图片要绘制的范围  :type target: :py:class:`GsRectF`
        :param target: 要绘制到的目标范围 :rtype: boolean
        :return: 返回绘制是否成功
        """
        return _gskernel.GsCanvas_DrawImage(self, *args)

    def Clear(self, color: 'GsColor') -> "bool":
        r"""
         用特定颜色清空整个画布   :type color: :py:class:`GsColor`
        :param color: 要清空的颜色   :rtype: boolean
        :return: 返回绘制是否成功
        """
        return _gskernel.GsCanvas_Clear(self, color)

    def Flush(self) -> "bool":
        r"""
         提交未提交的绘制数据    :rtype: boolean
        :return: 返回提交是否成功
        """
        return _gskernel.GsCanvas_Flush(self)

    def DrawString(self, *args) -> "bool":
        r"""
        *Overload 1:*
         绘制字符串 :rtype: boolean
        :return: 返回提交是否成功

        |

        *Overload 2:*
         绘制字符串 :rtype: boolean
        :return: 返回提交是否成功
        """
        return _gskernel.GsCanvas_DrawString(self, *args)

    def MeasureString(self, strText: 'char const *', nLen: 'int', eLayout: 'GsRectF', pFormat: 'GsStringFormat') -> "bool":
        r"""
         测试字符串绘制的大小 :rtype: boolean
        :return: 返回测试是否成功
        """
        return _gskernel.GsCanvas_MeasureString(self, strText, nLen, eLayout, pFormat)

# Register GsCanvas in _gskernel:
_gskernel.GsCanvas_swigregister(GsCanvas)

class GsImageCanvas(GsCanvas):
    r""" 在位图上会绘制的画布"""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def Image(self) -> "GsImage *":
        r""" 获取绘制的位图"""
        return _gskernel.GsImageCanvas_Image(self)

    @staticmethod
    def CanDowncast(b: 'GsCanvas') -> "bool":
        return _gskernel.GsImageCanvas_CanDowncast(b)

    @staticmethod
    def DowncastTo(b: 'GsCanvas') -> "GsSmarterPtr< GsImageCanvas >":
        return _gskernel.GsImageCanvas_DowncastTo(b)
    __swig_destroy__ = _gskernel.delete_GsImageCanvas

# Register GsImageCanvas in _gskernel:
_gskernel.GsImageCanvas_swigregister(GsImageCanvas)

def GsImageCanvas_CanDowncast(b: 'GsCanvas') -> "bool":
    return _gskernel.GsImageCanvas_CanDowncast(b)

def GsImageCanvas_DowncastTo(b: 'GsCanvas') -> "GsSmarterPtr< GsImageCanvas >":
    return _gskernel.GsImageCanvas_DowncastTo(b)

class GsDisplayTransformation(GsRefObject):
    r""" 显示坐标转换对象 用于实现设备和地图之间的坐标以及长度单位的转换"""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, mapExtent: 'GsBox', deviceExtent: 'GsRect'):
        r""" 从设备范围和地图范围构造"""
        _gskernel.GsDisplayTransformation_swiginit(self, _gskernel.new_GsDisplayTransformation(mapExtent, deviceExtent))
    __swig_destroy__ = _gskernel.delete_GsDisplayTransformation

    def SpatialReference(self, *args) -> "void":
        r"""
        *Overload 1:*
        当前空间参考

        |

        *Overload 2:*
        设置当前空间参考
        """
        return _gskernel.GsDisplayTransformation_SpatialReference(self, *args)

    def MapExtent(self, *args) -> "void":
        r"""
        *Overload 1:*
        地图范围

        |

        *Overload 2:*
        设置地图范围
        """
        return _gskernel.GsDisplayTransformation_MapExtent(self, *args)

    def DPI(self, *args) -> "void":
        r"""
        *Overload 1:*
        设备分辨率

        |

        *Overload 2:*
        设置设备分辨率
        """
        return _gskernel.GsDisplayTransformation_DPI(self, *args)

    def Resolution(self, *args) -> "void":
        r"""
        *Overload 1:*
        地图分辨率

        |

        *Overload 2:*
        设置地图分辨率
        """
        return _gskernel.GsDisplayTransformation_Resolution(self, *args)

    def DeviceExtent(self, *args) -> "void":
        r"""
        *Overload 1:*
        设备范围

        |

        *Overload 2:*
        设置范围
        """
        return _gskernel.GsDisplayTransformation_DeviceExtent(self, *args)

    def ToMap(self, *args) -> "void":
        r"""
        *Overload 1:*
        转换设备坐标到地图坐标

        |

        *Overload 2:*
        转换设备坐标到地图坐标

        |

        *Overload 3:*
        转换设备坐标到地图坐标

        |

        *Overload 4:*
        转换设备坐标到地图坐标
        """
        return _gskernel.GsDisplayTransformation_ToMap(self, *args)

    def FromMap(self, *args) -> "void":
        r"""
        *Overload 1:*
        转换地图坐标到设备坐标

        |

        *Overload 2:*
        转换地图坐标到设备坐标

        |

        *Overload 3:*
        转换地图坐标到设备坐标

        |

        *Overload 4:*
        转换地图坐标到设备坐标
        """
        return _gskernel.GsDisplayTransformation_FromMap(self, *args)

    def FromPageMeasure(self, u: 'GsUnits', dblLen: 'double') -> "double":
        r""" 从纸面单位长度转换为像素单位长度"""
        return _gskernel.GsDisplayTransformation_FromPageMeasure(self, u, dblLen)

    def Scale(self, *args) -> "void":
        r"""
        *Overload 1:*
        获取比例尺分母的值

        |

        *Overload 2:*
        设置比例尺的值
        """
        return _gskernel.GsDisplayTransformation_Scale(self, *args)

    def ReferenceScale(self, *args) -> "void":
        r"""
        *Overload 1:*
        获取参考比例尺

        |

        *Overload 2:*
        设置参考比例尺
        """
        return _gskernel.GsDisplayTransformation_ReferenceScale(self, *args)

    def Matrix(self) -> "GsMatrixT< float >":
        r""" 地图到屏幕的转换矩阵 屏幕到地图的转换矩阵可以通过矩阵Invert获得。"""
        return _gskernel.GsDisplayTransformation_Matrix(self)

# Register GsDisplayTransformation in _gskernel:
_gskernel.GsDisplayTransformation_swigregister(GsDisplayTransformation)

eUnknownFormat = _gskernel.eUnknownFormat
r""" 未知的空间参考定义格式"""
eWktFormat = _gskernel.eWktFormat
r""" 标准WKT格式"""
eXMLFormat = _gskernel.eXMLFormat
r""" XML格式"""
eProj4Format = _gskernel.eProj4Format
r""" proj.4格式"""
eESRIWktFormat = _gskernel.eESRIWktFormat
r""" ESRI的Wkt格式"""
eGeoStar5Format = _gskernel.eGeoStar5Format
r""" GeoStar5以逗号分隔的空间参考描述格式。"""
eWGS84 = _gskernel.eWGS84
r""" WGS84空间参考"""
eCGCS2000 = _gskernel.eCGCS2000
r""" CGCS2000空间参考"""
eWebMercator = _gskernel.eWebMercator
r""" web墨卡托空间参考"""
eUnknownUnit = _gskernel.eUnknownUnit
r""" 未知单位"""
eMeter = _gskernel.eMeter
r""" 米"""
eFoot = _gskernel.eFoot
r""" foot 1 ft = 0.3048 m"""
eUSSurveyFoot = _gskernel.eUSSurveyFoot
r"""US survey foot 1 USft = 0.30480060960122 m"""
eClarkeFoot = _gskernel.eClarkeFoot
r""" Clarke's foot 其与米之前的转换关系 1 Clarke's foot = 0.3047972654 m"""
eGermanMetre = _gskernel.eGermanMetre
r""" German legal metre,1 German legal metre= 1.0000135965 m"""
eIndianFoot = _gskernel.eIndianFoot
r""" Indian foot,Indian Foot = 0.99999566 British feet (A.R.Clarke 1865). British yard (= 3 British feet) taken to be J.S.Clark's 1865 value of 0.9144025 metres."""
eSexagesimalDMS = _gskernel.eSexagesimalDMS
r""" sexagesimal DMS"""
eDegree = _gskernel.eDegree
r""" 度"""
eUnity = _gskernel.eUnity
r""" Unity"""
eMM = _gskernel.eMM
r""" 毫米"""
eInch = _gskernel.eInch
r""" 英寸"""
eCM = _gskernel.eCM
r""" 厘米"""
eKM = _gskernel.eKM
r""" 千米"""
eMile = _gskernel.eMile
r""" 英里"""
eNatuicalMile = _gskernel.eNatuicalMile
ePoint = _gskernel.ePoint
eOther = _gskernel.eOther
r""" 不确定方向"""
eNorth = _gskernel.eNorth
r""" 朝北"""
eSouth = _gskernel.eSouth
r""" 朝南"""
eEast = _gskernel.eEast
r""" 朝东"""
eWest = _gskernel.eWest
r""" 朝西"""
eUp = _gskernel.eUp
r""" 朝上"""
eDown = _gskernel.eDown
r""" 朝下"""
eUnknown = _gskernel.eUnknown
r""" 不确定"""
eLat = _gskernel.eLat
r""" 纬度"""
eLong = _gskernel.eLong
r""" 经度"""
eX = _gskernel.eX
r""" X"""
eY = _gskernel.eY
r""" Y"""
eE = _gskernel.eE
r""" E"""
eN = _gskernel.eN
r""" N"""
class GsCoordinateSystem(object):
    r""" 坐标系信息"""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    ID = property(_gskernel.GsCoordinateSystem_ID_get, _gskernel.GsCoordinateSystem_ID_set, doc=r""" 坐标系的编号""")
    Name = property(_gskernel.GsCoordinateSystem_Name_get, _gskernel.GsCoordinateSystem_Name_set, doc=r""" 坐标系的名称""")
    Type = property(_gskernel.GsCoordinateSystem_Type_get, _gskernel.GsCoordinateSystem_Type_set, doc=r""" 坐标系的类型""")
    Dim = property(_gskernel.GsCoordinateSystem_Dim_get, _gskernel.GsCoordinateSystem_Dim_set, doc=r""" 坐标系的维度""")
    InformationSource = property(_gskernel.GsCoordinateSystem_InformationSource_get, _gskernel.GsCoordinateSystem_InformationSource_set, doc=r""" 坐标系的信息来源""")
    DataSource = property(_gskernel.GsCoordinateSystem_DataSource_get, _gskernel.GsCoordinateSystem_DataSource_set, doc=r""" 坐标系的数据来源""")

    def __init__(self):
        _gskernel.GsCoordinateSystem_swiginit(self, _gskernel.new_GsCoordinateSystem())
    __swig_destroy__ = _gskernel.delete_GsCoordinateSystem

# Register GsCoordinateSystem in _gskernel:
_gskernel.GsCoordinateSystem_swigregister(GsCoordinateSystem)

class GsCoordinateAxis(object):
    r""" 坐标轴信息"""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    CoordinateSystemID = property(_gskernel.GsCoordinateAxis_CoordinateSystemID_get, _gskernel.GsCoordinateAxis_CoordinateSystemID_set, doc=r""" 坐标系的编号""")
    ID = property(_gskernel.GsCoordinateAxis_ID_get, _gskernel.GsCoordinateAxis_ID_set, doc=r""" 坐标轴的编号""")
    Orientation = property(_gskernel.GsCoordinateAxis_Orientation_get, _gskernel.GsCoordinateAxis_Orientation_set, doc=r""" 坐标轴的方向""")
    Name = property(_gskernel.GsCoordinateAxis_Name_get, _gskernel.GsCoordinateAxis_Name_set, doc=r""" 坐标轴的名称""")
    Abbreviation = property(_gskernel.GsCoordinateAxis_Abbreviation_get, _gskernel.GsCoordinateAxis_Abbreviation_set, doc=r""" 坐标轴名称的缩写""")
    UnitID = property(_gskernel.GsCoordinateAxis_UnitID_get, _gskernel.GsCoordinateAxis_UnitID_set, doc=r""" 坐标轴单位的编号""")
    Order = property(_gskernel.GsCoordinateAxis_Order_get, _gskernel.GsCoordinateAxis_Order_set, doc=r""" 坐标轴的顺序""")

    def __init__(self):
        _gskernel.GsCoordinateAxis_swiginit(self, _gskernel.new_GsCoordinateAxis())
    __swig_destroy__ = _gskernel.delete_GsCoordinateAxis

# Register GsCoordinateAxis in _gskernel:
_gskernel.GsCoordinateAxis_swigregister(GsCoordinateAxis)

class GsEllipsoid(object):
    r""" 椭球信息"""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    ID = property(_gskernel.GsEllipsoid_ID_get, _gskernel.GsEllipsoid_ID_set, doc=r""" 椭球的编号""")
    Name = property(_gskernel.GsEllipsoid_Name_get, _gskernel.GsEllipsoid_Name_set, doc=r""" 椭球的名称""")
    EquatorialRadiusA = property(_gskernel.GsEllipsoid_EquatorialRadiusA_get, _gskernel.GsEllipsoid_EquatorialRadiusA_set, doc=r""" 椭球的长半轴""")
    PolarRadiusB = property(_gskernel.GsEllipsoid_PolarRadiusB_get, _gskernel.GsEllipsoid_PolarRadiusB_set, doc=r""" 椭球的短半轴""")
    FlattenInverseF = property(_gskernel.GsEllipsoid_FlattenInverseF_get, _gskernel.GsEllipsoid_FlattenInverseF_set, doc=r""" 椭球的扁率的倒数  扁率 = （长半轴-短半轴）/长半轴""")
    UnitID = property(_gskernel.GsEllipsoid_UnitID_get, _gskernel.GsEllipsoid_UnitID_set, doc=r""" 椭球的单位编号，此处指长半轴、短半轴的单位""")
    InformationSource = property(_gskernel.GsEllipsoid_InformationSource_get, _gskernel.GsEllipsoid_InformationSource_set, doc=r""" 椭球的信息来源""")
    DataSource = property(_gskernel.GsEllipsoid_DataSource_get, _gskernel.GsEllipsoid_DataSource_set, doc=r""" 椭球的数据来源""")

    def __init__(self):
        _gskernel.GsEllipsoid_swiginit(self, _gskernel.new_GsEllipsoid())
    __swig_destroy__ = _gskernel.delete_GsEllipsoid

# Register GsEllipsoid in _gskernel:
_gskernel.GsEllipsoid_swigregister(GsEllipsoid)

class GsDatum(object):
    r""" 基准面"""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    ID = property(_gskernel.GsDatum_ID_get, _gskernel.GsDatum_ID_set, doc=r""" 基准面编号""")
    EllipsoidID = property(_gskernel.GsDatum_EllipsoidID_get, _gskernel.GsDatum_EllipsoidID_set, doc=r""" 基准面对应的椭球编号""")
    Name = property(_gskernel.GsDatum_Name_get, _gskernel.GsDatum_Name_set, doc=r""" 基准面名称""")
    Type = property(_gskernel.GsDatum_Type_get, _gskernel.GsDatum_Type_set, doc=r""" 基准面类型""")
    PrimaryMeridianID = property(_gskernel.GsDatum_PrimaryMeridianID_get, _gskernel.GsDatum_PrimaryMeridianID_set, doc=r""" 基准面主午线ID""")
    InformationSource = property(_gskernel.GsDatum_InformationSource_get, _gskernel.GsDatum_InformationSource_set, doc=r""" 基准面信息来源""")
    DataSource = property(_gskernel.GsDatum_DataSource_get, _gskernel.GsDatum_DataSource_set, doc=r""" 基准面数据来源""")
    Exist7parameters = property(_gskernel.GsDatum_Exist7parameters_get, _gskernel.GsDatum_Exist7parameters_set, doc=r""" 基准面是否存在7参数""")
    ShiftX = property(_gskernel.GsDatum_ShiftX_get, _gskernel.GsDatum_ShiftX_set, doc=r""" 基准面7参数：在x轴上，将椭球中心相对于WGS 84椭球中心相对移动的米数""")
    ShiftY = property(_gskernel.GsDatum_ShiftY_get, _gskernel.GsDatum_ShiftY_set, doc=r""" 基准面7参数：在Y轴上，将椭球中心相对于WGS 84椭球中心相对移动的米数""")
    ShiftZ = property(_gskernel.GsDatum_ShiftZ_get, _gskernel.GsDatum_ShiftZ_set, doc=r""" 基准面7参数：在z轴上，将椭球中心相对于WGS 84椭球中心相对移动的米数""")
    RotateX = property(_gskernel.GsDatum_RotateX_get, _gskernel.GsDatum_RotateX_set, doc=r""" 基准面7参数:绕x轴旋转的弧秒数。""")
    RotateY = property(_gskernel.GsDatum_RotateY_get, _gskernel.GsDatum_RotateY_set, doc=r""" 基准面7参数:绕Y轴旋转的弧秒数。""")
    RotateZ = property(_gskernel.GsDatum_RotateZ_get, _gskernel.GsDatum_RotateZ_set, doc=r""" 基准面7参数:绕Z轴旋转的弧秒数。""")
    ScaleAdjust = property(_gskernel.GsDatum_ScaleAdjust_get, _gskernel.GsDatum_ScaleAdjust_set, doc=r""" 基准面7参数:调整参数。""")

    def __init__(self):
        _gskernel.GsDatum_swiginit(self, _gskernel.new_GsDatum())
    __swig_destroy__ = _gskernel.delete_GsDatum

# Register GsDatum in _gskernel:
_gskernel.GsDatum_swigregister(GsDatum)

class GsCoordinateReferenceSystem(object):
    r""" 坐标参考系统信息"""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    ID = property(_gskernel.GsCoordinateReferenceSystem_ID_get, _gskernel.GsCoordinateReferenceSystem_ID_set, doc=r""" 坐标参考系统编号""")
    Name = property(_gskernel.GsCoordinateReferenceSystem_Name_get, _gskernel.GsCoordinateReferenceSystem_Name_set, doc=r""" 坐标参考系统名称""")
    Type = property(_gskernel.GsCoordinateReferenceSystem_Type_get, _gskernel.GsCoordinateReferenceSystem_Type_set, doc=r""" 坐标参考系统类型""")
    CoordinateSystemID = property(_gskernel.GsCoordinateReferenceSystem_CoordinateSystemID_get, _gskernel.GsCoordinateReferenceSystem_CoordinateSystemID_set, doc=r""" 坐标系编号""")
    DatumID = property(_gskernel.GsCoordinateReferenceSystem_DatumID_get, _gskernel.GsCoordinateReferenceSystem_DatumID_set, doc=r""" 椭球编号""")
    GeographicDatumID = property(_gskernel.GsCoordinateReferenceSystem_GeographicDatumID_get, _gskernel.GsCoordinateReferenceSystem_GeographicDatumID_set, doc=r""" 基础地理坐标系的椭球编号""")
    InformationSource = property(_gskernel.GsCoordinateReferenceSystem_InformationSource_get, _gskernel.GsCoordinateReferenceSystem_InformationSource_set, doc=r""" 坐标参考系统信息来源""")
    DataSource = property(_gskernel.GsCoordinateReferenceSystem_DataSource_get, _gskernel.GsCoordinateReferenceSystem_DataSource_set, doc=r""" 坐标参考系统数据来源""")

    def __init__(self):
        _gskernel.GsCoordinateReferenceSystem_swiginit(self, _gskernel.new_GsCoordinateReferenceSystem())
    __swig_destroy__ = _gskernel.delete_GsCoordinateReferenceSystem

# Register GsCoordinateReferenceSystem in _gskernel:
_gskernel.GsCoordinateReferenceSystem_swigregister(GsCoordinateReferenceSystem)

class GsCoordinateConversionsRule(object):
    r""" 坐标转换规则"""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    Name = property(_gskernel.GsCoordinateConversionsRule_Name_get, _gskernel.GsCoordinateConversionsRule_Name_set, doc=r""" 坐标转换规则名称""")
    Type = property(_gskernel.GsCoordinateConversionsRule_Type_get, _gskernel.GsCoordinateConversionsRule_Type_set, doc=r""" 坐标转换规则类型""")
    ID = property(_gskernel.GsCoordinateConversionsRule_ID_get, _gskernel.GsCoordinateConversionsRule_ID_set, doc=r""" 坐标转换规则编号""")

    def __init__(self):
        _gskernel.GsCoordinateConversionsRule_swiginit(self, _gskernel.new_GsCoordinateConversionsRule())
    __swig_destroy__ = _gskernel.delete_GsCoordinateConversionsRule

# Register GsCoordinateConversionsRule in _gskernel:
_gskernel.GsCoordinateConversionsRule_swigregister(GsCoordinateConversionsRule)

class GsCoordinateConversionsParameter(object):
    r""" 坐标转换参数信息"""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    Name = property(_gskernel.GsCoordinateConversionsParameter_Name_get, _gskernel.GsCoordinateConversionsParameter_Name_set, doc=r""" 坐标转换参数名称""")
    CoordinateConversionsRuleID = property(_gskernel.GsCoordinateConversionsParameter_CoordinateConversionsRuleID_get, _gskernel.GsCoordinateConversionsParameter_CoordinateConversionsRuleID_set, doc=r""" 坐标转换规则编号""")
    ID = property(_gskernel.GsCoordinateConversionsParameter_ID_get, _gskernel.GsCoordinateConversionsParameter_ID_set, doc=r""" 坐标转换参数编号""")
    Value = property(_gskernel.GsCoordinateConversionsParameter_Value_get, _gskernel.GsCoordinateConversionsParameter_Value_set, doc=r""" 坐标转换参数值""")
    UnitID = property(_gskernel.GsCoordinateConversionsParameter_UnitID_get, _gskernel.GsCoordinateConversionsParameter_UnitID_set, doc=r""" 坐标转换参数单位编号""")

    def __init__(self):
        _gskernel.GsCoordinateConversionsParameter_swiginit(self, _gskernel.new_GsCoordinateConversionsParameter())
    __swig_destroy__ = _gskernel.delete_GsCoordinateConversionsParameter

# Register GsCoordinateConversionsParameter in _gskernel:
_gskernel.GsCoordinateConversionsParameter_swigregister(GsCoordinateConversionsParameter)

class GsSpatialReference(GsRefObject):
    r""" 空间参考"""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    __swig_destroy__ = _gskernel.delete_GsSpatialReference

    def __init__(self, *args):
        r"""
        *Overload 1:*
        从已知的空间参考类型构造

        |

        *Overload 2:*
        从字符串和指定类型进行构造

        |

        *Overload 3:*
        从字符串和指定类型进行构造

        |

        *Overload 4:*
        从EPSG编号构造
        """
        _gskernel.GsSpatialReference_swiginit(self, _gskernel.new_GsSpatialReference(*args))

    def Name(self, *args) -> "void":
        r"""
        *Overload 1:*
        空间参考的名称

        |

        *Overload 2:*
        空间参考的名称
        """
        return _gskernel.GsSpatialReference_Name(self, *args)

    def Units(self) -> "GsUnits":
        r""" 坐标单位"""
        return _gskernel.GsSpatialReference_Units(self)

    def ExportToWKT(self, bPretty: 'bool'=False) -> "GsString":
        r""" 坐标单位"""
        return _gskernel.GsSpatialReference_ExportToWKT(self, bPretty)

    def ExportToXml(self) -> "GsString":
        r""" 以XML的格式输出"""
        return _gskernel.GsSpatialReference_ExportToXml(self)

    def ExportToProj4(self) -> "GsString":
        r""" 以Proj4的格式输出"""
        return _gskernel.GsSpatialReference_ExportToProj4(self)

    def IsNull(self) -> "bool":
        r""" 是否为空"""
        return _gskernel.GsSpatialReference_IsNull(self)

    def IsSame(self, sr: 'GsSpatialReference') -> "bool":
        r""" 是否是相同的坐标系"""
        return _gskernel.GsSpatialReference_IsSame(self, sr)

    def IsSameProjCS(self, sr: 'GsSpatialReference') -> "bool":
        r""" 是否是相同的投影坐标系"""
        return _gskernel.GsSpatialReference_IsSameProjCS(self, sr)

    def IsSameGeogCS(self, sr: 'GsSpatialReference') -> "bool":
        r""" 是否是相同的地理坐标系"""
        return _gskernel.GsSpatialReference_IsSameGeogCS(self, sr)

    def IsSameParameter(self, sr: 'GsSpatialReference') -> "bool":
        r""" 是否是相同的空间参数，可以作为空间参考是否相同的依据，但不绝对"""
        return _gskernel.GsSpatialReference_IsSameParameter(self, sr)

    def IsLocalCS(self) -> "bool":
        r""" 是否是本地坐标系"""
        return _gskernel.GsSpatialReference_IsLocalCS(self)

    def IsGeographic(self) -> "bool":
        r""" 是否是地理坐标系"""
        return _gskernel.GsSpatialReference_IsGeographic(self)

    def IsProjected(self) -> "bool":
        r""" 是否是投影坐标系"""
        return _gskernel.GsSpatialReference_IsProjected(self)

    def Geographic(self) -> "GsSmarterPtr< GsSpatialReference >":
        return _gskernel.GsSpatialReference_Geographic(self)

    def EquatorialRadiusA(self) -> "double":
        r""" 椭球长半轴(公里 km)"""
        return _gskernel.GsSpatialReference_EquatorialRadiusA(self)

    def PolarRadiusB(self) -> "double":
        r""" 椭球短半轴(公里 km)"""
        return _gskernel.GsSpatialReference_PolarRadiusB(self)

    def FlattenInverseF(self) -> "double":
        r""" 椭球扁率的倒数"""
        return _gskernel.GsSpatialReference_FlattenInverseF(self)

    def MeanRadius(self) -> "double":
        r""" 椭球平均半径(公里 km)"""
        return _gskernel.GsSpatialReference_MeanRadius(self)

    def EPSG(self) -> "int":
        r""" EPSG"""
        return _gskernel.GsSpatialReference_EPSG(self)

    def Ellipsoid(self) -> "GsString":
        r""" 椭球名称"""
        return _gskernel.GsSpatialReference_Ellipsoid(self)

    def Projection(self) -> "GsString":
        r""" 投影名称"""
        return _gskernel.GsSpatialReference_Projection(self)

    def Axis(self, i: 'int', peOrientation: 'GsAxisOrientation *') -> "GsString":
        r"""
         获取坐标轴的方向信息 :type i: int
        :param i: 坐标轴的顺序（0或者1）  :type peOrientation: int
        :param peOrientation: 输出坐标轴的方向 :rtype: :py:class:`GsString`
        :return: 返回坐标轴的名称，无效则为空字符串
        """
        return _gskernel.GsSpatialReference_Axis(self, i, peOrientation)

    def CoordinateSystem(self) -> "GsCoordinateSystem":
        r""" 获取坐标系信息"""
        return _gskernel.GsSpatialReference_CoordinateSystem(self)

    def CoordinateAxis(self, i: 'int') -> "GsCoordinateAxis":
        r"""
         获取坐标轴信息 :type i: int
        :param i: 坐标轴的顺序（0或者1）
        """
        return _gskernel.GsSpatialReference_CoordinateAxis(self, i)

    def EllipsoidInfo(self) -> "GsEllipsoid":
        r""" 获取椭球信息"""
        return _gskernel.GsSpatialReference_EllipsoidInfo(self)

    def Datum(self) -> "GsDatum":
        r""" 获取基准面信息"""
        return _gskernel.GsSpatialReference_Datum(self)

    def GeographicCoordinateReferenceSystem(self) -> "GsCoordinateReferenceSystem":
        r""" 获取基础地理坐标系统信息"""
        return _gskernel.GsSpatialReference_GeographicCoordinateReferenceSystem(self)

    def CoordinateConversionsRule(self) -> "GsCoordinateConversionsRule":
        r""" 获取坐标转换规则信息"""
        return _gskernel.GsSpatialReference_CoordinateConversionsRule(self)

    def CoordinateConversionsParameter(self, nIndex: 'int') -> "GsCoordinateConversionsParameter":
        r"""
         获取坐标转换参数信息 :type nIndex: int
        :param nIndex: 坐标转换参数的序号（从0开始）
        """
        return _gskernel.GsSpatialReference_CoordinateConversionsParameter(self, nIndex)

    def CoordinateConversionsParameterCount(self) -> "int":
        r""" 获取坐标转换参数数量"""
        return _gskernel.GsSpatialReference_CoordinateConversionsParameterCount(self)

# Register GsSpatialReference in _gskernel:
_gskernel.GsSpatialReference_swigregister(GsSpatialReference)

class GsSpatialReferenceManager(object):
    r""" 空间参考管理对象。 枚举现有的空间参考，增加新空间参考等等能力。"""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    eStandardEPSG = _gskernel.GsSpatialReferenceManager_eStandardEPSG
    r""" 标准EPSG分类"""
    eAliasOfEPSG = _gskernel.GsSpatialReferenceManager_eAliasOfEPSG
    r""" EPSG别名分类"""

    def __init__(self, strSRDataFolder: 'char const *'=None):
        r""" 指定特定目录构造空间参考管理对象"""
        _gskernel.GsSpatialReferenceManager_swiginit(self, _gskernel.new_GsSpatialReferenceManager(strSRDataFolder))
    __swig_destroy__ = _gskernel.delete_GsSpatialReferenceManager

    def DataFolder(self) -> "GsString":
        r""" 获取空间参考数据目录。"""
        return _gskernel.GsSpatialReferenceManager_DataFolder(self)

    def CategoryCount(self) -> "int":
        r""" 空间参考的分类数量"""
        return _gskernel.GsSpatialReferenceManager_CategoryCount(self)

    def Category(self, i: 'int') -> "GsSpatialReferenceManager::GsSpatialReferenceCategory *":
        r""" 获取空间参考的一个分类"""
        return _gskernel.GsSpatialReferenceManager_Category(self, i)

    def SpecialCategory(self, eType: 'GsSpatialReferenceManager::GsSpecialCategory') -> "GsSpatialReferenceManager::GsSpatialReferenceCategory *":
        r""" 获取特殊的空间参考分类。"""
        return _gskernel.GsSpatialReferenceManager_SpecialCategory(self, eType)

# Register GsSpatialReferenceManager in _gskernel:
_gskernel.GsSpatialReferenceManager_swigregister(GsSpatialReferenceManager)

class GsCoordinateTransformation(GsRefObject):
    r""" 坐标转换基类"""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __swig_destroy__ = _gskernel.delete_GsCoordinateTransformation

    def Transformation(self, *args) -> "bool":
        r"""
        *Overload 1:*
        对x数组和y数组以及Z数组分别转换

        |

        *Overload 2:*
        对x数组和y数组以及Z数组分别转换

        |

        *Overload 3:*
        对x，y，或者z构成的坐标数组进行转换
        """
        return _gskernel.GsCoordinateTransformation_Transformation(self, *args)

# Register GsCoordinateTransformation in _gskernel:
_gskernel.GsCoordinateTransformation_swigregister(GsCoordinateTransformation)

class GsProjectCoordinateTransformation(GsCoordinateTransformation):
    r""" 投影坐标转换"""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, pSource: 'GsSpatialReference', pTarget: 'GsSpatialReference'):
        _gskernel.GsProjectCoordinateTransformation_swiginit(self, _gskernel.new_GsProjectCoordinateTransformation(pSource, pTarget))
    __swig_destroy__ = _gskernel.delete_GsProjectCoordinateTransformation

    def Source(self, *args) -> "void":
        r"""
        *Overload 1:*
        投影转换源空间参考

        |

        *Overload 2:*
        设置投影转换源空间参考
        """
        return _gskernel.GsProjectCoordinateTransformation_Source(self, *args)

    def Target(self, *args) -> "void":
        r"""
        *Overload 1:*
        投影转换目标空间参考

        |

        *Overload 2:*
        设置投影转换目标空间参考
        """
        return _gskernel.GsProjectCoordinateTransformation_Target(self, *args)

    @staticmethod
    def CanDowncast(b: 'GsCoordinateTransformation') -> "bool":
        return _gskernel.GsProjectCoordinateTransformation_CanDowncast(b)

    @staticmethod
    def DowncastTo(b: 'GsCoordinateTransformation') -> "GsSmarterPtr< GsProjectCoordinateTransformation >":
        return _gskernel.GsProjectCoordinateTransformation_DowncastTo(b)

# Register GsProjectCoordinateTransformation in _gskernel:
_gskernel.GsProjectCoordinateTransformation_swigregister(GsProjectCoordinateTransformation)

def GsProjectCoordinateTransformation_CanDowncast(b: 'GsCoordinateTransformation') -> "bool":
    return _gskernel.GsProjectCoordinateTransformation_CanDowncast(b)

def GsProjectCoordinateTransformation_DowncastTo(b: 'GsCoordinateTransformation') -> "GsSmarterPtr< GsProjectCoordinateTransformation >":
    return _gskernel.GsProjectCoordinateTransformation_DowncastTo(b)

ePositionVector = _gskernel.ePositionVector
r""" 位置矢量法七参数赫尔默特（Helmert）转换法，依据布尔莎（Bursa-Wolf）公式由国际大地测量协会（IAG）通过ISO19111标准定义与坐标框架法不同的是7参数中三个旋转参数的方向相反。"""
eCoordinateFrame = _gskernel.eCoordinateFrame
r""" 坐标框架法七参数赫尔默特（Helmert）转换法，依据布尔莎（Bursa-Wolf）公式由EPSG（欧洲石油勘探组织）定义与位置矢量法不同的是7参数中三个旋转参数的方向相反。"""
eGeocentricTranslation = _gskernel.eGeocentricTranslation
r""" 基于地心的三参数转换法。"""
class GsParameterProjectCoordinateTransformation(GsProjectCoordinateTransformation):
    r""" 参数化的投影坐标转换 定义不同投影间的转换方法和转换参数 从一个大地经纬度坐标系变换到另一个大地经纬度坐标系一般需要经过三个环节：大地经纬度坐标系到空间直角坐标系>空间直角坐标系到空间直角坐标系>空间直角坐标系到大地经纬度坐标系。 其中的中间环节，空间直角坐标到空间直角坐标采用七参数赫尔默特（Helmert）转换法，其转换矩阵为著名的布尔沙-沃尔夫（Bursa-Wolf）公式,或者三参数等不同的转换方法"""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, pSource: 'GsSpatialReference', pTarget: 'GsSpatialReference', eMethod: 'GsCoordinateTransformationMethod', pParam: 'double *'):
        r""" 从转换方法和转换参数构造"""
        _gskernel.GsParameterProjectCoordinateTransformation_swiginit(self, _gskernel.new_GsParameterProjectCoordinateTransformation(pSource, pTarget, eMethod, pParam))

    def Method(self) -> "GsCoordinateTransformationMethod":
        r""" 获取数据转换的方法"""
        return _gskernel.GsParameterProjectCoordinateTransformation_Method(self)

    def Parameter(self, method: 'GsCoordinateTransformationMethod', pParam: 'double *') -> "void":
        r""" 设置坐标转换的方法和参数值。"""
        return _gskernel.GsParameterProjectCoordinateTransformation_Parameter(self, method, pParam)

    @staticmethod
    def CanDowncast(b: 'GsProjectCoordinateTransformation') -> "bool":
        return _gskernel.GsParameterProjectCoordinateTransformation_CanDowncast(b)

    @staticmethod
    def DowncastTo(b: 'GsProjectCoordinateTransformation') -> "GsSmarterPtr< GsParameterProjectCoordinateTransformation >":
        return _gskernel.GsParameterProjectCoordinateTransformation_DowncastTo(b)
    __swig_destroy__ = _gskernel.delete_GsParameterProjectCoordinateTransformation

# Register GsParameterProjectCoordinateTransformation in _gskernel:
_gskernel.GsParameterProjectCoordinateTransformation_swigregister(GsParameterProjectCoordinateTransformation)

def GsParameterProjectCoordinateTransformation_CanDowncast(b: 'GsProjectCoordinateTransformation') -> "bool":
    return _gskernel.GsParameterProjectCoordinateTransformation_CanDowncast(b)

def GsParameterProjectCoordinateTransformation_DowncastTo(b: 'GsProjectCoordinateTransformation') -> "GsSmarterPtr< GsParameterProjectCoordinateTransformation >":
    return _gskernel.GsParameterProjectCoordinateTransformation_DowncastTo(b)

class GsAffineCoordinateTransformation(GsCoordinateTransformation):
    r""" 仿射坐标转换"""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        r"""
        *Overload 1:*
        根据源和目标同名点组构成仿射变换参数 最低需要3个点的坐标。

        |

        *Overload 2:*
        根据源和目标同名点组构成仿射变换参数 最低需要3个点的坐标。
        """
        _gskernel.GsAffineCoordinateTransformation_swiginit(self, _gskernel.new_GsAffineCoordinateTransformation(*args))

    def Parameter(self, pSourcePoint: 'double *', pTargetPoint: 'double *', nLen: 'int'=6) -> "bool":
        r""" 设置同名点参数"""
        return _gskernel.GsAffineCoordinateTransformation_Parameter(self, pSourcePoint, pTargetPoint, nLen)

    def Elements(self, m: 'double *') -> "bool":
        r"""
         获取仿射变换矩阵的值。 :type m: float
        :param m: 用于输出矩阵值得数组，长度6
        """
        return _gskernel.GsAffineCoordinateTransformation_Elements(self, m)

    def IdenticalPointCount(self) -> "int":
        r""" 同名点数量"""
        return _gskernel.GsAffineCoordinateTransformation_IdenticalPointCount(self)

    def SourcePoint(self, point: 'double *') -> "void":
        r""" 源的同名点坐标"""
        return _gskernel.GsAffineCoordinateTransformation_SourcePoint(self, point)

    def TargetPoint(self, point: 'double *') -> "void":
        r""" 目标的同名点坐标"""
        return _gskernel.GsAffineCoordinateTransformation_TargetPoint(self, point)

    @staticmethod
    def CanDowncast(b: 'GsCoordinateTransformation') -> "bool":
        return _gskernel.GsAffineCoordinateTransformation_CanDowncast(b)

    @staticmethod
    def DowncastTo(b: 'GsCoordinateTransformation') -> "GsSmarterPtr< GsAffineCoordinateTransformation >":
        return _gskernel.GsAffineCoordinateTransformation_DowncastTo(b)
    __swig_destroy__ = _gskernel.delete_GsAffineCoordinateTransformation

# Register GsAffineCoordinateTransformation in _gskernel:
_gskernel.GsAffineCoordinateTransformation_swigregister(GsAffineCoordinateTransformation)

def GsAffineCoordinateTransformation_CanDowncast(b: 'GsCoordinateTransformation') -> "bool":
    return _gskernel.GsAffineCoordinateTransformation_CanDowncast(b)

def GsAffineCoordinateTransformation_DowncastTo(b: 'GsCoordinateTransformation') -> "GsSmarterPtr< GsAffineCoordinateTransformation >":
    return _gskernel.GsAffineCoordinateTransformation_DowncastTo(b)

class GsGeodesic(object):
    r""" 大地线，计算两个经纬度坐标的测地线长度，或称为大圆距离、球面距离"""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        r"""
        *Overload 1:*
         从空间参考初始化

        |

        *Overload 2:*
         从地球半径和扁率构造 :type a: float
        :param a: 赤道半径  :type f: float
        :param f: 扁率

        |

        *Overload 3:*
         拷贝构造函数
        """
        _gskernel.GsGeodesic_swiginit(self, _gskernel.new_GsGeodesic(*args))

    def Inverse(self, fromLongitude: 'double', fromLatitude: 'double', toLongitude: 'double', toLatitude: 'double', fromAzimuth: 'double *'=None, toAzimuth: 'double *'=None) -> "double":
        r"""
         赋值操作符 计算测地线长度、大圆距离、球面距离 :type fromLongitude: float
        :param fromLongitude: 开始点经度 :type fromLatitude: float
        :param fromLatitude: 开始点纬度度 :type toLongitude: float
        :param toLongitude: 结束点经度 :type toLatitude: float
        :param toLatitude: 结束点纬度度 :type fromAzimuth: float
        :param fromAzimuth: 输出开始点的方向角 :type toAzimuth: float
        :param toAzimuth: 输出结束点的方向角 :rtype: float
        :return: 测地线长度，单位米
        """
        return _gskernel.GsGeodesic_Inverse(self, fromLongitude, fromLatitude, toLongitude, toLatitude, fromAzimuth, toAzimuth)

    def ComputeGeodesic(self, pCoord: 'double const *', nLen: 'int', nDim: 'int') -> "double":
        r"""
         计算一段连续点的测地线长度 :type pCoord: float
        :param pCoord: 点坐标数组 :type nLen: int
        :param nLen: 点坐标数组长度 :type nDim: int
        :param nDim: 坐标维度（2或3） :rtype: float
        :return: 测地线长度，单位米
        """
        return _gskernel.GsGeodesic_ComputeGeodesic(self, pCoord, nLen, nDim)

    def Direct(self, fromLongitude: 'double', fromLatitude: 'double', fromAzimuth: 'double', length12: 'double', toLongitude: 'double *', toLatitude: 'double *', toAzimuth: 'double *'=None) -> "void":
        r"""
         根据起点经纬度坐标和方位角沿测试线前进一定长度到终点 :type fromLongitude: float
        :param fromLongitude: 开始点经度 :type fromLatitude: float
        :param fromLatitude: 开始点纬度度 :type fromAzimuth: float
        :param fromAzimuth: 开始点方位角（以正北为0顺时针旋转的角度，单位度） :param lenth12: 沿测地线前进的距离（单位米） :type toLongitude: float
        :param toLongitude: 输出终点的经度 :type toLatitude: float
        :param toLatitude: 输出终点的纬度 :type toLatitude: float
        :param toLatitude: 输出终点的方位角
        """
        return _gskernel.GsGeodesic_Direct(self, fromLongitude, fromLatitude, fromAzimuth, length12, toLongitude, toLatitude, toAzimuth)

    def Interpolation(self, fromLongitude: 'double', fromLatitude: 'double', toLongitude: 'double', toLatitude: 'double', t: 'double', Longitude: 'double *', Latitude: 'double *', Azimuth: 'double *'=None) -> "void":
        r"""
         寻找起点终点大圆上的t对应的点 :type fromLongitude: float
        :param fromLongitude: 开始点经度 :type fromLatitude: float
        :param fromLatitude: 开始点纬度度 :type toLongitude: float
        :param toLongitude: 终点经度 :type toLatitude: float
        :param toLatitude: 终点维度 :type t: float
        :param t: 参数0~1标示起点和终点，可以小于0或者大于1 :type Longitude: float
        :param Longitude: 插值点的经度 :type Latitude: float
        :param Latitude: 插值点的维度 :type Azimuth: float
        :param Azimuth: 插值点的方向角
        """
        return _gskernel.GsGeodesic_Interpolation(self, fromLongitude, fromLatitude, toLongitude, toLatitude, t, Longitude, Latitude, Azimuth)
    __swig_destroy__ = _gskernel.delete_GsGeodesic

# Register GsGeodesic in _gskernel:
_gskernel.GsGeodesic_swigregister(GsGeodesic)

class GsGeodesicLine(GsGeodesic):
    r""" 一根测地线，已经确定了起点终点的大地线"""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    eGEOD_NONE = _gskernel.GsGeodesicLine_eGEOD_NONE
    r""" Calculate nothing"""
    eGEOD_LATITUDE = _gskernel.GsGeodesicLine_eGEOD_LATITUDE
    r""" Calculate latitude"""
    eGEOD_LONGITUDE = _gskernel.GsGeodesicLine_eGEOD_LONGITUDE
    r""" Calculate longitude"""
    eGEOD_AZIMUTH = _gskernel.GsGeodesicLine_eGEOD_AZIMUTH
    r""" Calculate azimuth"""
    eGEOD_DISTANCE = _gskernel.GsGeodesicLine_eGEOD_DISTANCE
    r""" Calculate distance"""
    eGEOD_DISTANCE_IN = _gskernel.GsGeodesicLine_eGEOD_DISTANCE_IN
    r""" Allow distance as input"""
    eGEOD_REDUCEDLENGTH = _gskernel.GsGeodesicLine_eGEOD_REDUCEDLENGTH
    r""" Calculate reduced length"""
    eGEOD_GEODESICSCALE = _gskernel.GsGeodesicLine_eGEOD_GEODESICSCALE
    r""" Calculate geodesic scale"""
    eGEOD_AREA = _gskernel.GsGeodesicLine_eGEOD_AREA
    r""" Calculate reduced length"""
    eGEOD_ALL = _gskernel.GsGeodesicLine_eGEOD_ALL
    r""" Calculate everything"""

    def __init__(self, *args):
        r"""
        *Overload 1:*
        根据空间参考，起点的经纬度和方向角确定一根测地线

        |

        *Overload 2:*
        拷贝构造函数
        """
        _gskernel.GsGeodesicLine_swiginit(self, _gskernel.new_GsGeodesicLine(*args))

    def Position(self, distance: 'double', toLatitude: 'double *', toLongitude: 'double *', toAzimuth: 'double *'=None) -> "void":
        r"""
         赋值操作符 根据距离获得测地线上的点坐标 :type distance: float
        :param distance: 距离起点的距离，单位米 :type toLatitude: float
        :param toLatitude: 终点的经度 :type toLongitude: float
        :param toLongitude: 终点的纬度 :type toAzimuth: float
        :param toAzimuth: 终点的方位角
        """
        return _gskernel.GsGeodesicLine_Position(self, distance, toLatitude, toLongitude, toAzimuth)
    __swig_destroy__ = _gskernel.delete_GsGeodesicLine

# Register GsGeodesicLine in _gskernel:
_gskernel.GsGeodesicLine_swigregister(GsGeodesicLine)

class GsGeodesicPolygon(GsGeodesic):
    r""" 测地线多边形，以测地线构成的多边形"""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        r"""
        *Overload 1:*
        构造一个多边形或者Polyline

        |

        *Overload 2:*
        拷贝构造
        """
        _gskernel.GsGeodesicPolygon_swiginit(self, _gskernel.new_GsGeodesicPolygon(*args))

    def Reset(self) -> "void":
        r""" 赋值操作符 重置恢复到缺省状态"""
        return _gskernel.GsGeodesicPolygon_Reset(self)

    def AddPoint(self, lon: 'double', lat: 'double') -> "void":
        r"""
         增加一个边界点 :type lon: float
        :param lon: 经度 :type lat: float
        :param lat: 纬度
        """
        return _gskernel.GsGeodesicPolygon_AddPoint(self, lon, lat)

    def AddEdge(self, dblAzimuth: 'double', dblLen: 'double') -> "void":
        r""" 以方位角、长度增加一条边"""
        return _gskernel.GsGeodesicPolygon_AddEdge(self, dblAzimuth, dblLen)

    def Compute(self, bReverse: 'bool', bSign: 'bool', pArea: 'double *', pPerimeter: 'double *'=None) -> "unsigned int":
        r"""
         计算多边形的球面面积以及周长 :type bReverse: boolean
        :param bReverse: 是否反向，如果为true（反向）则认为逆时针多边形得到负的面积值。(标准积分面积逆时针方向的点返回正面积） :type bSign: boolean
        :param bSign:  是否带符号返回面积，如果时则在方向正确时返回正面积不正确时返回负面积， 否则将返回多边形外的地球面积。 :type pArea: float
        :param pArea:  当构造时使用非Polyline参数则返回球面面积，否则不返回 :type pPerimeter: float
        :param pPerimeter:    返回多边形或者polyline的周长 :rtype: int
        :return: 返回多边形或者折线有多少个点
        """
        return _gskernel.GsGeodesicPolygon_Compute(self, bReverse, bSign, pArea, pPerimeter)
    __swig_destroy__ = _gskernel.delete_GsGeodesicPolygon

# Register GsGeodesicPolygon in _gskernel:
_gskernel.GsGeodesicPolygon_swigregister(GsGeodesicPolygon)

class GsWGS84ToGCJ02CoordinateTransformation(GsCoordinateTransformation):
    r""" 从WGS84坐标系转GCJ02(火星）坐标系。 https://en.wikipedia.org/wiki/Restrictions_on_geographic_data_in_China"""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self):
        _gskernel.GsWGS84ToGCJ02CoordinateTransformation_swiginit(self, _gskernel.new_GsWGS84ToGCJ02CoordinateTransformation())

    @staticmethod
    def CanDowncast(b: 'GsCoordinateTransformation') -> "bool":
        return _gskernel.GsWGS84ToGCJ02CoordinateTransformation_CanDowncast(b)

    @staticmethod
    def DowncastTo(b: 'GsCoordinateTransformation') -> "GsSmarterPtr< GsWGS84ToGCJ02CoordinateTransformation >":
        return _gskernel.GsWGS84ToGCJ02CoordinateTransformation_DowncastTo(b)
    __swig_destroy__ = _gskernel.delete_GsWGS84ToGCJ02CoordinateTransformation

# Register GsWGS84ToGCJ02CoordinateTransformation in _gskernel:
_gskernel.GsWGS84ToGCJ02CoordinateTransformation_swigregister(GsWGS84ToGCJ02CoordinateTransformation)

def GsWGS84ToGCJ02CoordinateTransformation_CanDowncast(b: 'GsCoordinateTransformation') -> "bool":
    return _gskernel.GsWGS84ToGCJ02CoordinateTransformation_CanDowncast(b)

def GsWGS84ToGCJ02CoordinateTransformation_DowncastTo(b: 'GsCoordinateTransformation') -> "GsSmarterPtr< GsWGS84ToGCJ02CoordinateTransformation >":
    return _gskernel.GsWGS84ToGCJ02CoordinateTransformation_DowncastTo(b)

class GsGCJ02ToWGS84CoordinateTransformation(GsCoordinateTransformation):
    r""" 转从GCJ02(火星）坐标系反转为WGS84 https://en.wikipedia.org/wiki/Restrictions_on_geographic_data_in_China"""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, dblPrecision: 'double'):
        r"""
         从转换精度构造 :type dblPrecision: float
        :param dblPrecision: 反转的精确度，单位米
        """
        _gskernel.GsGCJ02ToWGS84CoordinateTransformation_swiginit(self, _gskernel.new_GsGCJ02ToWGS84CoordinateTransformation(dblPrecision))

    @staticmethod
    def CanDowncast(b: 'GsCoordinateTransformation') -> "bool":
        return _gskernel.GsGCJ02ToWGS84CoordinateTransformation_CanDowncast(b)

    @staticmethod
    def DowncastTo(b: 'GsCoordinateTransformation') -> "GsSmarterPtr< GsGCJ02ToWGS84CoordinateTransformation >":
        return _gskernel.GsGCJ02ToWGS84CoordinateTransformation_DowncastTo(b)
    __swig_destroy__ = _gskernel.delete_GsGCJ02ToWGS84CoordinateTransformation

# Register GsGCJ02ToWGS84CoordinateTransformation in _gskernel:
_gskernel.GsGCJ02ToWGS84CoordinateTransformation_swigregister(GsGCJ02ToWGS84CoordinateTransformation)

def GsGCJ02ToWGS84CoordinateTransformation_CanDowncast(b: 'GsCoordinateTransformation') -> "bool":
    return _gskernel.GsGCJ02ToWGS84CoordinateTransformation_CanDowncast(b)

def GsGCJ02ToWGS84CoordinateTransformation_DowncastTo(b: 'GsCoordinateTransformation') -> "GsSmarterPtr< GsGCJ02ToWGS84CoordinateTransformation >":
    return _gskernel.GsGCJ02ToWGS84CoordinateTransformation_DowncastTo(b)

class GsWGS84ToBD09CoordinateTransformation(GsWGS84ToGCJ02CoordinateTransformation):
    r""" 从WGS84坐标系转BD09(百度）坐标系。 https://en.wikipedia.org/wiki/Restrictions_on_geographic_data_in_China"""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self):
        _gskernel.GsWGS84ToBD09CoordinateTransformation_swiginit(self, _gskernel.new_GsWGS84ToBD09CoordinateTransformation())

    @staticmethod
    def CanDowncast(b: 'GsWGS84ToGCJ02CoordinateTransformation') -> "bool":
        return _gskernel.GsWGS84ToBD09CoordinateTransformation_CanDowncast(b)

    @staticmethod
    def DowncastTo(b: 'GsWGS84ToGCJ02CoordinateTransformation') -> "GsSmarterPtr< GsWGS84ToBD09CoordinateTransformation >":
        return _gskernel.GsWGS84ToBD09CoordinateTransformation_DowncastTo(b)
    __swig_destroy__ = _gskernel.delete_GsWGS84ToBD09CoordinateTransformation

# Register GsWGS84ToBD09CoordinateTransformation in _gskernel:
_gskernel.GsWGS84ToBD09CoordinateTransformation_swigregister(GsWGS84ToBD09CoordinateTransformation)

def GsWGS84ToBD09CoordinateTransformation_CanDowncast(b: 'GsWGS84ToGCJ02CoordinateTransformation') -> "bool":
    return _gskernel.GsWGS84ToBD09CoordinateTransformation_CanDowncast(b)

def GsWGS84ToBD09CoordinateTransformation_DowncastTo(b: 'GsWGS84ToGCJ02CoordinateTransformation') -> "GsSmarterPtr< GsWGS84ToBD09CoordinateTransformation >":
    return _gskernel.GsWGS84ToBD09CoordinateTransformation_DowncastTo(b)

class GsBD09ToWGS84CoordinateTransformation(GsGCJ02ToWGS84CoordinateTransformation):
    r""" 转从BD09(百度）坐标系反转为WGS84 https://en.wikipedia.org/wiki/Restrictions_on_geographic_data_in_China"""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, dblPrecision: 'double'):
        r"""
         从转换精度构造 :type dblPrecision: float
        :param dblPrecision: 反转的精确度，单位米
        """
        _gskernel.GsBD09ToWGS84CoordinateTransformation_swiginit(self, _gskernel.new_GsBD09ToWGS84CoordinateTransformation(dblPrecision))

    @staticmethod
    def CanDowncast(b: 'GsGCJ02ToWGS84CoordinateTransformation') -> "bool":
        return _gskernel.GsBD09ToWGS84CoordinateTransformation_CanDowncast(b)

    @staticmethod
    def DowncastTo(b: 'GsGCJ02ToWGS84CoordinateTransformation') -> "GsSmarterPtr< GsBD09ToWGS84CoordinateTransformation >":
        return _gskernel.GsBD09ToWGS84CoordinateTransformation_DowncastTo(b)
    __swig_destroy__ = _gskernel.delete_GsBD09ToWGS84CoordinateTransformation

# Register GsBD09ToWGS84CoordinateTransformation in _gskernel:
_gskernel.GsBD09ToWGS84CoordinateTransformation_swigregister(GsBD09ToWGS84CoordinateTransformation)

def GsBD09ToWGS84CoordinateTransformation_CanDowncast(b: 'GsGCJ02ToWGS84CoordinateTransformation') -> "bool":
    return _gskernel.GsBD09ToWGS84CoordinateTransformation_CanDowncast(b)

def GsBD09ToWGS84CoordinateTransformation_DowncastTo(b: 'GsGCJ02ToWGS84CoordinateTransformation') -> "GsSmarterPtr< GsBD09ToWGS84CoordinateTransformation >":
    return _gskernel.GsBD09ToWGS84CoordinateTransformation_DowncastTo(b)

class GsCoordinatePrecision(GsRefObject):
    r""" 坐标精度转换"""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _gskernel.delete_GsCoordinatePrecision

    def PrecisionToCoordinatePrecision(self, x: 'double', y: 'double', dblPrecision: 'double') -> "double":
        r""" 计算输入坐标附近此距离精度下几何坐标距离 以经纬度坐标为例，当距离精度为0.1米时，如果y坐标为赤道坐标（0度）则几何坐标距离为8.9e-6度 如果y坐标为(45度）则几何坐标距离为1.7e-5度"""
        return _gskernel.GsCoordinatePrecision_PrecisionToCoordinatePrecision(self, x, y, dblPrecision)

# Register GsCoordinatePrecision in _gskernel:
_gskernel.GsCoordinatePrecision_swigregister(GsCoordinatePrecision)

eBursa7Parameter = _gskernel.eBursa7Parameter
ePlane4Parameter = _gskernel.ePlane4Parameter
eMolodensky7Parameter = _gskernel.eMolodensky7Parameter
eCube4Parameter = _gskernel.eCube4Parameter
class GsCoordinateTransformationFactory(object):
    r""" 坐标转换类厂 源坐标系与坐标系之间不得跨坐标系 源坐标系为北京54系,则目标坐标系可以为80系,但不能为2000系 例如:Beijing54Ellipsoid<===>Xian80Ellipsoid或者Xian80Ellipsoid<===>China2000Ellipsoid Create......Transformation创建坐标转换对象 Compute.....Parameter计算转换参数"""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    @staticmethod
    def CreateProjectCoordinateTransformation(pSource: 'GsSpatialReference', pTarget: 'GsSpatialReference') -> "GsSmarterPtr< GsCoordinateTransformation >":
        r""" 从源和目标的空间参考生成投影坐标转换对象 :param pSource源空间参考: :param pTarget目标空间参考:"""
        return _gskernel.GsCoordinateTransformationFactory_CreateProjectCoordinateTransformation(pSource, pTarget)

    @staticmethod
    def CreateParameterProjectCoordinateTransformation(pSource: 'GsSpatialReference', pTarget: 'GsSpatialReference', eMethod: 'GsCoordinateTransformationMethod', pParam: 'double *') -> "GsSmarterPtr< GsCoordinateTransformation >":
        r""" 生成参数化的投影坐标转换对象 :param pSource源空间参考: :param pTarget目标空间参考: :param eMethod坐标转换方法:, :param pParam坐标转换参数:"""
        return _gskernel.GsCoordinateTransformationFactory_CreateParameterProjectCoordinateTransformation(pSource, pTarget, eMethod, pParam)

    @staticmethod
    def CreateAffineCoordinateTransformation(pSourcePoint: 'double *', pTargetPoint: 'double *', nLen: 'int') -> "GsSmarterPtr< GsCoordinateTransformation >":
        r""" 生成仿射坐标转换对象 :param pSourcePoint源同名点数组: :param pTargetPoint目标同名点数组: :param nLen源和目标同名点数组长度,最低需要3个点的坐标,即nLen为6:"""
        return _gskernel.GsCoordinateTransformationFactory_CreateAffineCoordinateTransformation(pSourcePoint, pTargetPoint, nLen)

    @staticmethod
    def CreateWGS84ToGCJ02CoordinateTransformation() -> "GsSmarterPtr< GsCoordinateTransformation >":
        r""" 生成WGS84到GCJ02坐标转换对象"""
        return _gskernel.GsCoordinateTransformationFactory_CreateWGS84ToGCJ02CoordinateTransformation()

    @staticmethod
    def CreateGCJ02ToWGS84CoordinateTransformation(dblPrecision: 'double') -> "GsSmarterPtr< GsCoordinateTransformation >":
        r"""
         生成GCJ02到WGS84坐标转换对象 :type dblPrecision: float
        :param dblPrecision: 反转的精确度，单位米
        """
        return _gskernel.GsCoordinateTransformationFactory_CreateGCJ02ToWGS84CoordinateTransformation(dblPrecision)

    @staticmethod
    def CreateWGS84ToBD09CoordinateTransformation() -> "GsSmarterPtr< GsCoordinateTransformation >":
        r""" 生成WGS84到BD09坐标转换对象"""
        return _gskernel.GsCoordinateTransformationFactory_CreateWGS84ToBD09CoordinateTransformation()

    @staticmethod
    def CreateBD09ToWGS84CoordinateTransformation(dblPrecision: 'double') -> "GsSmarterPtr< GsCoordinateTransformation >":
        r"""
         生成BD09到WGS84坐标转换对象 :type dblPrecision: float
        :param dblPrecision: 反转的精确度，单位米
        """
        return _gskernel.GsCoordinateTransformationFactory_CreateBD09ToWGS84CoordinateTransformation(dblPrecision)

    @staticmethod
    def CreateConverseCoordinateTransformation(pForwardTrans: 'GsCoordinateTransformation', pCoordPreTrans: 'GsCoordinatePrecision', dblPrecision: 'double') -> "GsSmarterPtr< GsCoordinateTransformation >":
        r""" 生成非线性变换或数学上无法直接可逆的逆坐标转换对象 单向坐标转换方向上为非线性坐标转换无法简单通过仿射变换进行逆转换 单向坐标转换公式为不可逆算法如果采用仿射变换会存在大量同名点计算仿射变换参数导致逆转换性能低 本转换通过指定正向转换的算法和距离计算算法实现快速收敛，保证逆转换性能高并且精度也能达到预期。 本转换适合单向转换公式确定并且精度确定的情况，如果双向坐标转换都无法精确确定则不适用本转换对象"""
        return _gskernel.GsCoordinateTransformationFactory_CreateConverseCoordinateTransformation(pForwardTrans, pCoordPreTrans, dblPrecision)

    @staticmethod
    def CreateGeodeticToGeocentricCoordinateTransformation(CoordinateSystem: 'GsSpatialReference') -> "GsSmarterPtr< GsCoordinateTransformation >":
        r""" 生成大地坐标到地心坐标转换对象 :param CoordinateSystem坐标数据所在的空间参考:"""
        return _gskernel.GsCoordinateTransformationFactory_CreateGeodeticToGeocentricCoordinateTransformation(CoordinateSystem)

    @staticmethod
    def CreateGeocentricToGeodeticCoordinateTransformation(CoordinateSystem: 'GsSpatialReference') -> "GsSmarterPtr< GsCoordinateTransformation >":
        r""" 生成地心坐标到大地坐标转换对象 :param CoordinateSystem坐标数据所在的空间参考:"""
        return _gskernel.GsCoordinateTransformationFactory_CreateGeocentricToGeodeticCoordinateTransformation(CoordinateSystem)

    @staticmethod
    def ComputePlane4Parameter(nPointCount: 'int', nDim: 'int', SourcePoint: 'double const *', TargetPoint: 'double const *', Param: 'double *') -> "double":
        r""" 计算二维4参数 :param nPointCount为同名点个数: :param nDim为点坐标维度: :param SourcePoint为数组,存入源坐标系的同名点坐标值(x1,y1,x2,y2....): :param TargetPoint为数组,存入目标坐标系的同名点坐标值(x1,y1,x2,y2....): :param Param为长度为4的数组,依次存入2个平移参数x0,y0,单位为米;一个旋转参数an,单位为秒;一个尺度参数,单位为ppm: :param Mp为计算得中误差残差值,按照规范Mp值不超过比例尺分母的万分之一(0.0001*MapScale):"""
        return _gskernel.GsCoordinateTransformationFactory_ComputePlane4Parameter(nPointCount, nDim, SourcePoint, TargetPoint, Param)

    @staticmethod
    def CreatePlane4PatameterCoordinateTransformation(P4Param: 'double const *') -> "GsSmarterPtr< GsCoordinateTransformation >":
        r""" 生成二维4参数模型坐标转换对象 :param P4Param为长度为4的数组，依次存入二维4参数(包括2个平移参数x0,y0,单位为米;一个旋转参数an,单位为秒;一个尺度参数,单位为ppm):"""
        return _gskernel.GsCoordinateTransformationFactory_CreatePlane4PatameterCoordinateTransformation(P4Param)

    @staticmethod
    def ComputeCube4Parameter(pSource: 'GsSpatialReference', pTarget: 'GsSpatialReference', B0: 'double', L0: 'double', nPointCount: 'int', nDim: 'int', SourcePoint: 'double const *', TargetPoint: 'double const *', Param: 'double *') -> "double":
        r""" 计算三维4参数 :param B0,L0所在区域中心点的经纬度坐标值: :param nPointCount为同名点个数: :param nDim为点坐标维度: :param SourcePoint为数组,存入源坐标系的同名点坐标值(x1,y1,z1,x2,y2,z2....): :param TargetPoint为数组,存入目标坐标系的同名点坐标值(x1,y1,z1,x2,y2,z2....): :param Param为长度为4的数组,依次存入3个平移参数x0,y0,z0,单位为米;一个旋转参数an,单位为秒: :param Mp为计算得中误差残差值,按照规范Mp值不超过比例尺分母的万分之一(0.0001*MapScale):"""
        return _gskernel.GsCoordinateTransformationFactory_ComputeCube4Parameter(pSource, pTarget, B0, L0, nPointCount, nDim, SourcePoint, TargetPoint, Param)

    @staticmethod
    def CreateCube4PatameterCoordinateTransformation(pSource: 'GsSpatialReference', pTarget: 'GsSpatialReference', B0: 'double', L0: 'double', P4Param: 'double const *') -> "GsSmarterPtr< GsCoordinateTransformation >":
        r""" 生成三维4参数模型坐标转换对象 :param B0,L0所在区域中心点的经纬度坐标值: :param P4Param为长度为4的数组，依次存入二维4参数(包括3个平移参数x0,y0,z0,单位为米;一个旋转参数an,单位为秒):"""
        return _gskernel.GsCoordinateTransformationFactory_CreateCube4PatameterCoordinateTransformation(pSource, pTarget, B0, L0, P4Param)

    @staticmethod
    def CreatePlaneFittingCoordinateTransformation(nPoint: 'int', nDim: 'int', SourcePoint: 'double const *', TargetPoint: 'double const *') -> "GsSmarterPtr< GsCoordinateTransformation >":
        r""" 创建平面拟合的坐标转换对象 :param nPoint为同名点个数: :param nDim为点坐标维度: :param SourcePoint为数组,存入源坐标系的同名点坐标值(x1,y1,x2,y2....): :param TargetPoint为数组,存入目标坐标系的同名点坐标值(x1,y1,x2,y2....):"""
        return _gskernel.GsCoordinateTransformationFactory_CreatePlaneFittingCoordinateTransformation(nPoint, nDim, SourcePoint, TargetPoint)

    @staticmethod
    def CreateGeoidFittingCoordinateTransformation(pSource: 'GsSpatialReference', pTarget: 'GsSpatialReference', nPoint: 'int', nDim: 'int', SourcePoint: 'double const *', TargetPoint: 'double const *') -> "GsSmarterPtr< GsCoordinateTransformation >":
        r""" 创建椭球面拟合的坐标的转换对象 :param nPoint为同名点个数: :param nDim为点坐标维度: :param SourcePoint为数组,存入源坐标系的同名点坐标: :param TargetPoint为数组,存入目标坐标系的同名点坐标:"""
        return _gskernel.GsCoordinateTransformationFactory_CreateGeoidFittingCoordinateTransformation(pSource, pTarget, nPoint, nDim, SourcePoint, TargetPoint)

    @staticmethod
    def ComputePlane7Parameter(pSource: 'GsSpatialReference', pTarget: 'GsSpatialReference', nPointCount: 'int', nDim: 'int', SourcePoint: 'double const *', TargetPoint: 'double const *', Param: 'double *') -> "double":
        r""" 计算二维7参数 :param nPointCount为同名点个数: :param nDim为点坐标维度: :param pSource,pTarget源和目标的空间参考: :param SourcePoint为数组,存入源坐标系的同名点坐标: :param TargetPoint为数组,存入目标坐标系的同名点坐标: :param Param为长度为7的数组,依次存入3个平移参数dx,dy,dz,单位为米,3个旋转参数anx,any,anz,单位为秒;一个尺度参数,单位为ppm: :param Mp为计算得中误差残差值,按照规范Mp值不超过比例尺分母的万分之一(0.0001*MapScale):"""
        return _gskernel.GsCoordinateTransformationFactory_ComputePlane7Parameter(pSource, pTarget, nPointCount, nDim, SourcePoint, TargetPoint, Param)

    @staticmethod
    def CreatePlane7PatameterCoordinateTransformation(pSource: 'GsSpatialReference', pTarget: 'GsSpatialReference', P7Param: 'double const *') -> "GsSmarterPtr< GsCoordinateTransformation >":
        r""" 生成二维7参数模型坐标转换对象 :param P7Param为长度为7的数组,依次存入二维7参数(3个平移参数dx,dy,dz,单位为米,3个旋转参数anx,any,anz,单位为秒;一个尺度参数,单位为ppm): :param pSource源空间参考: :param pTarget目标空间参考:"""
        return _gskernel.GsCoordinateTransformationFactory_CreatePlane7PatameterCoordinateTransformation(pSource, pTarget, P7Param)

    @staticmethod
    def ComputePlane7Parameter3D(Source: 'GsSpatialReference', Target: 'GsSpatialReference', nPointCount: 'int', nDim: 'int', SourcePoint: 'double const *', TargetPoint: 'double const *', Param: 'double *') -> "double":
        r""" 计算三维7参数 :param nPointCount为同名点个数: :param nDim为点坐标维度: :param pSource,pTarget源和目标的空间参考: :param SourcePoint为数组,存入源坐标系的同名点坐标: :param TargetPoint为数组,存入目标坐标系的同名点坐标: :param Param为长度为7的数组,依次存入3个平移参数dx,dy,dz,单位为米,3个旋转参数anx,any,anz,单位为秒;一个尺度参数,单位为ppm: :param Mp为计算得中误差残差值,按照规范Mp值不超过比例尺分母的万分之一(0.0001*MapScale):"""
        return _gskernel.GsCoordinateTransformationFactory_ComputePlane7Parameter3D(Source, Target, nPointCount, nDim, SourcePoint, TargetPoint, Param)

    @staticmethod
    def Create3DPlane7PatameterCoordinateTransformation(pSource: 'GsSpatialReference', pTarget: 'GsSpatialReference', P7Param: 'double const *') -> "GsSmarterPtr< GsCoordinateTransformation >":
        r""" 生成三维7参数模型坐标转换对象 :param P7Param为长度为7的数组,依次存入二维7参数(3个平移参数dx,dy,dz,单位为米,3个旋转参数anx,any,anz,单位为秒;一个尺度参数,单位为ppm): :param pSource源空间参考: :param pTarget目标空间参考:"""
        return _gskernel.GsCoordinateTransformationFactory_Create3DPlane7PatameterCoordinateTransformation(pSource, pTarget, P7Param)

    @staticmethod
    def ComputeBursa7Parameter(Source: 'GsSpatialReference', Target: 'GsSpatialReference', nPointCount: 'int', nDim: 'int', SourcePoint: 'double const *', TargetPoint: 'double const *', Param: 'double *') -> "double":
        r""" 计算Bursa7参数 :param nPointCount为同名点个数: :param nDim为点坐标维度: :param SourcePoint为数组,存入源坐标系的同名点坐标: :param TargetPoint为数组,存入目标坐标系的同名点坐标:  :param Param为长度为7的数组,依次为3个平移参数dx,dy,dz,单位为米,3个旋转参数anx,any,anz,单位为秒;一个尺度参数,单位为ppm: :param Mp为计算得中误差残差值,按照规范Mp值不超过比例尺分母的万分之一(0.0001*MapScale):"""
        return _gskernel.GsCoordinateTransformationFactory_ComputeBursa7Parameter(Source, Target, nPointCount, nDim, SourcePoint, TargetPoint, Param)

    @staticmethod
    def CreateBursa7CoordinateTransformation(pSource: 'GsSpatialReference', pTarget: 'GsSpatialReference', P7Param: 'double const *') -> "GsSmarterPtr< GsCoordinateTransformation >":
        r""" 使用Bursa7参数模型生成坐标转换对象 :param P7Param为长度为7的数组,依次存入Bursa7参数(3个平移参数dx,dy,dz,单位为米,3个旋转参数anx,any,anz,单位为秒;一个尺度参数,单位为ppm): :param pSource源空间参考: :param pTarget目标空间参考:"""
        return _gskernel.GsCoordinateTransformationFactory_CreateBursa7CoordinateTransformation(pSource, pTarget, P7Param)

    @staticmethod
    def ComputeMolodenskyParameter(Source: 'GsSpatialReference', Target: 'GsSpatialReference', nPointCount: 'int', nDim: 'int', SourcePoint: 'double const *', TargetPoint: 'double const *', Param: 'double *', P: 'double const *'=None) -> "double":
        r""" 计算Molodensky7参数 :param nPointCount为同名点个数: :param nDim为点坐标维度: :param SourcePoint为数组,存入源坐标系的同名点坐标值: :param TargetPoint为数组,存入目标坐标系的同名点坐标值: :param Param为长度为7的数组,依次为3个平移参数dx,dy,dz,单位为米,3个旋转参数anx,any,anz,单位为秒;一个尺度参数,单位为ppm: :param Mp为计算得中误差残差值,按照规范Mp值不超过比例尺分母的万分之一(0.0001*MapScale):"""
        return _gskernel.GsCoordinateTransformationFactory_ComputeMolodenskyParameter(Source, Target, nPointCount, nDim, SourcePoint, TargetPoint, Param, P)

    @staticmethod
    def CreateMolodenskyCoordinateTransformation(pSource: 'GsSpatialReference', pTarget: 'GsSpatialReference', P7Param: 'double const *', P0: 'double const *') -> "GsSmarterPtr< GsCoordinateTransformation >":
        r""" 使用Molodensky参数模型生成坐标转换对象 :param P7Param为长度为7的数组,依次存入Bursa7参数(3个平移参数dx,dy,dz,单位为米,3个旋转参数anx,any,anz,单位为秒;一个尺度参数,单位为ppm): :param P0为过渡点坐标，传空则默认为地心原点坐标(0,0,0):"""
        return _gskernel.GsCoordinateTransformationFactory_CreateMolodenskyCoordinateTransformation(pSource, pTarget, P7Param, P0)

    @staticmethod
    def ComputeReverseParameter(paramtype: 'GsParameterType', param: 'double const *', result: 'double *', otherparam: 'double const *') -> "void":
        r"""
         反解参数 :type paramtype: int
        :param paramtype: 参数类型 :param param为数组,参数值: :param result为数组,存入反解的参数值: :param otherparam为数组，存入反解依赖的其他参数，如反解三维4参数时，依次存入区域中心点的B0,L0:
        """
        return _gskernel.GsCoordinateTransformationFactory_ComputeReverseParameter(paramtype, param, result, otherparam)

    @staticmethod
    def ComputeGridCoordinatesOffset(pGridCoord: 'double const *', nGridPointCount: 'int', range: 'double', pCoord: 'double *', nPointCount: 'int', pOffset: 'double *', pResOffset: 'double *') -> "void":
        r"""
         计算网格坐标改正值，使用移动坐标转换法，改正量 反距离加权平均 :param pGridCoord坐标网格坐标，数量: :param range移动搜索半径: :param pCoord控制点坐标: LB :type nPointCount: int
        :param nPointCount: 控制点数 :param Offset: 与控制点对应的坐标改正两
        """
        return _gskernel.GsCoordinateTransformationFactory_ComputeGridCoordinatesOffset(pGridCoord, nGridPointCount, range, pCoord, nPointCount, pOffset, pResOffset)

    @staticmethod
    def CreateGraphsInterpolationCoordinateTransformation(*args) -> "GsSmarterPtr< GsCoordinateTransformation >":
        r"""
        *Overload 1:*
         生成基于方里网格内双线性内插方法的大地坐标转换对象 :param pSource,pTarget源和目标的空间参考: :param BL为方里网格点坐标，经纬度: :type Offset: float
        :param Offset: 经计算返回与BL数组对应的经纬度改正值 :type nGridPointCount: int
        :param nGridPointCount: 方里网格点坐标个数，可以为多个网格，但是网格必须是连通的

        |

        *Overload 2:*
         生成基于方里网格内双线性内插方法的大地坐标转换对象 :param BL为方里网格点坐标，经纬度: :type Offset: float
        :param Offset: 经计算返回与BL数组对应的经纬度改正值 :type nGridPointCount: int
        :param nGridPointCount: 方里网格点坐标个数，可以为多个网格，但是网格必须是连通的

        |

        *Overload 3:*
         生成基于方里网格内双线性内插方法的大地坐标转换对象 :param BL为方里网格点坐标，经纬度: :type Offset: float
        :param Offset: 经计算返回与BL数组对应的经纬度改正值 :param nGridPointCount: 方里网格点坐标个数，可以为多个网格，但是网格必须是连通的

        |

        *Overload 4:*
         计算网格坐标改正值，使用移动坐标转换法，改正量 反距离加权平均 :param pSource,pTarget源和目标的空间参考: :param pGridCoord坐标网格点坐标: :param nPointCount坐标网格点数量: :param range移动搜索半径: :param pCoord控制点坐标:  :type nPointCount: int
        :param nPointCount: 控制点数 :param Offset: 与控制点对应的坐标改正量
        """
        return _gskernel.GsCoordinateTransformationFactory_CreateGraphsInterpolationCoordinateTransformation(*args)

    @staticmethod
    def ComputeGeodeticCoordinatesOffset(Source: 'GsSpatialReference', Target: 'GsSpatialReference', pParam: 'double const *', BL: 'double *', nPointCount: 'int', Offset: 'double *') -> "void":
        r"""
         计算大地坐标改正值 :param pSource,pTarget源和目标的空间参考: :param pParam坐标转换的七参数: :param BL为待转换的经纬度坐标: :param nPointCount坐标个数: :type Offset: float
        :param Offset: 经计算返回与BL数组对应的经纬度改正值
        """
        return _gskernel.GsCoordinateTransformationFactory_ComputeGeodeticCoordinatesOffset(Source, Target, pParam, BL, nPointCount, Offset)

    def __init__(self):
        _gskernel.GsCoordinateTransformationFactory_swiginit(self, _gskernel.new_GsCoordinateTransformationFactory())
    __swig_destroy__ = _gskernel.delete_GsCoordinateTransformationFactory

# Register GsCoordinateTransformationFactory in _gskernel:
_gskernel.GsCoordinateTransformationFactory_swigregister(GsCoordinateTransformationFactory)

def GsCoordinateTransformationFactory_CreateProjectCoordinateTransformation(pSource: 'GsSpatialReference', pTarget: 'GsSpatialReference') -> "GsSmarterPtr< GsCoordinateTransformation >":
    r""" 从源和目标的空间参考生成投影坐标转换对象 :param pSource源空间参考: :param pTarget目标空间参考:"""
    return _gskernel.GsCoordinateTransformationFactory_CreateProjectCoordinateTransformation(pSource, pTarget)

def GsCoordinateTransformationFactory_CreateParameterProjectCoordinateTransformation(pSource: 'GsSpatialReference', pTarget: 'GsSpatialReference', eMethod: 'GsCoordinateTransformationMethod', pParam: 'double *') -> "GsSmarterPtr< GsCoordinateTransformation >":
    r""" 生成参数化的投影坐标转换对象 :param pSource源空间参考: :param pTarget目标空间参考: :param eMethod坐标转换方法:, :param pParam坐标转换参数:"""
    return _gskernel.GsCoordinateTransformationFactory_CreateParameterProjectCoordinateTransformation(pSource, pTarget, eMethod, pParam)

def GsCoordinateTransformationFactory_CreateAffineCoordinateTransformation(pSourcePoint: 'double *', pTargetPoint: 'double *', nLen: 'int') -> "GsSmarterPtr< GsCoordinateTransformation >":
    r""" 生成仿射坐标转换对象 :param pSourcePoint源同名点数组: :param pTargetPoint目标同名点数组: :param nLen源和目标同名点数组长度,最低需要3个点的坐标,即nLen为6:"""
    return _gskernel.GsCoordinateTransformationFactory_CreateAffineCoordinateTransformation(pSourcePoint, pTargetPoint, nLen)

def GsCoordinateTransformationFactory_CreateWGS84ToGCJ02CoordinateTransformation() -> "GsSmarterPtr< GsCoordinateTransformation >":
    r""" 生成WGS84到GCJ02坐标转换对象"""
    return _gskernel.GsCoordinateTransformationFactory_CreateWGS84ToGCJ02CoordinateTransformation()

def GsCoordinateTransformationFactory_CreateGCJ02ToWGS84CoordinateTransformation(dblPrecision: 'double') -> "GsSmarterPtr< GsCoordinateTransformation >":
    r"""
     生成GCJ02到WGS84坐标转换对象 :type dblPrecision: float
    :param dblPrecision: 反转的精确度，单位米
    """
    return _gskernel.GsCoordinateTransformationFactory_CreateGCJ02ToWGS84CoordinateTransformation(dblPrecision)

def GsCoordinateTransformationFactory_CreateWGS84ToBD09CoordinateTransformation() -> "GsSmarterPtr< GsCoordinateTransformation >":
    r""" 生成WGS84到BD09坐标转换对象"""
    return _gskernel.GsCoordinateTransformationFactory_CreateWGS84ToBD09CoordinateTransformation()

def GsCoordinateTransformationFactory_CreateBD09ToWGS84CoordinateTransformation(dblPrecision: 'double') -> "GsSmarterPtr< GsCoordinateTransformation >":
    r"""
     生成BD09到WGS84坐标转换对象 :type dblPrecision: float
    :param dblPrecision: 反转的精确度，单位米
    """
    return _gskernel.GsCoordinateTransformationFactory_CreateBD09ToWGS84CoordinateTransformation(dblPrecision)

def GsCoordinateTransformationFactory_CreateConverseCoordinateTransformation(pForwardTrans: 'GsCoordinateTransformation', pCoordPreTrans: 'GsCoordinatePrecision', dblPrecision: 'double') -> "GsSmarterPtr< GsCoordinateTransformation >":
    r""" 生成非线性变换或数学上无法直接可逆的逆坐标转换对象 单向坐标转换方向上为非线性坐标转换无法简单通过仿射变换进行逆转换 单向坐标转换公式为不可逆算法如果采用仿射变换会存在大量同名点计算仿射变换参数导致逆转换性能低 本转换通过指定正向转换的算法和距离计算算法实现快速收敛，保证逆转换性能高并且精度也能达到预期。 本转换适合单向转换公式确定并且精度确定的情况，如果双向坐标转换都无法精确确定则不适用本转换对象"""
    return _gskernel.GsCoordinateTransformationFactory_CreateConverseCoordinateTransformation(pForwardTrans, pCoordPreTrans, dblPrecision)

def GsCoordinateTransformationFactory_CreateGeodeticToGeocentricCoordinateTransformation(CoordinateSystem: 'GsSpatialReference') -> "GsSmarterPtr< GsCoordinateTransformation >":
    r""" 生成大地坐标到地心坐标转换对象 :param CoordinateSystem坐标数据所在的空间参考:"""
    return _gskernel.GsCoordinateTransformationFactory_CreateGeodeticToGeocentricCoordinateTransformation(CoordinateSystem)

def GsCoordinateTransformationFactory_CreateGeocentricToGeodeticCoordinateTransformation(CoordinateSystem: 'GsSpatialReference') -> "GsSmarterPtr< GsCoordinateTransformation >":
    r""" 生成地心坐标到大地坐标转换对象 :param CoordinateSystem坐标数据所在的空间参考:"""
    return _gskernel.GsCoordinateTransformationFactory_CreateGeocentricToGeodeticCoordinateTransformation(CoordinateSystem)

def GsCoordinateTransformationFactory_ComputePlane4Parameter(nPointCount: 'int', nDim: 'int', SourcePoint: 'double const *', TargetPoint: 'double const *', Param: 'double *') -> "double":
    r""" 计算二维4参数 :param nPointCount为同名点个数: :param nDim为点坐标维度: :param SourcePoint为数组,存入源坐标系的同名点坐标值(x1,y1,x2,y2....): :param TargetPoint为数组,存入目标坐标系的同名点坐标值(x1,y1,x2,y2....): :param Param为长度为4的数组,依次存入2个平移参数x0,y0,单位为米;一个旋转参数an,单位为秒;一个尺度参数,单位为ppm: :param Mp为计算得中误差残差值,按照规范Mp值不超过比例尺分母的万分之一(0.0001*MapScale):"""
    return _gskernel.GsCoordinateTransformationFactory_ComputePlane4Parameter(nPointCount, nDim, SourcePoint, TargetPoint, Param)

def GsCoordinateTransformationFactory_CreatePlane4PatameterCoordinateTransformation(P4Param: 'double const *') -> "GsSmarterPtr< GsCoordinateTransformation >":
    r""" 生成二维4参数模型坐标转换对象 :param P4Param为长度为4的数组，依次存入二维4参数(包括2个平移参数x0,y0,单位为米;一个旋转参数an,单位为秒;一个尺度参数,单位为ppm):"""
    return _gskernel.GsCoordinateTransformationFactory_CreatePlane4PatameterCoordinateTransformation(P4Param)

def GsCoordinateTransformationFactory_ComputeCube4Parameter(pSource: 'GsSpatialReference', pTarget: 'GsSpatialReference', B0: 'double', L0: 'double', nPointCount: 'int', nDim: 'int', SourcePoint: 'double const *', TargetPoint: 'double const *', Param: 'double *') -> "double":
    r""" 计算三维4参数 :param B0,L0所在区域中心点的经纬度坐标值: :param nPointCount为同名点个数: :param nDim为点坐标维度: :param SourcePoint为数组,存入源坐标系的同名点坐标值(x1,y1,z1,x2,y2,z2....): :param TargetPoint为数组,存入目标坐标系的同名点坐标值(x1,y1,z1,x2,y2,z2....): :param Param为长度为4的数组,依次存入3个平移参数x0,y0,z0,单位为米;一个旋转参数an,单位为秒: :param Mp为计算得中误差残差值,按照规范Mp值不超过比例尺分母的万分之一(0.0001*MapScale):"""
    return _gskernel.GsCoordinateTransformationFactory_ComputeCube4Parameter(pSource, pTarget, B0, L0, nPointCount, nDim, SourcePoint, TargetPoint, Param)

def GsCoordinateTransformationFactory_CreateCube4PatameterCoordinateTransformation(pSource: 'GsSpatialReference', pTarget: 'GsSpatialReference', B0: 'double', L0: 'double', P4Param: 'double const *') -> "GsSmarterPtr< GsCoordinateTransformation >":
    r""" 生成三维4参数模型坐标转换对象 :param B0,L0所在区域中心点的经纬度坐标值: :param P4Param为长度为4的数组，依次存入二维4参数(包括3个平移参数x0,y0,z0,单位为米;一个旋转参数an,单位为秒):"""
    return _gskernel.GsCoordinateTransformationFactory_CreateCube4PatameterCoordinateTransformation(pSource, pTarget, B0, L0, P4Param)

def GsCoordinateTransformationFactory_CreatePlaneFittingCoordinateTransformation(nPoint: 'int', nDim: 'int', SourcePoint: 'double const *', TargetPoint: 'double const *') -> "GsSmarterPtr< GsCoordinateTransformation >":
    r""" 创建平面拟合的坐标转换对象 :param nPoint为同名点个数: :param nDim为点坐标维度: :param SourcePoint为数组,存入源坐标系的同名点坐标值(x1,y1,x2,y2....): :param TargetPoint为数组,存入目标坐标系的同名点坐标值(x1,y1,x2,y2....):"""
    return _gskernel.GsCoordinateTransformationFactory_CreatePlaneFittingCoordinateTransformation(nPoint, nDim, SourcePoint, TargetPoint)

def GsCoordinateTransformationFactory_CreateGeoidFittingCoordinateTransformation(pSource: 'GsSpatialReference', pTarget: 'GsSpatialReference', nPoint: 'int', nDim: 'int', SourcePoint: 'double const *', TargetPoint: 'double const *') -> "GsSmarterPtr< GsCoordinateTransformation >":
    r""" 创建椭球面拟合的坐标的转换对象 :param nPoint为同名点个数: :param nDim为点坐标维度: :param SourcePoint为数组,存入源坐标系的同名点坐标: :param TargetPoint为数组,存入目标坐标系的同名点坐标:"""
    return _gskernel.GsCoordinateTransformationFactory_CreateGeoidFittingCoordinateTransformation(pSource, pTarget, nPoint, nDim, SourcePoint, TargetPoint)

def GsCoordinateTransformationFactory_ComputePlane7Parameter(pSource: 'GsSpatialReference', pTarget: 'GsSpatialReference', nPointCount: 'int', nDim: 'int', SourcePoint: 'double const *', TargetPoint: 'double const *', Param: 'double *') -> "double":
    r""" 计算二维7参数 :param nPointCount为同名点个数: :param nDim为点坐标维度: :param pSource,pTarget源和目标的空间参考: :param SourcePoint为数组,存入源坐标系的同名点坐标: :param TargetPoint为数组,存入目标坐标系的同名点坐标: :param Param为长度为7的数组,依次存入3个平移参数dx,dy,dz,单位为米,3个旋转参数anx,any,anz,单位为秒;一个尺度参数,单位为ppm: :param Mp为计算得中误差残差值,按照规范Mp值不超过比例尺分母的万分之一(0.0001*MapScale):"""
    return _gskernel.GsCoordinateTransformationFactory_ComputePlane7Parameter(pSource, pTarget, nPointCount, nDim, SourcePoint, TargetPoint, Param)

def GsCoordinateTransformationFactory_CreatePlane7PatameterCoordinateTransformation(pSource: 'GsSpatialReference', pTarget: 'GsSpatialReference', P7Param: 'double const *') -> "GsSmarterPtr< GsCoordinateTransformation >":
    r""" 生成二维7参数模型坐标转换对象 :param P7Param为长度为7的数组,依次存入二维7参数(3个平移参数dx,dy,dz,单位为米,3个旋转参数anx,any,anz,单位为秒;一个尺度参数,单位为ppm): :param pSource源空间参考: :param pTarget目标空间参考:"""
    return _gskernel.GsCoordinateTransformationFactory_CreatePlane7PatameterCoordinateTransformation(pSource, pTarget, P7Param)

def GsCoordinateTransformationFactory_ComputePlane7Parameter3D(Source: 'GsSpatialReference', Target: 'GsSpatialReference', nPointCount: 'int', nDim: 'int', SourcePoint: 'double const *', TargetPoint: 'double const *', Param: 'double *') -> "double":
    r""" 计算三维7参数 :param nPointCount为同名点个数: :param nDim为点坐标维度: :param pSource,pTarget源和目标的空间参考: :param SourcePoint为数组,存入源坐标系的同名点坐标: :param TargetPoint为数组,存入目标坐标系的同名点坐标: :param Param为长度为7的数组,依次存入3个平移参数dx,dy,dz,单位为米,3个旋转参数anx,any,anz,单位为秒;一个尺度参数,单位为ppm: :param Mp为计算得中误差残差值,按照规范Mp值不超过比例尺分母的万分之一(0.0001*MapScale):"""
    return _gskernel.GsCoordinateTransformationFactory_ComputePlane7Parameter3D(Source, Target, nPointCount, nDim, SourcePoint, TargetPoint, Param)

def GsCoordinateTransformationFactory_Create3DPlane7PatameterCoordinateTransformation(pSource: 'GsSpatialReference', pTarget: 'GsSpatialReference', P7Param: 'double const *') -> "GsSmarterPtr< GsCoordinateTransformation >":
    r""" 生成三维7参数模型坐标转换对象 :param P7Param为长度为7的数组,依次存入二维7参数(3个平移参数dx,dy,dz,单位为米,3个旋转参数anx,any,anz,单位为秒;一个尺度参数,单位为ppm): :param pSource源空间参考: :param pTarget目标空间参考:"""
    return _gskernel.GsCoordinateTransformationFactory_Create3DPlane7PatameterCoordinateTransformation(pSource, pTarget, P7Param)

def GsCoordinateTransformationFactory_ComputeBursa7Parameter(Source: 'GsSpatialReference', Target: 'GsSpatialReference', nPointCount: 'int', nDim: 'int', SourcePoint: 'double const *', TargetPoint: 'double const *', Param: 'double *') -> "double":
    r""" 计算Bursa7参数 :param nPointCount为同名点个数: :param nDim为点坐标维度: :param SourcePoint为数组,存入源坐标系的同名点坐标: :param TargetPoint为数组,存入目标坐标系的同名点坐标:  :param Param为长度为7的数组,依次为3个平移参数dx,dy,dz,单位为米,3个旋转参数anx,any,anz,单位为秒;一个尺度参数,单位为ppm: :param Mp为计算得中误差残差值,按照规范Mp值不超过比例尺分母的万分之一(0.0001*MapScale):"""
    return _gskernel.GsCoordinateTransformationFactory_ComputeBursa7Parameter(Source, Target, nPointCount, nDim, SourcePoint, TargetPoint, Param)

def GsCoordinateTransformationFactory_CreateBursa7CoordinateTransformation(pSource: 'GsSpatialReference', pTarget: 'GsSpatialReference', P7Param: 'double const *') -> "GsSmarterPtr< GsCoordinateTransformation >":
    r""" 使用Bursa7参数模型生成坐标转换对象 :param P7Param为长度为7的数组,依次存入Bursa7参数(3个平移参数dx,dy,dz,单位为米,3个旋转参数anx,any,anz,单位为秒;一个尺度参数,单位为ppm): :param pSource源空间参考: :param pTarget目标空间参考:"""
    return _gskernel.GsCoordinateTransformationFactory_CreateBursa7CoordinateTransformation(pSource, pTarget, P7Param)

def GsCoordinateTransformationFactory_ComputeMolodenskyParameter(Source: 'GsSpatialReference', Target: 'GsSpatialReference', nPointCount: 'int', nDim: 'int', SourcePoint: 'double const *', TargetPoint: 'double const *', Param: 'double *', P: 'double const *'=None) -> "double":
    r""" 计算Molodensky7参数 :param nPointCount为同名点个数: :param nDim为点坐标维度: :param SourcePoint为数组,存入源坐标系的同名点坐标值: :param TargetPoint为数组,存入目标坐标系的同名点坐标值: :param Param为长度为7的数组,依次为3个平移参数dx,dy,dz,单位为米,3个旋转参数anx,any,anz,单位为秒;一个尺度参数,单位为ppm: :param Mp为计算得中误差残差值,按照规范Mp值不超过比例尺分母的万分之一(0.0001*MapScale):"""
    return _gskernel.GsCoordinateTransformationFactory_ComputeMolodenskyParameter(Source, Target, nPointCount, nDim, SourcePoint, TargetPoint, Param, P)

def GsCoordinateTransformationFactory_CreateMolodenskyCoordinateTransformation(pSource: 'GsSpatialReference', pTarget: 'GsSpatialReference', P7Param: 'double const *', P0: 'double const *') -> "GsSmarterPtr< GsCoordinateTransformation >":
    r""" 使用Molodensky参数模型生成坐标转换对象 :param P7Param为长度为7的数组,依次存入Bursa7参数(3个平移参数dx,dy,dz,单位为米,3个旋转参数anx,any,anz,单位为秒;一个尺度参数,单位为ppm): :param P0为过渡点坐标，传空则默认为地心原点坐标(0,0,0):"""
    return _gskernel.GsCoordinateTransformationFactory_CreateMolodenskyCoordinateTransformation(pSource, pTarget, P7Param, P0)

def GsCoordinateTransformationFactory_ComputeReverseParameter(paramtype: 'GsParameterType', param: 'double const *', result: 'double *', otherparam: 'double const *') -> "void":
    r"""
     反解参数 :type paramtype: int
    :param paramtype: 参数类型 :param param为数组,参数值: :param result为数组,存入反解的参数值: :param otherparam为数组，存入反解依赖的其他参数，如反解三维4参数时，依次存入区域中心点的B0,L0:
    """
    return _gskernel.GsCoordinateTransformationFactory_ComputeReverseParameter(paramtype, param, result, otherparam)

def GsCoordinateTransformationFactory_ComputeGridCoordinatesOffset(pGridCoord: 'double const *', nGridPointCount: 'int', range: 'double', pCoord: 'double *', nPointCount: 'int', pOffset: 'double *', pResOffset: 'double *') -> "void":
    r"""
     计算网格坐标改正值，使用移动坐标转换法，改正量 反距离加权平均 :param pGridCoord坐标网格坐标，数量: :param range移动搜索半径: :param pCoord控制点坐标: LB :type nPointCount: int
    :param nPointCount: 控制点数 :param Offset: 与控制点对应的坐标改正两
    """
    return _gskernel.GsCoordinateTransformationFactory_ComputeGridCoordinatesOffset(pGridCoord, nGridPointCount, range, pCoord, nPointCount, pOffset, pResOffset)

def GsCoordinateTransformationFactory_CreateGraphsInterpolationCoordinateTransformation(*args) -> "GsSmarterPtr< GsCoordinateTransformation >":
    r"""
    *Overload 1:*
     生成基于方里网格内双线性内插方法的大地坐标转换对象 :param pSource,pTarget源和目标的空间参考: :param BL为方里网格点坐标，经纬度: :type Offset: float
    :param Offset: 经计算返回与BL数组对应的经纬度改正值 :type nGridPointCount: int
    :param nGridPointCount: 方里网格点坐标个数，可以为多个网格，但是网格必须是连通的

    |

    *Overload 2:*
     生成基于方里网格内双线性内插方法的大地坐标转换对象 :param BL为方里网格点坐标，经纬度: :type Offset: float
    :param Offset: 经计算返回与BL数组对应的经纬度改正值 :type nGridPointCount: int
    :param nGridPointCount: 方里网格点坐标个数，可以为多个网格，但是网格必须是连通的

    |

    *Overload 3:*
     生成基于方里网格内双线性内插方法的大地坐标转换对象 :param BL为方里网格点坐标，经纬度: :type Offset: float
    :param Offset: 经计算返回与BL数组对应的经纬度改正值 :param nGridPointCount: 方里网格点坐标个数，可以为多个网格，但是网格必须是连通的

    |

    *Overload 4:*
     计算网格坐标改正值，使用移动坐标转换法，改正量 反距离加权平均 :param pSource,pTarget源和目标的空间参考: :param pGridCoord坐标网格点坐标: :param nPointCount坐标网格点数量: :param range移动搜索半径: :param pCoord控制点坐标:  :type nPointCount: int
    :param nPointCount: 控制点数 :param Offset: 与控制点对应的坐标改正量
    """
    return _gskernel.GsCoordinateTransformationFactory_CreateGraphsInterpolationCoordinateTransformation(*args)

def GsCoordinateTransformationFactory_ComputeGeodeticCoordinatesOffset(Source: 'GsSpatialReference', Target: 'GsSpatialReference', pParam: 'double const *', BL: 'double *', nPointCount: 'int', Offset: 'double *') -> "void":
    r"""
     计算大地坐标改正值 :param pSource,pTarget源和目标的空间参考: :param pParam坐标转换的七参数: :param BL为待转换的经纬度坐标: :param nPointCount坐标个数: :type Offset: float
    :param Offset: 经计算返回与BL数组对应的经纬度改正值
    """
    return _gskernel.GsCoordinateTransformationFactory_ComputeGeodeticCoordinatesOffset(Source, Target, pParam, BL, nPointCount, Offset)

class GsRawPoint3DVector(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self):
        _gskernel.GsRawPoint3DVector_swiginit(self, _gskernel.new_GsRawPoint3DVector())
    __swig_destroy__ = _gskernel.delete_GsRawPoint3DVector

    def add(self, obj: 'GsRawPoint3D') -> "void":
        return _gskernel.GsRawPoint3DVector_add(self, obj)

    def size(self) -> "size_t":
        return _gskernel.GsRawPoint3DVector_size(self)

    def clear(self) -> "void":
        return _gskernel.GsRawPoint3DVector_clear(self)

    def empty(self) -> "bool":
        return _gskernel.GsRawPoint3DVector_empty(self)

    def get(self, n: 'int') -> "GsRawPoint3D":
        return _gskernel.GsRawPoint3DVector_get(self, n)

    def set(self, n: 'int', val: 'GsRawPoint3D') -> "void":
        return _gskernel.GsRawPoint3DVector_set(self, n, val)

# Register GsRawPoint3DVector in _gskernel:
_gskernel.GsRawPoint3DVector_swigregister(GsRawPoint3DVector)

class GsRawPoint(object):
    r""" 轻量级点对象"""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    X = property(_gskernel.GsRawPoint_X_get, _gskernel.GsRawPoint_X_set, doc=r"""x坐标""")
    Y = property(_gskernel.GsRawPoint_Y_get, _gskernel.GsRawPoint_Y_set, doc=r"""y坐标""")

    def __init__(self, *args):
        r"""
        *Overload 1:*
         缺省构造函数

        |

        *Overload 2:*
         从x，y坐标构造 :type x: float
        :param x: x坐标 :type y: float
        :param y: y坐标

        |

        *Overload 3:*
         拷贝构造函数 :type rhs: :py:class:`GsRawPoint`
        :param rhs: 要拷贝的对象
        """
        _gskernel.GsRawPoint_swiginit(self, _gskernel.new_GsRawPoint(*args))

    def Set(self, x: 'double', y: 'double') -> "void":
        r"""
         设置x、y坐标 :type x: float
        :param x: x坐标 :type y: float
        :param y: y坐标
        """
        return _gskernel.GsRawPoint_Set(self, x, y)

    def Distance2(self, rhs: 'GsRawPoint') -> "double":
        r""" 判断点是否相等的操作符 判断点是否不等的操作符 计算和另外一个点的距离的平方"""
        return _gskernel.GsRawPoint_Distance2(self, rhs)
    __swig_destroy__ = _gskernel.delete_GsRawPoint

# Register GsRawPoint in _gskernel:
_gskernel.GsRawPoint_swigregister(GsRawPoint)

eSpatialRelationExBoundary = _gskernel.eSpatialRelationExBoundary
r""" 没有内部与边界的限制"""
eSpatialRelationExClementini = _gskernel.eSpatialRelationExClementini
r""" 几何对象的边界相交"""
eSpatialRelationExProper = _gskernel.eSpatialRelationExProper
r""" 几何对象的边界可以不相交"""
class GsRawPoint3D(GsRawPoint):
    r""" 轻量级三维点对象"""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    Z = property(_gskernel.GsRawPoint3D_Z_get, _gskernel.GsRawPoint3D_Z_set, doc=r"""z坐标""")

    def __init__(self, *args):
        _gskernel.GsRawPoint3D_swiginit(self, _gskernel.new_GsRawPoint3D(*args))

    def Set3D(self, x: 'double', y: 'double', z: 'double') -> "void":
        return _gskernel.GsRawPoint3D_Set3D(self, x, y, z)

    def Distance2(self, rhs: 'GsRawPoint3D') -> "double":
        r"""bool operator == (const GsRawPoint3D& rhs)const; 计算和另外一个点的距离的平方"""
        return _gskernel.GsRawPoint3D_Distance2(self, rhs)
    __swig_destroy__ = _gskernel.delete_GsRawPoint3D

# Register GsRawPoint3D in _gskernel:
_gskernel.GsRawPoint3D_swigregister(GsRawPoint3D)

class GsBox(object):
    r""" 轻量级矩形对象"""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    XMin = property(_gskernel.GsBox_XMin_get, _gskernel.GsBox_XMin_set)
    YMin = property(_gskernel.GsBox_YMin_get, _gskernel.GsBox_YMin_set)
    XMax = property(_gskernel.GsBox_XMax_get, _gskernel.GsBox_XMax_set)
    YMax = property(_gskernel.GsBox_YMax_get, _gskernel.GsBox_YMax_set)

    def __init__(self, *args):
        r"""
        *Overload 1:*
        缺省构造

        |

        *Overload 2:*
        从矩形的最大点和最小点两个坐标点构造

        |

        *Overload 3:*
        从坐标范围构造

        |

        *Overload 4:*
        拷贝构造
        """
        _gskernel.GsBox_swiginit(self, _gskernel.new_GsBox(*args))

    def IsIntersects(self, rhs: 'GsBox') -> "bool":
        r""" 是否和另外一个矩形相交"""
        return _gskernel.GsBox_IsIntersects(self, rhs)

    def IsDisjoin(self, rhs: 'GsBox') -> "bool":
        r""" 是否和另外一个矩形相离"""
        return _gskernel.GsBox_IsDisjoin(self, rhs)

    def IsContain(self, rhs: 'GsBox') -> "bool":
        r""" 判断自身是否完全包含另外一个矩形"""
        return _gskernel.GsBox_IsContain(self, rhs)

    def Union(self, rhs: 'GsBox') -> "GsBox &":
        r"""
         合并另外一个矩形的范围到自身 :rtype: :py:class:`GsBox`
        :return: 返回自身的引用
        """
        return _gskernel.GsBox_Union(self, rhs)

    def Intersect(self, rhs: 'GsBox') -> "GsBox &":
        r"""
         计算和另外一个矩形的交集 :rtype: :py:class:`GsBox`
        :return: 返回自身的引用
        """
        return _gskernel.GsBox_Intersect(self, rhs)

    def IsValid(self) -> "bool":
        r"""
         判断矩形是否为有效矩形 有效矩形最大值大于最小值 :rtype: boolean
        :return: 返回自身是否有效
        """
        return _gskernel.GsBox_IsValid(self)

    def Width(self) -> "double":
        r"""
         矩形的宽度 :rtype: float
        :return: 返回宽度值
        """
        return _gskernel.GsBox_Width(self)

    def Height(self) -> "double":
        r"""
         矩形的高度 :rtype: float
        :return: 返回高度值
        """
        return _gskernel.GsBox_Height(self)

    def Center(self) -> "GsRawPoint":
        r"""
         矩形的中心坐标 :rtype: :py:class:`GsRawPoint`
        :return: 返回中心坐标点
        """
        return _gskernel.GsBox_Center(self)

    def Offset(self, *args) -> "GsBox &":
        r"""
        *Overload 1:*
         偏移矩形 :type off: :py:class:`GsRawPoint`
        :param off: 偏移的xy量 :rtype: :py:class:`GsBox`
        :return: 返回自身的引用

        |

        *Overload 2:*
         偏移矩形 :type x: float
        :param x: x方向上偏移量 :type y: float
        :param y: y方向上偏移量 :rtype: :py:class:`GsBox`
        :return: 返回自身的引用
        """
        return _gskernel.GsBox_Offset(self, *args)

    def Set(self, xmin: 'double', ymin: 'double', xmax: 'double', ymax: 'double') -> "GsBox &":
        r"""
         设置矩形的范围 :rtype: :py:class:`GsBox`
        :return: 返回自身的引用
        """
        return _gskernel.GsBox_Set(self, xmin, ymin, xmax, ymax)
    __swig_destroy__ = _gskernel.delete_GsBox

# Register GsBox in _gskernel:
_gskernel.GsBox_swigregister(GsBox)

class GsBox3D(GsBox):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    ZMin = property(_gskernel.GsBox3D_ZMin_get, _gskernel.GsBox3D_ZMin_set)
    ZMax = property(_gskernel.GsBox3D_ZMax_get, _gskernel.GsBox3D_ZMax_set)

    def __init__(self, *args):
        r"""
        *Overload 1:*
         缺省构造

        |

        *Overload 2:*
         从矩形的最大点和最小点两个坐标点构造 :type Min: :py:class:`GsRawPoint`
        :param Min:  :type Max: :py:class:`GsRawPoint`
        :param Max:

        |

        *Overload 3:*
         从矩形的最大点和最小点两个坐标点构造 :type Min: :py:class:`GsRawPoint3D`
        :param Min:  :type Max: :py:class:`GsRawPoint3D`
        :param Max:

        |

        *Overload 4:*
         从坐标范围构造 :type xmin: float
        :param xmin:  :type ymin: float
        :param ymin:  :type zmin: float
        :param zmin:  :type xmax: float
        :param xmax:  :type ymax: float
        :param ymax:  :type zmax: float
        :param zmax:

        |

        *Overload 5:*
         拷贝构造 :type rhs: :py:class:`GsBox3D`
        :param rhs:

        |

        *Overload 6:*
         拷贝构造 :type rhs: :py:class:`GsBox`
        :param rhs:
        """
        _gskernel.GsBox3D_swiginit(self, _gskernel.new_GsBox3D(*args))

    def Depth(self) -> "double":
        r"""
         深度 :rtype: float
        :return: 
        """
        return _gskernel.GsBox3D_Depth(self)

    def Center3D(self) -> "GsRawPoint3D":
        r"""
         中心点 :rtype: :py:class:`GsRawPoint3D`
        :return: 
        """
        return _gskernel.GsBox3D_Center3D(self)

    def Union(self, *args) -> "GsBox3D &":
        r"""
        *Overload 1:*
         合并另外一个矩形的范围到自身 :rtype: :py:class:`GsBox3D`
        :return: 返回自身的引用 :type rhs: :py:class:`GsBox3D`
        :param rhs:

        |

        *Overload 2:*
         合并一个点的范围到自身 :rtype: :py:class:`GsBox3D`
        :return: 返回自身的引用 :type rhs: :py:class:`GsRawPoint3D`
        :param rhs:
        """
        return _gskernel.GsBox3D_Union(self, *args)

    def Intersect(self, rhs: 'GsBox3D') -> "GsBox3D &":
        r"""
         计算和另外一个矩形的交集 :rtype: :py:class:`GsBox3D`
        :return: 返回自身的引用 :type rhs: :py:class:`GsBox3D`
        :param rhs:
        """
        return _gskernel.GsBox3D_Intersect(self, rhs)

    def IsIntersects(self, rhs: 'GsBox3D') -> "bool":
        r"""
         是否和另外一个矩形相交 :type rhs: :py:class:`GsBox3D`
        :param rhs:  :rtype: boolean
        :return: 
        """
        return _gskernel.GsBox3D_IsIntersects(self, rhs)

    def IsDisjoin(self, *args) -> "bool":
        r"""
        *Overload 1:*
         是否和另外一个矩形相离 :type rhs: :py:class:`GsBox3D`
        :param rhs:  :rtype: boolean
        :return: 

        |

        *Overload 2:*
         是否和另外一个点相离 :type x: float
        :param x:  :type y: float
        :param y:  :type z: float
        :param z:  :rtype: boolean
        :return: 

        |

        *Overload 3:*
         是否和另外一个点相离 :type pt: :py:class:`GsRawPoint3D`
        :param pt:  :rtype: boolean
        :return: 
        """
        return _gskernel.GsBox3D_IsDisjoin(self, *args)

    def IsContain(self, *args) -> "bool":
        r"""
        *Overload 1:*
         判断自身是否完全包含另外一个矩形 :type rhs: :py:class:`GsBox3D`
        :param rhs:  :rtype: boolean
        :return: 

        |

        *Overload 2:*
         判断自身是否包含点 :type x: float
        :param x:  :type y: float
        :param y:  :type z: float
        :param z:  :rtype: boolean
        :return: 

        |

        *Overload 3:*
         判断自身是否包含点 :type pt: :py:class:`GsRawPoint3D`
        :param pt:  :rtype: boolean
        :return: 
        """
        return _gskernel.GsBox3D_IsContain(self, *args)

    def SurfaceArea(self) -> "double":
        r""" 三维盒子的表面积"""
        return _gskernel.GsBox3D_SurfaceArea(self)
    __swig_destroy__ = _gskernel.delete_GsBox3D

# Register GsBox3D in _gskernel:
_gskernel.GsBox3D_swigregister(GsBox3D)

eGeometryTypeUnknown = _gskernel.eGeometryTypeUnknown
r""" 未知或无效几何类型"""
eGeometryTypePoint = _gskernel.eGeometryTypePoint
r""" 单点"""
eGeometryTypePath = _gskernel.eGeometryTypePath
r""" 单段线"""
eGeometryTypePolygon = _gskernel.eGeometryTypePolygon
r""" 多边形"""
eGeometryTypeCollection = _gskernel.eGeometryTypeCollection
r""" 集合"""
eGeometryTypeMultiPoint = _gskernel.eGeometryTypeMultiPoint
r""" 复合点、多点"""
eGeometryTypePolyline = _gskernel.eGeometryTypePolyline
r""" 多段折线"""
eGeometryTypeAnnotation = _gskernel.eGeometryTypeAnnotation
r""" 注记"""
eGeometryTypeEnvelope = _gskernel.eGeometryTypeEnvelope
r""" 矩形"""
eGeometryTypeLine = _gskernel.eGeometryTypeLine
r""" 两点线段"""
eGeometryTypeCircleArc = _gskernel.eGeometryTypeCircleArc
r""" 三点圆弧"""
eGeometryTypeRing = _gskernel.eGeometryTypeRing
r""" 单圈"""
eNoExtension = _gskernel.eNoExtension
r""" segment不扩展"""
eExtendTangentAtFrom = _gskernel.eExtendTangentAtFrom
r""" segment被沿着起点的切点无限扩展"""
eExtendEmbeddedAtFrom = _gskernel.eExtendEmbeddedAtFrom
r""" segment沿着起点扩展，圆弧扩展后为一个圆，椭圆弧扩展后为一个椭圆，线段扩展后为一条射线"""
eExtendTangentAtTo = _gskernel.eExtendTangentAtTo
r""" segment被沿着终点的切点无限扩展"""
eExtendEmbeddedAtTo = _gskernel.eExtendEmbeddedAtTo
r""" segment沿着起点扩展，圆弧扩展后为一个圆，椭圆弧扩展后为一个椭圆，线段扩展后为一条射线"""
eExtendTangents = _gskernel.eExtendTangents
r""" eExtendTangentAtFrom And/Or eExtendTangentAtTo"""
eExtendEmbedded = _gskernel.eExtendEmbedded
r""" eExtendEmbeddedAtFrom And/Or eExtendEmbeddedAtTo"""
eExtendAtFrom = _gskernel.eExtendAtFrom
r""" eExtendTangentAtFrom Or eExtendEmbeddedAtFrom"""
eExtendAtTo = _gskernel.eExtendAtTo
r""" eExtendTangentAtTo Or eExtendEmbeddedAtTo"""
class GeometryBlobHead(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    oid = property(_gskernel.GeometryBlobHead_oid_get, _gskernel.GeometryBlobHead_oid_set)
    oid2 = property(_gskernel.GeometryBlobHead_oid2_get, _gskernel.GeometryBlobHead_oid2_set)
    type = property(_gskernel.GeometryBlobHead_type_get, _gskernel.GeometryBlobHead_type_set)
    coordnum = property(_gskernel.GeometryBlobHead_coordnum_get, _gskernel.GeometryBlobHead_coordnum_set)
    dim = property(_gskernel.GeometryBlobHead_dim_get, _gskernel.GeometryBlobHead_dim_set)
    infonum = property(_gskernel.GeometryBlobHead_infonum_get, _gskernel.GeometryBlobHead_infonum_set)

    def __init__(self):
        _gskernel.GeometryBlobHead_swiginit(self, _gskernel.new_GeometryBlobHead())
    __swig_destroy__ = _gskernel.delete_GeometryBlobHead

# Register GeometryBlobHead in _gskernel:
_gskernel.GeometryBlobHead_swigregister(GeometryBlobHead)

class GsGeometryBlob(GsGrowByteBuffer):
    r""" 几何数据库封装对象 以Oracle Spatial Geometry数据描述结构封装对象"""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self):
        r""" 缺省构造函数"""
        _gskernel.GsGeometryBlob_swiginit(self, _gskernel.new_GsGeometryBlob())

    def OID1(self, *args) -> "void":
        r"""
        *Overload 1:*
         第一个32位oid :rtype: int
        :return: 返回32位的oid

        |

        *Overload 2:*
         设置第一个32位oid
        """
        return _gskernel.GsGeometryBlob_OID1(self, *args)

    def OID2(self, *args) -> "void":
        r"""
        *Overload 1:*
         第2个32位oid :rtype: int
        :return: 返回32位的oid

        |

        *Overload 2:*
         设置第2个32位oid
        """
        return _gskernel.GsGeometryBlob_OID2(self, *args)

    def OID(self, *args) -> "void":
        r"""
        *Overload 1:*
         获取64位OID :rtype: int
        :return: 返回64位的oid

        |

        *Overload 2:*
         设置64位oid
        """
        return _gskernel.GsGeometryBlob_OID(self, *args)

    def HeadPtr(self) -> "GeometryBlobHead *":
        r"""
         几何数据的头 :rtype: :py:class:`GeometryBlobHead`
        :return: 几何数据的头指针
        """
        return _gskernel.GsGeometryBlob_HeadPtr(self)

    def GeometryType(self, *args) -> "void":
        r"""
        *Overload 1:*
         几何类型 :rtype: int
        :return: 返回几何类型

        |

        *Overload 2:*
         设置几何类型
        """
        return _gskernel.GsGeometryBlob_GeometryType(self, *args)

    def CoordinateDimension(self, *args) -> "void":
        r"""
        *Overload 1:*
         获取坐标维度 :rtype: int
        :return: 返回坐标维度2、3

        |

        *Overload 2:*
         设置坐标维度 :type nDim: int
        :param nDim: 坐标维度2、3
        """
        return _gskernel.GsGeometryBlob_CoordinateDimension(self, *args)

    def Interpret(self, inter: 'int *') -> "void":
        r"""
         获取解释串指针 :rtype: void
        :return: 返回解释串的指针
        """
        return _gskernel.GsGeometryBlob_Interpret(self, inter)

    def InterpretLength(self) -> "int":
        r"""
         获取解释串长度 :rtype: int
        :return: 返回解释串的长度
        """
        return _gskernel.GsGeometryBlob_InterpretLength(self)

    def Coordinate(self, point: 'double *') -> "void":
        r""" 源的同名点坐标"""
        return _gskernel.GsGeometryBlob_Coordinate(self, point)

    def CoordinateLength(self) -> "int":
        r"""
         获取坐标串长度 :rtype: int
        :return: 返回坐标串的长度
        """
        return _gskernel.GsGeometryBlob_CoordinateLength(self)

    def SetCoordinate(self, arg2: 'int *', arg3: 'double *') -> "void":
        r""" 设置坐标串和解释串数据 :param pInter: 解释串指针 :param pIntLen: 解释串长度 :param pCoord: 坐标串指针 :param pCoordLen: 坐标串长度"""
        return _gskernel.GsGeometryBlob_SetCoordinate(self, arg2, arg3)

    def Transform(self, pTrans: 'GsCoordinateTransformation') -> "bool":
        r"""
         坐标转换 :rtype: boolean
        :return: 返回是否成功转换。
        """
        return _gskernel.GsGeometryBlob_Transform(self, pTrans)

    def IsValid(self) -> "bool":
        r""" 判断是否有效"""
        return _gskernel.GsGeometryBlob_IsValid(self)

    def Empty(self) -> "void":
        r""" 恢复为空状态"""
        return _gskernel.GsGeometryBlob_Empty(self)

    def PointCount(self) -> "int":
        r""" 点的数量"""
        return _gskernel.GsGeometryBlob_PointCount(self)

    def BuildTriangulate(self, *args) -> "GsSmarterPtr< GsTriangulateCollection >":
        r"""
        *Overload 1:*
        对Geometry数据进行三角化

        |

        *Overload 2:*
        对Geometry数据进行三角化
        """
        return _gskernel.GsGeometryBlob_BuildTriangulate(self, *args)
    __swig_destroy__ = _gskernel.delete_GsGeometryBlob

# Register GsGeometryBlob in _gskernel:
_gskernel.GsGeometryBlob_swigregister(GsGeometryBlob)

eIsFalse = _gskernel.eIsFalse
r""" 不符合对象关系"""
eIsTrue = _gskernel.eIsTrue
r""" 符合对象关系"""
eUnFit = _gskernel.eUnFit
r""" 对象间不适合这种关系。"""
eBufferRoundCap = _gskernel.eBufferRoundCap
eBufferFlatCap = _gskernel.eBufferFlatCap
eBufferSquareCap = _gskernel.eBufferSquareCap
class GsTriangulate(object):
    r""" 三角型"""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        _gskernel.GsTriangulate_swiginit(self, _gskernel.new_GsTriangulate(*args))

    def PointAt(self, i: 'int') -> "GsRawPoint &":
        return _gskernel.GsTriangulate_PointAt(self, i)
    __swig_destroy__ = _gskernel.delete_GsTriangulate

# Register GsTriangulate in _gskernel:
_gskernel.GsTriangulate_swigregister(GsTriangulate)

class GsTriangulate3D(object):
    r""" 三角型"""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        _gskernel.GsTriangulate3D_swiginit(self, _gskernel.new_GsTriangulate3D(*args))

    def PointAt(self, i: 'int') -> "GsRawPoint3D &":
        return _gskernel.GsTriangulate3D_PointAt(self, i)
    __swig_destroy__ = _gskernel.delete_GsTriangulate3D

# Register GsTriangulate3D in _gskernel:
_gskernel.GsTriangulate3D_swigregister(GsTriangulate3D)

eDelaunayTriangulation = _gskernel.eDelaunayTriangulation
r""" 狄罗尼三角网"""
ePolygonTriangulation = _gskernel.ePolygonTriangulation
r""" 面内的三角网"""
class GsTriangulateCollection(GsRefObject):
    r""" 三角型集合"""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _gskernel.delete_GsTriangulateCollection

    def Count(self) -> "int":
        r""" 集合中三角形的数量"""
        return _gskernel.GsTriangulateCollection_Count(self)

    def Triangulate(self, i: 'int') -> "GsTriangulate":
        r""" 获取集合中的一个三角形"""
        return _gskernel.GsTriangulateCollection_Triangulate(self, i)

    def NodePtr(self, pCoord: 'double *') -> "void":
        r""" 集合中三角形节坐标地址"""
        return _gskernel.GsTriangulateCollection_NodePtr(self, pCoord)

    def CoordinateDimension(self) -> "int":
        r""" 三角形节点的坐标维度（2或3）"""
        return _gskernel.GsTriangulateCollection_CoordinateDimension(self)

    def NodeCount(self) -> "int":
        r""" 节点的数量"""
        return _gskernel.GsTriangulateCollection_NodeCount(self)

    def TriangulateIndex(self, *args) -> "void":
        r"""
        *Overload 1:*
        获取指定三角形的节点索引

        |

        *Overload 2:*
        获取指定三角形的节点索引

        |

        *Overload 3:*
        获取指定三角形的节点索引
        """
        return _gskernel.GsTriangulateCollection_TriangulateIndex(self, *args)

    def Select(self, extent: 'GsBox') -> "GsSmarterPtr< GsTriangulateCollection >":
        r""" 选择和矩形相交的三角形形成三角形子集"""
        return _gskernel.GsTriangulateCollection_Select(self, extent)

# Register GsTriangulateCollection in _gskernel:
_gskernel.GsTriangulateCollection_swigregister(GsTriangulateCollection)

class GsGeometry(GsRefObject):
    r""" 几何对象基类 几何对象抽象基类"""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __swig_destroy__ = _gskernel.delete_GsGeometry

    def Clone(self) -> "GsSmarterPtr< GsGeometry >":
        r"""
         克隆自身 :rtype: GsSmarterPtr< GsGeometry >
        :return: 返回克隆的新对象
        """
        return _gskernel.GsGeometry_Clone(self)

    def GeometryBlobPtr(self) -> "GsGeometryBlob *":
        r"""
         获取存储几何数据的指针 :rtype: :py:class:`GsGeometryBlob`
        :return: 返回存储几何数据的指针
        """
        return _gskernel.GsGeometry_GeometryBlobPtr(self)

    def Envelope(self) -> "GsBox":
        r"""
         外接矩形范围 :rtype: :py:class:`GsBox`
        :return: 返回外接矩形对象
        """
        return _gskernel.GsGeometry_Envelope(self)

    def MinimumBoundingBox(self) -> "GsSmarterPtr< GsGeometry >":
        r"""
         任意方向上最小外接矩形 :rtype: GsSmarterPtr< GsGeometry >
        :return: 返回Ring对象或者空。
        """
        return _gskernel.GsGeometry_MinimumBoundingBox(self)

    def MinimumBoundingCircle(self) -> "GsSmarterPtr< GsGeometry >":
        r"""
         最小外接圆 :rtype: GsSmarterPtr< GsGeometry >
        :return: 返回Ring对象或者空。
        """
        return _gskernel.GsGeometry_MinimumBoundingCircle(self)

    def MaximumInnerCircle(self) -> "GsSmarterPtr< GsGeometry >":
        r"""
         最小内接圆 :rtype: GsSmarterPtr< GsGeometry >
        :return: 返回Ring对象或者空。
        """
        return _gskernel.GsGeometry_MaximumInnerCircle(self)

    def MaximumInnerSquare(self) -> "GsSmarterPtr< GsGeometry >":
        r"""
         最小内接正方形 :rtype: GsSmarterPtr< GsGeometry >
        :return: 返回Ring对象或者空。
        """
        return _gskernel.GsGeometry_MaximumInnerSquare(self)

    def MaximumInnerRect(self) -> "GsSmarterPtr< GsGeometry >":
        r"""
         最小内接矩形 :rtype: GsSmarterPtr< GsGeometry >
        :return: 返回Ring对象或者空。
        """
        return _gskernel.GsGeometry_MaximumInnerRect(self)

    def LabelPoint(self) -> "GsRawPoint":
        r"""
         Label点 :rtype: :py:class:`GsRawPoint`
        :return: 返回Label点
        """
        return _gskernel.GsGeometry_LabelPoint(self)

    def GeometryType(self) -> "GsGeometryType":
        r"""
         几何类型 :rtype: int
        :return: 返回几何类型
        """
        return _gskernel.GsGeometry_GeometryType(self)

    def CoordinateDimension(self, *args) -> "void":
        r"""
        *Overload 1:*
         坐标维度 :rtype: int
        :return: 返回2，只有x，y坐标，返回3，有z坐标

        |

        *Overload 2:*
         设置坐标维度，2或者3
        """
        return _gskernel.GsGeometry_CoordinateDimension(self, *args)

    def Dimension(self) -> "int":
        r"""
         几何对象维度 :rtype: int
        :return: 0表示点，1表示线，2表示面
        """
        return _gskernel.GsGeometry_Dimension(self)

    def Transform(self, pTrans: 'GsCoordinateTransformation') -> "bool":
        r"""
         坐标转换 :rtype: boolean
        :return: 返回是否成功转换。
        """
        return _gskernel.GsGeometry_Transform(self, pTrans)

    @staticmethod
    def GeometryTypeDimension(eType: 'GsGeometryType') -> "int":
        r"""
         转换几何对象类型为几何维度 :rtype: int
        :return: 返回几何维度（0：点  1：线  2：面）
        """
        return _gskernel.GsGeometry_GeometryTypeDimension(eType)

    def Distance(self, *args) -> "double":
        r""" 计算和另外一个Geometry的距离 Image: Geometry_Distance.png("Geometry最短路径")"""
        return _gskernel.GsGeometry_Distance(self, *args)

    def Boundary(self, *args) -> "GsSmarterPtr< GsGeometry >":
        r""" 计算几何对象的外壳"""
        return _gskernel.GsGeometry_Boundary(self, *args)

    def ConvexHull(self, *args) -> "GsSmarterPtr< GsGeometry >":
        r""" 计算几何对象的凸壳"""
        return _gskernel.GsGeometry_ConvexHull(self, *args)

    def Buffer(self, *args) -> "GsSmarterPtr< GsGeometry >":
        r"""
        *Overload 1:*
         计算几何对象的缓冲区 :type dblRadius: float
        :param dblRadius:	缓冲区半径 :type eType: int
        :param eType:	 	缓冲区分析时的节点处理类型，默认使用真圆弧衔接 :rtype: GsSmarterPtr< GsGeometry >
        :return: 缓冲区多边形

        |

        *Overload 2:*
         计算几何对象的缓冲区 :type dblRadius: float
        :param dblRadius:	缓冲区半径 :type nArc: int
        :param nArc:	 	缓冲区分析时的节点内插成半圆时内插折线线段的数目 :rtype: GsSmarterPtr< GsGeometry >
        :return: 缓冲区多边形

        |

        *Overload 3:*
         计算几何对象的缓冲区 :type dblRadius: float
        :param dblRadius:	缓冲区半径 :type nArc: int
        :param nArc:	 	缓冲区分析时的节点内插成半圆时内插折线线段的数目 :rtype: GsSmarterPtr< GsGeometry >
        :return: 缓冲区多边形

        |

        *Overload 4:*
         计算几何对象的缓冲区

        |

        *Overload 5:*
         计算几何对象的缓冲区
        """
        return _gskernel.GsGeometry_Buffer(self, *args)

    def Intersection(self, *args) -> "GsSmarterPtr< GsGeometry >":
        r""" 计算和另外一个几何对象的相交的部分"""
        return _gskernel.GsGeometry_Intersection(self, *args)

    def Union(self, *args) -> "GsSmarterPtr< GsGeometry >":
        r""" 计算和另外一个几何对象的合并的结果"""
        return _gskernel.GsGeometry_Union(self, *args)

    def Difference(self, *args) -> "GsSmarterPtr< GsGeometry >":
        r""" 计算和另外一个几何对象不同的部分"""
        return _gskernel.GsGeometry_Difference(self, *args)

    def SymDifference(self, *args) -> "GsSmarterPtr< GsGeometry >":
        r""" 计算和另外一个几何对象对称差"""
        return _gskernel.GsGeometry_SymDifference(self, *args)

    def IsSimple(self, *args) -> "bool":
        r""" 判断一个几何对象是否存在重点、自相交等复杂情况 Image: Geometry_IsSimple.png("Geometry是否自相交")"""
        return _gskernel.GsGeometry_IsSimple(self, *args)

    def Simplify(self) -> "GsSmarterPtr< GsGeometry >":
        r""" 将复杂的存在重点、自相交的对象简化 Image: Geometry_Simplify.png("简化Geometry")"""
        return _gskernel.GsGeometry_Simplify(self)

    def Cut(self, *args) -> "void":
        r""" 根据传入的分割线，将当前几何对象分割为左右两个几何对象集合"""
        return _gskernel.GsGeometry_Cut(self, *args)

    def Clip(self, *args) -> "GsSmarterPtr< GsGeometry >":
        r""" 用传入的几何对当前几何对象进行剪切"""
        return _gskernel.GsGeometry_Clip(self, *args)

    def ReturnNearestPoint(self, *args) -> "GsSmarterPtr< GsPoint >":
        r""" 创建并返回当前几何对象上距离输入点最近的一个点"""
        return _gskernel.GsGeometry_ReturnNearestPoint(self, *args)

    def QueryNearestPoint(self, *args) -> "void":
        r""" 复制当前几何对象上距离输入点最近的一个点到pNearest"""
        return _gskernel.GsGeometry_QueryNearestPoint(self, *args)

    def IsEmpty(self) -> "bool":
        r""" 判断geometry是否有效"""
        return _gskernel.GsGeometry_IsEmpty(self)

    def IsEqual(self, *args) -> "GsGeometryRelationResult":
        r""" 比较几何对象似乎否相等"""
        return _gskernel.GsGeometry_IsEqual(self, *args)

    def IsTouch(self, *args) -> "GsGeometryRelationResult":
        r""" 比较几何对象是否相贴近 Image: Geometry_IsTouch.png("Geometry相贴近")"""
        return _gskernel.GsGeometry_IsTouch(self, *args)

    def IsCross(self, *args) -> "GsGeometryRelationResult":
        r""" 几何对象和传入对象是否在线的语义上向穿"""
        return _gskernel.GsGeometry_IsCross(self, *args)

    def IsOverlap(self, *args) -> "GsGeometryRelationResult":
        r""" 几何对象和传入几何对象是否在线的语义上重叠 Image: Geometry_IsOverlap.png("Geometry相重叠")"""
        return _gskernel.GsGeometry_IsOverlap(self, *args)

    def IsDisjoin(self, *args) -> "GsGeometryRelationResult":
        r""" 几何对象和传入几何对象是否向离 Image: Geometry_IsDisjoin.png("Geometry相离")"""
        return _gskernel.GsGeometry_IsDisjoin(self, *args)

    def IsIntersect(self, *args) -> "GsGeometryRelationResult":
        r""" 几何对象和传入几何对象是否向交"""
        return _gskernel.GsGeometry_IsIntersect(self, *args)

    def ConstructUnion(self, *args) -> "GsSmarterPtr< GsGeometry >":
        r""" 计算几何对象集合的合并的结果"""
        return _gskernel.GsGeometry_ConstructUnion(self, *args)

    def ConstructBuffers(self, *args) -> "GsSmarterPtr< GsGeometryCollection >":
        r"""
        *Overload 1:*
         计算几何对象的缓冲区 :type dblRadius: float
        :param dblRadius:	缓冲区半径 :type len: int
        :param len:			缓冲区半径数组长度 :type eType: int
        :param eType:	 	缓冲区分析时的节点处理类型，默认使用真圆弧衔接 :rtype: GsSmarterPtr< GsGeometryCollection >
        :return: 缓冲区多边形

        |

        *Overload 2:*
         计算几何对象的缓冲区 :type dblRadius: float
        :param dblRadius:	缓冲区半径数组   :type len: int
        :param len:			缓冲区半径数组长度 :type nArc: int
        :param nArc:	 	缓冲区分析时的节点内插成半圆时内插折线线段的数目 :rtype: GsSmarterPtr< GsGeometryCollection >
        :return: 缓冲区多边形

        |

        *Overload 3:*
         计算几何对象的缓冲区 :type dblRadius: float
        :param dblRadius:	缓冲区半径数组   :type len: int
        :param len:			缓冲区半径数组长度 :type nArc: int
        :param nArc:	 	缓冲区分析时的节点内插成半圆时内插折线线段的数目 :rtype: GsSmarterPtr< GsGeometryCollection >
        :return: 缓冲区多边形
        """
        return _gskernel.GsGeometry_ConstructBuffers(self, *args)

    def Relation(self, *args) -> "GsGeometryRelationResult":
        r""" 判断两个Geometry是否符合指定的空间关系"""
        return _gskernel.GsGeometry_Relation(self, *args)

    def IsContain(self, *args) -> "GsGeometryRelationResult":
        r"""
        *Overload 1:*
        几何对象是否包含传入对象 Image: Geometry_IsContain.png("Geometry包含")

        |

        *Overload 2:*
        几何对象包含另一几何对象

        |

        *Overload 3:*
        几何对象包含另一几何对象
        """
        return _gskernel.GsGeometry_IsContain(self, *args)

    def IsWithin(self, *args) -> "GsGeometryRelationResult":
        r"""
        *Overload 1:*
        几何对象是否落入在传入几何对象内部。 Image: Geometry_IsWithin.png("Geometry在内部")

        |

        *Overload 2:*
        几何对象被另一几何对象包含

        |

        *Overload 3:*
        几何对象被另一几何对象包含
        """
        return _gskernel.GsGeometry_IsWithin(self, *args)

    def SpatialReference(self, *args) -> "GsSpatialReference *":
        r"""
        *Overload 1:*
        设置空间参考

        |

        *Overload 2:*
        获取空间参考
        """
        return _gskernel.GsGeometry_SpatialReference(self, *args)

    def BuildTriangulate(self, *args) -> "GsSmarterPtr< GsTriangulateCollection >":
        r"""
        *Overload 1:*
        对Geometry数据进行三角化

        |

        *Overload 2:*
        对Geometry数据进行三角化
        """
        return _gskernel.GsGeometry_BuildTriangulate(self, *args)

# Register GsGeometry in _gskernel:
_gskernel.GsGeometry_swigregister(GsGeometry)

def GsGeometry_GeometryTypeDimension(eType: 'GsGeometryType') -> "int":
    r"""
     转换几何对象类型为几何维度 :rtype: int
    :return: 返回几何维度（0：点  1：线  2：面）
    """
    return _gskernel.GsGeometry_GeometryTypeDimension(eType)

eSimplifySucceed = _gskernel.eSimplifySucceed
r""" 简化成功"""
eSimplifyFaild = _gskernel.eSimplifyFaild
r""" 简化失败或者无须简化"""
eSimplefyDegenerated = _gskernel.eSimplefyDegenerated
r""" 简化结果已经退化"""
class GsGeometrySimplifier(GsRefObject):
    r""" 几何简化器"""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def EnableDegenerated(self, *args) -> "void":
        r"""
        *Overload 1:*
        是否允许退化

        |

        *Overload 2:*
        是否允许退化
        """
        return _gskernel.GsGeometrySimplifier_EnableDegenerated(self, *args)

    def Tolerance(self, *args) -> "void":
        r"""
        *Overload 1:*
        容差

        |

        *Overload 2:*
        容差
        """
        return _gskernel.GsGeometrySimplifier_Tolerance(self, *args)

    def SimplifyGeometry(self, geometry: 'GsGeometry') -> "GsGeometrySimplifyResult":
        r""" 简化几何对象"""
        return _gskernel.GsGeometrySimplifier_SimplifyGeometry(self, geometry)

    def Simplify(self, *args) -> "GsGeometrySimplifyResult":
        r"""
        *Overload 1:*
        简化几何对象返回简化后的几何对象

        |

        *Overload 2:*
        简化几何对象
        """
        return _gskernel.GsGeometrySimplifier_Simplify(self, *args)
    __swig_destroy__ = _gskernel.delete_GsGeometrySimplifier

# Register GsGeometrySimplifier in _gskernel:
_gskernel.GsGeometrySimplifier_swigregister(GsGeometrySimplifier)

class GsTopologyPreservingGeometrySimplifier(GsGeometrySimplifier):
    r""" 保拓扑简化器"""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, dblTol: 'double'=0):
        _gskernel.GsTopologyPreservingGeometrySimplifier_swiginit(self, _gskernel.new_GsTopologyPreservingGeometrySimplifier(dblTol))
    __swig_destroy__ = _gskernel.delete_GsTopologyPreservingGeometrySimplifier

# Register GsTopologyPreservingGeometrySimplifier in _gskernel:
_gskernel.GsTopologyPreservingGeometrySimplifier_swigregister(GsTopologyPreservingGeometrySimplifier)

class GsGeometryFactory(object):
    r""" 几何对象类工厂"""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    @staticmethod
    def ConvertByteOrderFromStorageBlob(ARRAY: 'unsigned char *', eEndian: 'GsEndian') -> "void":
        return _gskernel.GsGeometryFactory_ConvertByteOrderFromStorageBlob(ARRAY, eEndian)

    @staticmethod
    def ConvertByteOrderToStorageBlob(ARRAY: 'unsigned char *') -> "void":
        return _gskernel.GsGeometryFactory_ConvertByteOrderToStorageBlob(ARRAY)

    @staticmethod
    def CreateGeometryFromBlob(*args) -> "GsSmarterPtr< GsGeometry >":
        return _gskernel.GsGeometryFactory_CreateGeometryFromBlob(*args)

    @staticmethod
    def CreateGeometryFromOracle(arg1: 'int *', arg2: 'double *', nDim: 'int') -> "GsSmarterPtr< GsGeometry >":
        return _gskernel.GsGeometryFactory_CreateGeometryFromOracle(arg1, arg2, nDim)

    def __init__(self):
        _gskernel.GsGeometryFactory_swiginit(self, _gskernel.new_GsGeometryFactory())
    __swig_destroy__ = _gskernel.delete_GsGeometryFactory

# Register GsGeometryFactory in _gskernel:
_gskernel.GsGeometryFactory_swigregister(GsGeometryFactory)

def GsGeometryFactory_ConvertByteOrderFromStorageBlob(ARRAY: 'unsigned char *', eEndian: 'GsEndian') -> "void":
    return _gskernel.GsGeometryFactory_ConvertByteOrderFromStorageBlob(ARRAY, eEndian)

def GsGeometryFactory_ConvertByteOrderToStorageBlob(ARRAY: 'unsigned char *') -> "void":
    return _gskernel.GsGeometryFactory_ConvertByteOrderToStorageBlob(ARRAY)

def GsGeometryFactory_CreateGeometryFromBlob(*args) -> "GsSmarterPtr< GsGeometry >":
    return _gskernel.GsGeometryFactory_CreateGeometryFromBlob(*args)

def GsGeometryFactory_CreateGeometryFromOracle(arg1: 'int *', arg2: 'double *', nDim: 'int') -> "GsSmarterPtr< GsGeometry >":
    return _gskernel.GsGeometryFactory_CreateGeometryFromOracle(arg1, arg2, nDim)

class GsEnvelope(GsGeometry):
    r""" 矩形几何对象"""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        r"""
        *Overload 1:*
        缺省构造函数

        |

        *Overload 2:*
        从内存块构造 :param pBlob: 几何数据内存块 :param nLen: 内存块长度 从范围构造

        |

        *Overload 3:*
        从范围构造3D

        |

        *Overload 4:*
        从Box构造
        """
        _gskernel.GsEnvelope_swiginit(self, _gskernel.new_GsEnvelope(*args))

    def Box(self) -> "GsBox":
        r""" 返回矩形的轻量对象"""
        return _gskernel.GsEnvelope_Box(self)

    def IsIntersects(self, *args) -> "bool":
        r"""
        *Overload 1:*
        是否和另外一个矩形相交

        |

        *Overload 2:*
        是否和另外一个矩形相交
        """
        return _gskernel.GsEnvelope_IsIntersects(self, *args)

    def IsDisjoin(self, *args) -> "bool":
        r"""
        *Overload 1:*
        是否和另外一个矩形相离

        |

        *Overload 2:*
        是否和另外一个矩形相离
        """
        return _gskernel.GsEnvelope_IsDisjoin(self, *args)

    def Union(self, *args) -> "GsEnvelope *":
        r"""
        *Overload 1:*
         合并另外一个矩形的范围到自身 :rtype: :py:class:`GsEnvelope`
        :return: 返回自身的引用

        |

        *Overload 2:*
         合并另外一个矩形的范围到自身 :rtype: :py:class:`GsEnvelope`
        :return: 返回自身的引用
        """
        return _gskernel.GsEnvelope_Union(self, *args)

    def Intersect(self, *args) -> "GsEnvelope *":
        r"""
        *Overload 1:*
         与另一box求交，自身改变为求得的交集 :rtype: :py:class:`GsEnvelope`
        :return: 返回自身的引用

        |

        *Overload 2:*
         与另一矩形求交，自身改变为求得的交集 :rtype: :py:class:`GsEnvelope`
        :return: 返回自身的引用
        """
        return _gskernel.GsEnvelope_Intersect(self, *args)

    def IsValid(self) -> "bool":
        r"""
         判断矩形是否为有效矩形 有效矩形最大值大于最小值 :rtype: boolean
        :return: 返回自身是否有效
        """
        return _gskernel.GsEnvelope_IsValid(self)

    def Width(self) -> "double":
        r"""
         矩形的宽度 :rtype: float
        :return: 返回宽度值
        """
        return _gskernel.GsEnvelope_Width(self)

    def Height(self) -> "double":
        r"""
         矩形的高度 :rtype: float
        :return: 返回高度值
        """
        return _gskernel.GsEnvelope_Height(self)

    def Depth(self) -> "double":
        r"""
         矩形的深度 :rtype: float
        :return: 返回深度值
        """
        return _gskernel.GsEnvelope_Depth(self)

    def Center(self) -> "GsRawPoint3D":
        r"""
         矩形的中心坐标 :rtype: :py:class:`GsRawPoint3D`
        :return: 返回中心坐标点
        """
        return _gskernel.GsEnvelope_Center(self)

    def Offset(self, *args) -> "GsEnvelope *":
        r"""
        *Overload 1:*
         偏移矩形 :type off: :py:class:`GsRawPoint`
        :param off: 偏移的xy量 :rtype: :py:class:`GsEnvelope`
        :return: 返回自身的引用

        |

        *Overload 2:*
         偏移矩形3D :type off: :py:class:`GsRawPoint3D`
        :param off: 偏移的xyz量 :rtype: :py:class:`GsEnvelope`
        :return: 返回自身的引用

        |

        *Overload 3:*
         偏移矩形 :type x: float
        :param x: x方向上偏移量 :type y: float
        :param y: y方向上偏移量 :rtype: :py:class:`GsEnvelope`
        :return: 返回自身的引用

        |

        *Overload 4:*
         偏移矩形 :type x: float
        :param x: x方向上偏移量 :type y: float
        :param y: y方向上偏移量 :type z: float
        :param z: z方向上偏移量 :rtype: :py:class:`GsEnvelope`
        :return: 返回自身的引用
        """
        return _gskernel.GsEnvelope_Offset(self, *args)

    def Get(self, *args) -> "void":
        r"""
        *Overload 1:*
         获取矩形的范围 :rtype: :py:class:`GsBox`
        :return: 返回box对象

        |

        *Overload 2:*
         获取矩形的范围

        |

        *Overload 3:*
         获取矩形的范围

        |

        *Overload 4:*
         获取矩形的范围
        """
        return _gskernel.GsEnvelope_Get(self, *args)

    def Set(self, *args) -> "GsEnvelope *":
        r"""
        *Overload 1:*
         设置矩形的范围 :rtype: :py:class:`GsEnvelope`
        :return: 返回自身的引用

        |

        *Overload 2:*
         设置矩形的范围 :rtype: :py:class:`GsEnvelope`
        :return: 返回自身的引用

        |

        *Overload 3:*
         设置矩形的范围 :rtype: :py:class:`GsEnvelope`
        :return: 返回自身的引用

        |

        *Overload 4:*
         设置矩形的范围 :rtype: :py:class:`GsEnvelope`
        :return: 返回自身的引用

        |

        *Overload 5:*
         设置矩形的范围 :rtype: :py:class:`GsEnvelope`
        :return: 返回自身的引用
        """
        return _gskernel.GsEnvelope_Set(self, *args)

    def XMin(self, *args) -> "void":
        return _gskernel.GsEnvelope_XMin(self, *args)

    def XMax(self, *args) -> "void":
        return _gskernel.GsEnvelope_XMax(self, *args)

    def YMin(self, *args) -> "void":
        return _gskernel.GsEnvelope_YMin(self, *args)

    def YMax(self, *args) -> "void":
        return _gskernel.GsEnvelope_YMax(self, *args)

    def ZMin(self, *args) -> "void":
        return _gskernel.GsEnvelope_ZMin(self, *args)

    def ZMax(self, *args) -> "void":
        return _gskernel.GsEnvelope_ZMax(self, *args)

    def Max(self, *args) -> "void":
        r"""
        *Overload 1:*
        获取最大的点

        |

        *Overload 2:*
        设置最大的点

        |

        *Overload 3:*
        设置最大的点
        """
        return _gskernel.GsEnvelope_Max(self, *args)

    def Min(self, *args) -> "void":
        r"""
        *Overload 1:*
        获取最小的点

        |

        *Overload 2:*
        设置最小的点

        |

        *Overload 3:*
        设置最小的点
        """
        return _gskernel.GsEnvelope_Min(self, *args)

    @staticmethod
    def CanDowncast(b: 'GsGeometry') -> "bool":
        return _gskernel.GsEnvelope_CanDowncast(b)

    @staticmethod
    def DowncastTo(b: 'GsGeometry') -> "GsSmarterPtr< GsEnvelope >":
        return _gskernel.GsEnvelope_DowncastTo(b)
    __swig_destroy__ = _gskernel.delete_GsEnvelope

# Register GsEnvelope in _gskernel:
_gskernel.GsEnvelope_swigregister(GsEnvelope)

def GsEnvelope_CanDowncast(b: 'GsGeometry') -> "bool":
    return _gskernel.GsEnvelope_CanDowncast(b)

def GsEnvelope_DowncastTo(b: 'GsGeometry') -> "GsSmarterPtr< GsEnvelope >":
    return _gskernel.GsEnvelope_DowncastTo(b)

class GsPoint(GsGeometry):
    r""" 单点几何对象"""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        r"""
        *Overload 1:*
         缺省构造 x，y坐标都为0

        |

        *Overload 2:*
         从内存块构造 :param pBlob: 几何数据内存块 :param nLen: 内存块长度 xy坐标构造 :type x: float
        :param x: x坐标 :type y: float
        :param y: y坐标

        |

        *Overload 3:*
         从轻量点构造

        |

        *Overload 4:*
         从轻量点构造

        |

        *Overload 5:*
         xy坐标构造 :type x: float
        :param x: x坐标 :type y: float
        :param y: y坐标 :type z: float
        :param z: z坐标
        """
        _gskernel.GsPoint_swiginit(self, _gskernel.new_GsPoint(*args))

    def Set(self, *args) -> "GsPoint *":
        r"""
        *Overload 1:*
        设置xy坐标

        |

        *Overload 2:*
        设置xy,z坐标
        """
        return _gskernel.GsPoint_Set(self, *args)

    def Get(self, *args) -> "void":
        r"""
        *Overload 1:*
        获取点

        |

        *Overload 2:*
        获取点
        """
        return _gskernel.GsPoint_Get(self, *args)

    def Distance2(self, *args) -> "double":
        r"""
        *Overload 1:*
        得到this和o的距离的平方

        |

        *Overload 2:*
        得到this和o的距离的平方
        """
        return _gskernel.GsPoint_Distance2(self, *args)

    def Distance(self, *args) -> "double":
        r"""
        *Overload 1:*
        得到this和o的距离

        |

        *Overload 2:*
        得到this和o的距离
        """
        return _gskernel.GsPoint_Distance(self, *args)

    def Abs(self, *args) -> "double":
        r"""
        *Overload 1:*
        返回this和o的一次距离

        |

        *Overload 2:*
        返回this和o的一次距离
        """
        return _gskernel.GsPoint_Abs(self, *args)

    def Stand(self, r: 'double') -> "void":
        r""" 使得this到原点的距离为fabs(r)"""
        return _gskernel.GsPoint_Stand(self, r)

    def Mul(self, *args) -> "GsPoint *":
        r"""
        *Overload 1:*
        返回复数this和复数a的乘积

        |

        *Overload 2:*
        返回复数this和复数a的乘积
        """
        return _gskernel.GsPoint_Mul(self, *args)

    def X(self, *args) -> "void":
        r"""
        *Overload 1:*
        获取x坐标

        |

        *Overload 2:*
        设置x坐标
        """
        return _gskernel.GsPoint_X(self, *args)

    def Y(self, *args) -> "void":
        r"""
        *Overload 1:*
        获取y坐标

        |

        *Overload 2:*
        设置y坐标
        """
        return _gskernel.GsPoint_Y(self, *args)

    def Z(self, *args) -> "void":
        r"""
        *Overload 1:*
        获取z坐标

        |

        *Overload 2:*
        设置z坐标
        """
        return _gskernel.GsPoint_Z(self, *args)

    @staticmethod
    def CanDowncast(b: 'GsGeometry') -> "bool":
        return _gskernel.GsPoint_CanDowncast(b)

    @staticmethod
    def DowncastTo(b: 'GsGeometry') -> "GsSmarterPtr< GsPoint >":
        return _gskernel.GsPoint_DowncastTo(b)
    __swig_destroy__ = _gskernel.delete_GsPoint

# Register GsPoint in _gskernel:
_gskernel.GsPoint_swigregister(GsPoint)

def GsPoint_CanDowncast(b: 'GsGeometry') -> "bool":
    return _gskernel.GsPoint_CanDowncast(b)

def GsPoint_DowncastTo(b: 'GsGeometry') -> "GsSmarterPtr< GsPoint >":
    return _gskernel.GsPoint_DowncastTo(b)

class GsGeometryCollection(GsGeometry):
    r""" 几何对象集合"""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self):
        _gskernel.GsGeometryCollection_swiginit(self, _gskernel.new_GsGeometryCollection())
    __swig_destroy__ = _gskernel.delete_GsGeometryCollection

    def Count(self) -> "unsigned int":
        r"""
         几何对象的数量 :rtype: int
        :return: 返回几何对象的数量
        """
        return _gskernel.GsGeometryCollection_Count(self)

    def Geometry(self, nIndex: 'int') -> "GsSmarterPtr< GsGeometry >":
        r"""
         根据索引获得几何对象 :type nIndex: int
        :param nIndex: 索引 :rtype: GsSmarterPtr< GsGeometry >
        :return: 返回几何对象的指针
        """
        return _gskernel.GsGeometryCollection_Geometry(self, nIndex)

    def Add(self, *args) -> "void":
        r"""
        *Overload 1:*
         增加一个几何对象 :type pGeo: :py:class:`GsGeometry`
        :param pGeo: 几何对象指针

        |

        *Overload 2:*
         增加一个几何对象集合 :type pCollection: :py:class:`GsGeometryCollection`
        :param pCollection: 几何对象集合指针
        """
        return _gskernel.GsGeometryCollection_Add(self, *args)

    def AddCollection(self, pCollection: 'GsGeometryCollection') -> "void":
        r""" 将传入Geometry集合中的元素添加到这个集合"""
        return _gskernel.GsGeometryCollection_AddCollection(self, pCollection)

    def Insert(self, nIndex: 'int', pGeo: 'GsGeometry') -> "void":
        r"""
         插入一个几何对象 :type nIndex: int
        :param nIndex: 插入位置 :type pGeo: :py:class:`GsGeometry`
        :param pGeo:   几何对象指针
        """
        return _gskernel.GsGeometryCollection_Insert(self, nIndex, pGeo)

    def InsertCollection(self, nIndex: 'int', pCollection: 'GsGeometryCollection') -> "void":
        r"""
         插入多个几何对象 :type nIndex: int
        :param nIndex:   插入位置 :param nCount:   几何对象个数 :param pGeoList: 几何对象队列指针 插入一个几何对象集合 :type nIndex: int
        :param nIndex:      插入位置 :type pCollection: :py:class:`GsGeometryCollection`
        :param pCollection: 几何对象集合指针
        """
        return _gskernel.GsGeometryCollection_InsertCollection(self, nIndex, pCollection)

    def RemoveAt(self, nIndex: 'int') -> "GsSmarterPtr< GsGeometry >":
        r"""
         移除一个几何对象 :type nIndex: int
        :param nIndex: 几何对象索引
        """
        return _gskernel.GsGeometryCollection_RemoveAt(self, nIndex)

    def ReplaceAt(self, nIndex: 'int', pGeo: 'GsGeometry') -> "void":
        r"""
         根据位置替换一个几何对象 :type nIndex: int
        :param nIndex: 几何对象索引 :type pGeo: :py:class:`GsGeometry`
        :param pGeo:   几何对象指针
        """
        return _gskernel.GsGeometryCollection_ReplaceAt(self, nIndex, pGeo)

    def Clear(self) -> "void":
        r""" 清除几何对象"""
        return _gskernel.GsGeometryCollection_Clear(self)

    def GeometryBlobPtr(self) -> "GsGeometryBlob *":
        r"""
         获取存储几何数据的指针 :rtype: :py:class:`GsGeometryBlob`
        :return: 返回存储几何数据的指针
        """
        return _gskernel.GsGeometryCollection_GeometryBlobPtr(self)

    @staticmethod
    def CanDowncast(b: 'GsGeometry') -> "bool":
        return _gskernel.GsGeometryCollection_CanDowncast(b)

    @staticmethod
    def DowncastTo(b: 'GsGeometry') -> "GsSmarterPtr< GsGeometryCollection >":
        return _gskernel.GsGeometryCollection_DowncastTo(b)

# Register GsGeometryCollection in _gskernel:
_gskernel.GsGeometryCollection_swigregister(GsGeometryCollection)

def GsGeometryCollection_CanDowncast(b: 'GsGeometry') -> "bool":
    return _gskernel.GsGeometryCollection_CanDowncast(b)

def GsGeometryCollection_DowncastTo(b: 'GsGeometry') -> "GsSmarterPtr< GsGeometryCollection >":
    return _gskernel.GsGeometryCollection_DowncastTo(b)

class GsMultiPoint(GsGeometry):
    r""" 多点几何对象"""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        r"""
        *Overload 1:*
         默认构造函数

        |

        *Overload 2:*
         从内存块构造 :param pBlob: 几何数据内存块 :param nLen: 内存块长度 从一个点构造 :type pt: :py:class:`GsRawPoint`
        :param pt: GsRawPoint点

        |

        *Overload 3:*
         从一个点构造 :type pt: :py:class:`GsRawPoint3D`
        :param pt: GsRawPoint3D点

        |

        *Overload 4:*
         从一个点构造 :type x: float
        :param x: x坐标 :type y: float
        :param y: y坐标

        |

        *Overload 5:*
         从一个点构造 :type x: float
        :param x: x坐标 :type y: float
        :param y: y坐标 :type z: float
        :param z: z坐标

        |

        *Overload 6:*
         从一组点构造

        |

        *Overload 7:*
         从一组点构造
        """
        _gskernel.GsMultiPoint_swiginit(self, _gskernel.new_GsMultiPoint(*args))

    def Set(self, *args) -> "void":
        r"""
        *Overload 1:*
        设置MultiPoint

        |

        *Overload 2:*
        设置MultiPoint
        """
        return _gskernel.GsMultiPoint_Set(self, *args)

    def Add(self, *args) -> "void":
        r"""
        *Overload 1:*
        添加一个点

        |

        *Overload 2:*
        添加一个点

        |

        *Overload 3:*
        添加一个点

        |

        *Overload 4:*
        添加一个点

        |

        *Overload 5:*
        添加一组点

        |

        *Overload 6:*
        添加一组点
        """
        return _gskernel.GsMultiPoint_Add(self, *args)

    def Insert(self, *args) -> "void":
        r"""
        *Overload 1:*
        插入一个点

        |

        *Overload 2:*
        插入一个点

        |

        *Overload 3:*
        插入一个点

        |

        *Overload 4:*
        插入一个点

        |

        *Overload 5:*
        插入一组点

        |

        *Overload 6:*
        插入一组点
        """
        return _gskernel.GsMultiPoint_Insert(self, *args)

    def Replace(self, *args) -> "void":
        r"""
        *Overload 1:*
        更新点

        |

        *Overload 2:*
        更新点

        |

        *Overload 3:*
        更新点

        |

        *Overload 4:*
        更新点
        """
        return _gskernel.GsMultiPoint_Replace(self, *args)

    def PointAt(self, nIndex: 'int') -> "GsRawPoint3D":
        r""" 通过index查询点"""
        return _gskernel.GsMultiPoint_PointAt(self, nIndex)

    def Count(self) -> "unsigned int":
        r"""
         几何对象的数量 :rtype: int
        :return: 返回几何对象的数量
        """
        return _gskernel.GsMultiPoint_Count(self)

    def RemoveAt(self, nIndex: 'int') -> "void":
        r"""
         移除一个几何对象 :type nIndex: int
        :param nIndex: 几何对象索引
        """
        return _gskernel.GsMultiPoint_RemoveAt(self, nIndex)

    def Clear(self) -> "void":
        r""" 清除几何对象"""
        return _gskernel.GsMultiPoint_Clear(self)

    def IsEmpty(self) -> "bool":
        return _gskernel.GsMultiPoint_IsEmpty(self)

    @staticmethod
    def CanDowncast(b: 'GsGeometry') -> "bool":
        return _gskernel.GsMultiPoint_CanDowncast(b)

    @staticmethod
    def DowncastTo(b: 'GsGeometry') -> "GsSmarterPtr< GsMultiPoint >":
        return _gskernel.GsMultiPoint_DowncastTo(b)
    __swig_destroy__ = _gskernel.delete_GsMultiPoint

# Register GsMultiPoint in _gskernel:
_gskernel.GsMultiPoint_swigregister(GsMultiPoint)

def GsMultiPoint_CanDowncast(b: 'GsGeometry') -> "bool":
    return _gskernel.GsMultiPoint_CanDowncast(b)

def GsMultiPoint_DowncastTo(b: 'GsGeometry') -> "GsSmarterPtr< GsMultiPoint >":
    return _gskernel.GsMultiPoint_DowncastTo(b)

class GsSegment(GsGeometry):
    r""" 线段基类"""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _gskernel.delete_GsSegment

    def Length(self) -> "double":
        r"""
         获得Segment的长度. :rtype: float
        :return: Segment的长度.
        """
        return _gskernel.GsSegment_Length(self)

    def GeoDesicLength(self, *args) -> "double":
        r"""
        *Overload 1:*
         计算测地线长度. 坐标单位必须为度 :rtype: float
        :return: 测地线长度

        |

        *Overload 2:*
         计算特定椭球下测地线长度. 坐标单位必须为度 :rtype: float
        :return: 测地线长度
        """
        return _gskernel.GsSegment_GeoDesicLength(self, *args)

    def Nearest(self, *args) -> "double":
        r"""
        *Overload 1:*
         求出给定点到Segment最近点所在Segment上的位置 :type inPoint: :py:class:`GsRawPoint3D`
        :param inPoint:	给定点 :rtype: float
        :return: 给定点到Segment上最近点所在Segment上的位置

        |

        *Overload 2:*
         求出给定点到Segment最近点所在Segment上的位置 :type inPoint: :py:class:`GsRawPoint`
        :param inPoint:	给定点 :rtype: float
        :return: 给定点到Segment上最近点所在Segment上的位置
        """
        return _gskernel.GsSegment_Nearest(self, *args)

    def Distance2(self, *args) -> "double":
        return _gskernel.GsSegment_Distance2(self, *args)

    def Value(self, parameter: 'double') -> "GsRawPoint3D":
        r"""
         得到Segment在指定位置处的点. :type parameter: float
        :param parameter:	点在Segment上的比例参数. :rtype: :py:class:`GsRawPoint3D`
        :return: Segment在指定位置处的点.
        """
        return _gskernel.GsSegment_Value(self, parameter)

    def LeftRight(self, *args) -> "int":
        return _gskernel.GsSegment_LeftRight(self, *args)

    def IsPoint(self) -> "bool":
        r"""
         判断组成Segment的所有点是不是共点 :rtype: boolean
        :return: 如果共点返回true，如果不共点返回false
        """
        return _gskernel.GsSegment_IsPoint(self)

    def MaxParameter(self) -> "double":
        r"""
         Segment最大比例，Line返回1，CircleARC返回2. :rtype: float
        :return: 1或者2.
        """
        return _gskernel.GsSegment_MaxParameter(self)

    def Reverse(self) -> "GsSegment *":
        r""" 对Segment进行翻转."""
        return _gskernel.GsSegment_Reverse(self)

    def FromPoint(self, *args) -> "void":
        return _gskernel.GsSegment_FromPoint(self, *args)

    def ToPoint(self, *args) -> "void":
        return _gskernel.GsSegment_ToPoint(self, *args)

    @staticmethod
    def CanDowncast(b: 'GsGeometry') -> "bool":
        return _gskernel.GsSegment_CanDowncast(b)

    @staticmethod
    def DowncastTo(b: 'GsGeometry') -> "GsSmarterPtr< GsSegment >":
        return _gskernel.GsSegment_DowncastTo(b)

# Register GsSegment in _gskernel:
_gskernel.GsSegment_swigregister(GsSegment)

def GsSegment_CanDowncast(b: 'GsGeometry') -> "bool":
    return _gskernel.GsSegment_CanDowncast(b)

def GsSegment_DowncastTo(b: 'GsGeometry') -> "GsSmarterPtr< GsSegment >":
    return _gskernel.GsSegment_DowncastTo(b)

class GsPath(GsGeometry):
    r""" 连续折线"""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    eErrorPointRole = _gskernel.GsPath_eErrorPointRole
    eLinePointRole = _gskernel.GsPath_eLinePointRole
    eArcPointRole = _gskernel.GsPath_eArcPointRole
    eCtrlPointRole = _gskernel.GsPath_eCtrlPointRole

    def __init__(self, *args):
        r"""
        *Overload 1:*
        缺省构造

        |

        *Overload 2:*
        从内存中构造path 从一个矩形构造

        |

        *Overload 3:*
        从一个矩形构造

        |

        *Overload 4:*
        从一个圆心和半径构造圆

        |

        *Overload 5:*
        从一个圆心和半径构造圆

        |

        *Overload 6:*
        从3点构造一个圆

        |

        *Overload 7:*
        从3点构造一个圆

        |

        *Overload 8:*
        从一个椭圆构造

        |

        *Overload 9:*
        从一个椭圆构造

        |

        *Overload 10:*
        从一个椭圆构造

        |

        *Overload 11:*
        从一个椭圆构造
        """
        _gskernel.GsPath_swiginit(self, _gskernel.new_GsPath(*args))
    __swig_destroy__ = _gskernel.delete_GsPath

    def Reverse(self) -> "GsPath *":
        r""" 对Path进行翻转."""
        return _gskernel.GsPath_Reverse(self)

    def Set(self, *args) -> "bool":
        r"""
        *Overload 1:*
         将自身数据设置为一个矩形

        |

        *Overload 2:*
         根据圆心和半径设置自身为圆

        |

        *Overload 3:*
         根据圆心和半径设置自身为圆

        |

        *Overload 4:*
         根据3点设置自身为圆 :rtype: boolean
        :return: 如果3点共线则返回false

        |

        *Overload 5:*
         根据3点设置自身为圆 :rtype: boolean
        :return: 如果3点共线则返回false

        |

        *Overload 6:*
         根据圆心、长短半轴以及旋转角设置为椭圆

        |

        *Overload 7:*
         根据圆心、长短半轴以及旋转角设置为椭圆
        """
        return _gskernel.GsPath_Set(self, *args)

    def IsCircle(self) -> "bool":
        r""" 判断path是否构成了一个正圆，由两个三点圆弧构成圆。"""
        return _gskernel.GsPath_IsCircle(self)

    def IsClosed(self) -> "bool":
        r""" 是否封闭了"""
        return _gskernel.GsPath_IsClosed(self)

    def IsEmpty(self) -> "bool":
        r"""
         路径是否为空 :rtype: boolean
        :return: 返回路径是否为空。如果path中一个点也没有保存则为空
        """
        return _gskernel.GsPath_IsEmpty(self)

    def IsValid(self) -> "bool":
        r"""
         路径是否有效 :rtype: boolean
        :return: 返回路径是否有效，path中至少存在一个线段才是有效，因此最低需要2个点。
        """
        return _gskernel.GsPath_IsValid(self)

    def IsOnlyLine(self) -> "bool":
        r"""
         是否是完全由线构成的 :rtype: boolean
        :return: 是否是完全由线构成的
        """
        return _gskernel.GsPath_IsOnlyLine(self)

    def IsOnlyArc(self) -> "bool":
        r"""
         是否是完全由圆弧构成的 :rtype: boolean
        :return: 是否是完全由圆弧构成的
        """
        return _gskernel.GsPath_IsOnlyArc(self)

    def IsCompound(self) -> "bool":
        r"""
         是否是由圆弧和线组合的 :rtype: boolean
        :return: 是否是由圆弧和线组合的
        """
        return _gskernel.GsPath_IsCompound(self)

    def MaxParameter(self) -> "double":
        r"""
         最大的参数 :rtype: float
        :return: 最大的参数
        """
        return _gskernel.GsPath_MaxParameter(self)

    def Value(self, t: 'double') -> "GsRawPoint3D":
        r"""
         根据参数获得点坐标 :rtype: :py:class:`GsRawPoint3D`
        :return: 返回参数对应的点坐标。
        """
        return _gskernel.GsPath_Value(self, t)

    def Closet(self, *args) -> "double":
        r"""
        *Overload 1:*
         计算距离点最近的线上的参数 :rtype: float
        :return: 返回参数。

        |

        *Overload 2:*
         计算距离点最近的线上的参数 :rtype: float
        :return: 返回参数。
        """
        return _gskernel.GsPath_Closet(self, *args)

    def Add(self, *args) -> "void":
        r"""
        *Overload 1:*
         增加一个线段 :type pSeg: :py:class:`GsSegment`
        :param pSeg: 线段

        |

        *Overload 2:*
         增加一个点

        |

        *Overload 3:*
         增加一个3D点
        """
        return _gskernel.GsPath_Add(self, *args)

    def SegmentCount(self) -> "unsigned int":
        r"""
         线段的数量 :rtype: int
        :return: 返回Path中线段的数量
        """
        return _gskernel.GsPath_SegmentCount(self)

    def RemoveSegment(self, nIndex: 'int') -> "GsSmarterPtr< GsSegment >":
        r"""
         根据索引移除一个Segment :rtype: GsSmarterPtr< GsSegment >
        :return: 返回被移除的Segment的对象
        """
        return _gskernel.GsPath_RemoveSegment(self, nIndex)

    def Segment(self, i: 'int') -> "GsSmarterPtr< GsSegment >":
        r"""
         根据索引获取一个线段 :rtype: GsSmarterPtr< GsSegment >
        :return: 返回线段的对象或者空
        """
        return _gskernel.GsPath_Segment(self, i)

    def LineTo(self, *args) -> "void":
        r"""
        *Overload 1:*
        在尾部增加一段线。

        |

        *Overload 2:*
        在尾部增加一段线。
        """
        return _gskernel.GsPath_LineTo(self, *args)

    def ArcTo(self, *args) -> "void":
        r"""
        *Overload 1:*
        在尾部增加一段三点圆弧

        |

        *Overload 2:*
        在尾部增加一段三点圆弧
        """
        return _gskernel.GsPath_ArcTo(self, *args)

    def PointCount(self) -> "unsigned int":
        r"""
         返回点的数量 :rtype: int
        :return: 返回点的数量
        """
        return _gskernel.GsPath_PointCount(self)

    def Point(self, i: 'int') -> "GsRawPoint3D":
        r""" 获取第i个点"""
        return _gskernel.GsPath_Point(self, i)

    def PointRole(self, i: 'int') -> "GsPath::GsPathPointRole":
        r""" 根据索引获得点的角色"""
        return _gskernel.GsPath_PointRole(self, i)

    def StartPoint(self, *args) -> "void":
        r"""
        *Overload 1:*
        得到起点

        |

        *Overload 2:*
        设置为起点

        |

        *Overload 3:*
        设置3D起点
        """
        return _gskernel.GsPath_StartPoint(self, *args)

    def EndPoint(self, *args) -> "void":
        r"""
        *Overload 1:*
        得到终点

        |

        *Overload 2:*
        设置终点

        |

        *Overload 3:*
        设置3D终点
        """
        return _gskernel.GsPath_EndPoint(self, *args)

    def Insert(self, *args) -> "bool":
        r"""
        *Overload 1:*
        插入一个点

        |

        *Overload 2:*
        插入一个3D点
        """
        return _gskernel.GsPath_Insert(self, *args)

    def Remove(self, nIndex: 'int') -> "void":
        r""" 减少一个点"""
        return _gskernel.GsPath_Remove(self, nIndex)

    def Replace(self, *args) -> "void":
        r"""
        *Overload 1:*
        替换一个点

        |

        *Overload 2:*
        替换一个3D点
        """
        return _gskernel.GsPath_Replace(self, *args)

    def Interpolate(self, *args) -> "bool":
        r"""
        *Overload 1:*
         将自身中的圆弧内插成折线 :type num: int
        :param num: 180度内插的点数量 :rtype: boolean
        :return: 返回是否内插

        |

        *Overload 2:*
         将自身中的圆弧内插成折线，内插后的折线和圆弧之间的最大距离平方不超过tol2 :type tol2: float
        :param tol2: 内插后折线距离圆弧的最大距离 :rtype: boolean
        :return: 返回是否内插
        """
        return _gskernel.GsPath_Interpolate(self, *args)

    def Length(self) -> "double":
        r"""
         得到长度 :rtype: float
        :return: 返回Polyline长度
        """
        return _gskernel.GsPath_Length(self)

    def GeoDesicLength(self, *args) -> "double":
        r"""
        *Overload 1:*
         计算测地线长度. 坐标单位必须为度 :rtype: float
        :return: 测地线长度

        |

        *Overload 2:*
         计算特定椭球下测地线长度. 坐标单位必须为度 :rtype: float
        :return: 测地线长度
        """
        return _gskernel.GsPath_GeoDesicLength(self, *args)

    @staticmethod
    def CanDowncast(b: 'GsGeometry') -> "bool":
        return _gskernel.GsPath_CanDowncast(b)

    @staticmethod
    def DowncastTo(b: 'GsGeometry') -> "GsSmarterPtr< GsPath >":
        return _gskernel.GsPath_DowncastTo(b)

# Register GsPath in _gskernel:
_gskernel.GsPath_swigregister(GsPath)

def GsPath_CanDowncast(b: 'GsGeometry') -> "bool":
    return _gskernel.GsPath_CanDowncast(b)

def GsPath_DowncastTo(b: 'GsGeometry') -> "GsSmarterPtr< GsPath >":
    return _gskernel.GsPath_DowncastTo(b)

class GsRing(GsPath):
    r""" 单圈面"""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        r"""
        *Overload 1:*
        从内存中构造path 从一个矩形构造

        |

        *Overload 2:*
        从一个矩形构造

        |

        *Overload 3:*
        从一个圆心和半径构造圆

        |

        *Overload 4:*
        从一个圆心和半径构造圆

        |

        *Overload 5:*
        从3点构造一个圆

        |

        *Overload 6:*
        从3点构造一个圆

        |

        *Overload 7:*
        从一个椭圆构造

        |

        *Overload 8:*
        从一个椭圆构造

        |

        *Overload 9:*
        从一个椭圆构造

        |

        *Overload 10:*
        从一个椭圆构造
        """
        _gskernel.GsRing_swiginit(self, _gskernel.new_GsRing(*args))
    __swig_destroy__ = _gskernel.delete_GsRing

    def ForceClose(self) -> "bool":
        r""" 强制封闭"""
        return _gskernel.GsRing_ForceClose(self)

    def Area(self) -> "double":
        r""" 积分面积"""
        return _gskernel.GsRing_Area(self)

    def GeodesicArea(self, *args) -> "double":
        return _gskernel.GsRing_GeodesicArea(self, *args)

    def IsCounterClockwise(self) -> "bool":
        r""" 获取圈的方向是否是逆时针方向。"""
        return _gskernel.GsRing_IsCounterClockwise(self)

    def LabelPoint(self) -> "GsRawPoint":
        r"""
         Label点 :rtype: :py:class:`GsRawPoint`
        :return: 返回Label点
        """
        return _gskernel.GsRing_LabelPoint(self)

    def Centroid(self) -> "GsRawPoint":
        r"""
         重心点 :rtype: :py:class:`GsRawPoint`
        :return: 返回重心点
        """
        return _gskernel.GsRing_Centroid(self)

    def IsExterior(self) -> "bool":
        r"""
         是否是外圈 :rtype: boolean
        :return: 返回是否是外圈
        """
        return _gskernel.GsRing_IsExterior(self)

    def IsCover(self, ring: 'GsRing') -> "bool":
        r"""
         是否在空间上覆盖 :rtype: boolean
        :return: 返回是否覆盖
        """
        return _gskernel.GsRing_IsCover(self, ring)

    def SkeletonLine(self) -> "GsSmarterPtr< GsGeometry >":
        r"""
         获取面的骨架线 :rtype: GsSmarterPtr< GsGeometry >
        :return: 返回面的骨架线
        """
        return _gskernel.GsRing_SkeletonLine(self)

    @staticmethod
    def CanDowncast(b: 'GsPath') -> "bool":
        return _gskernel.GsRing_CanDowncast(b)

    @staticmethod
    def DowncastTo(b: 'GsPath') -> "GsSmarterPtr< GsRing >":
        return _gskernel.GsRing_DowncastTo(b)

# Register GsRing in _gskernel:
_gskernel.GsRing_swigregister(GsRing)

def GsRing_CanDowncast(b: 'GsPath') -> "bool":
    return _gskernel.GsRing_CanDowncast(b)

def GsRing_DowncastTo(b: 'GsPath') -> "GsSmarterPtr< GsRing >":
    return _gskernel.GsRing_DowncastTo(b)

class GsLine(GsSegment):
    r""" 两点线段"""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        r"""
        *Overload 1:*
         默认构造函数，创建由两个二维原点（0， 0）构成的GsLine

        |

        *Overload 2:*
         构造函数，根据内存块构造对象. :param pBlob:	几何数据内存块. :param nLen: 	内存块长度. 构造函数，根据起始点构造对象. :type fromPoint: :py:class:`GsRawPoint`
        :param fromPoint:	from point. :type toPoint: :py:class:`GsRawPoint`
        :param toPoint:  	to point.

        |

        *Overload 3:*
         根据点坐标构造对象. :type x1: float
        :param x1:	FromPoint的X坐标. :type y1: float
        :param y1:	FromPoint的Y坐标. :type x2: float
        :param x2:	ToPoint的X坐标. :type y2: float
        :param y2:	ToPoint的Y坐标.

        |

        *Overload 4:*
         拷贝构造函数. :param point:	The point.
        """
        _gskernel.GsLine_swiginit(self, _gskernel.new_GsLine(*args))
    __swig_destroy__ = _gskernel.delete_GsLine

    def Set(self, *args) -> "GsLine *":
        return _gskernel.GsLine_Set(self, *args)

    def Get(self, *args) -> "void":
        return _gskernel.GsLine_Get(self, *args)

    def Angle(self) -> "double":
        r"""
         获得Line的角度. :rtype: float
        :return: 角度值.
        """
        return _gskernel.GsLine_Angle(self)

    def Length(self) -> "double":
        r"""
         获得Segment的长度. :rtype: float
        :return: Segment的长度.
        """
        return _gskernel.GsLine_Length(self)

    def Nearest(self, inPoint: 'GsRawPoint3D') -> "double":
        r"""
         求出给定点到Segment最近点所在Segment上的位置 :type inPoint: :py:class:`GsRawPoint3D`
        :param inPoint:	给定点 :rtype: float
        :return: 给定点到Segment上最近点所在Segment上的位置
        """
        return _gskernel.GsLine_Nearest(self, inPoint)

    def Distance2(self, inPoint: 'GsRawPoint3D') -> "double":
        r"""
         求出给定点到Segment上的最短距离 :type inPoint: :py:class:`GsRawPoint3D`
        :param inPoint:	给定点 :rtype: float
        :return: 给定点到Segment上的最短距离
        """
        return _gskernel.GsLine_Distance2(self, inPoint)

    def Value(self, parameter: 'double') -> "GsRawPoint3D":
        r"""
         得到Segment在指定位置处的点. :type parameter: float
        :param parameter:	点在Segment上的比例参数. :rtype: :py:class:`GsRawPoint3D`
        :return: Segment在指定位置处的点.
        """
        return _gskernel.GsLine_Value(self, parameter)

    def LeftRight(self, pt: 'GsRawPoint3D', tol2: 'double') -> "int":
        r"""
         求点pt在直线me的左右边，返回1表示左边，返回2表示右边，0表示共线 :type pt: :py:class:`GsRawPoint3D`
        :param pt:  	给定的点 :type tol2: float
        :param tol2:	容差 :rtype: int
        :return: 返回1表示左边，返回2表示右边，0表示共线
        """
        return _gskernel.GsLine_LeftRight(self, pt, tol2)

    def IsPoint(self) -> "bool":
        r""" 判断组成Line的所有点是不是共点"""
        return _gskernel.GsLine_IsPoint(self)

    @staticmethod
    def CanDowncast(b: 'GsSegment') -> "bool":
        return _gskernel.GsLine_CanDowncast(b)

    @staticmethod
    def DowncastTo(b: 'GsSegment') -> "GsSmarterPtr< GsLine >":
        return _gskernel.GsLine_DowncastTo(b)

# Register GsLine in _gskernel:
_gskernel.GsLine_swigregister(GsLine)

def GsLine_CanDowncast(b: 'GsSegment') -> "bool":
    return _gskernel.GsLine_CanDowncast(b)

def GsLine_DowncastTo(b: 'GsSegment') -> "GsSmarterPtr< GsLine >":
    return _gskernel.GsLine_DowncastTo(b)

class GsCircleArc(GsSegment):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        _gskernel.GsCircleArc_swiginit(self, _gskernel.new_GsCircleArc(*args))

    def Set(self, *args) -> "void":
        return _gskernel.GsCircleArc_Set(self, *args)

    def Nearest(self, inPoint: 'GsRawPoint3D') -> "double":
        r"""
         求出给定点到Segment最近点所在Segment上的位置 :type inPoint: :py:class:`GsRawPoint3D`
        :param inPoint:	给定点 :rtype: float
        :return: 给定点到Segment上最近点所在Segment上的位置
        """
        return _gskernel.GsCircleArc_Nearest(self, inPoint)

    def Distance2(self, inPoint: 'GsRawPoint3D') -> "double":
        r"""
         求出给定点到Segment上的最短距离 :type inPoint: :py:class:`GsRawPoint3D`
        :param inPoint:	给定点 :rtype: float
        :return: 给定点到Segment上的最短距离
        """
        return _gskernel.GsCircleArc_Distance2(self, inPoint)

    def LeftRight(self, pt: 'GsRawPoint3D', tol2: 'double') -> "int":
        r"""
         求点pt在直线me的左右边，返回1表示左边，返回2表示右边，0表示共线 :type pt: :py:class:`GsRawPoint3D`
        :param pt:  	给定的点 :type tol2: float
        :param tol2:	容差 :rtype: int
        :return: 返回1表示左边，返回2表示右边，0表示共线
        """
        return _gskernel.GsCircleArc_LeftRight(self, pt, tol2)

    def ChordHeight(self) -> "double":
        r""" 获取圆弧弦高"""
        return _gskernel.GsCircleArc_ChordHeight(self)

    def Angle(self, angle: 'double *') -> "void":
        r""" 获取圆弧的起始角度和终止角度"""
        return _gskernel.GsCircleArc_Angle(self, angle)

    def Radius(self) -> "double":
        r""" 获取圆弧的半径"""
        return _gskernel.GsCircleArc_Radius(self)

    def CenterPoint(self) -> "GsRawPoint3D":
        r""" 获取圆弧的圆心"""
        return _gskernel.GsCircleArc_CenterPoint(self)

    def IsCounterClockwise(self) -> "bool":
        r""" 获取圆弧是否逆时针方向"""
        return _gskernel.GsCircleArc_IsCounterClockwise(self)

    def IsLine(self) -> "bool":
        r""" 获取圆弧是否直线"""
        return _gskernel.GsCircleArc_IsLine(self)

    def IsMinor(self) -> "bool":
        r""" 获取圆弧是优弧或劣弧"""
        return _gskernel.GsCircleArc_IsMinor(self)

    def IsPoint(self) -> "bool":
        r""" 获取圆弧是否为同一点"""
        return _gskernel.GsCircleArc_IsPoint(self)

    def Complement(self) -> "void":
        r""" 得到弧段的补弧，起点，终点不变"""
        return _gskernel.GsCircleArc_Complement(self)

    def MiddlePoint(self, *args) -> "void":
        r"""
        *Overload 1:*
        获取中间点,三点圆弧第二个点

        |

        *Overload 2:*
        设置三点圆弧第二个点

        |

        *Overload 3:*
        设置三点圆弧第二个点
        """
        return _gskernel.GsCircleArc_MiddlePoint(self, *args)

    def Get(self, *args) -> "void":
        return _gskernel.GsCircleArc_Get(self, *args)

    def Length(self) -> "double":
        r"""获取圆弧的长度"""
        return _gskernel.GsCircleArc_Length(self)

    def Value(self, parameter: 'double') -> "GsRawPoint3D":
        r"""
         得到Segment在指定位置处的点. :type parameter: float
        :param parameter:	点在Segment上的比例参数. :rtype: :py:class:`GsRawPoint3D`
        :return: Segment在指定位置处的点.
        """
        return _gskernel.GsCircleArc_Value(self, parameter)

    def Interpolate(self, *args) -> "void":
        r"""
        *Overload 1:*
         将自身内插为折线， :type num: int
        :param num:	180度内插的点数量 :type vec: GsVector< GsRawPoint3D >
        :param vec:	输出点.

        |

        *Overload 2:*
         将自身内插为折线 :type dblTol2: float
        :param dblTol2:	 内插的折线距离圆弧的的最大距离的平方 :type vec: GsVector< GsRawPoint3D >
        :param vec:	输出点.
        """
        return _gskernel.GsCircleArc_Interpolate(self, *args)

    @staticmethod
    def CanDowncast(b: 'GsSegment') -> "bool":
        return _gskernel.GsCircleArc_CanDowncast(b)

    @staticmethod
    def DowncastTo(b: 'GsSegment') -> "GsSmarterPtr< GsCircleArc >":
        return _gskernel.GsCircleArc_DowncastTo(b)
    __swig_destroy__ = _gskernel.delete_GsCircleArc

# Register GsCircleArc in _gskernel:
_gskernel.GsCircleArc_swigregister(GsCircleArc)

def GsCircleArc_CanDowncast(b: 'GsSegment') -> "bool":
    return _gskernel.GsCircleArc_CanDowncast(b)

def GsCircleArc_DowncastTo(b: 'GsSegment') -> "GsSmarterPtr< GsCircleArc >":
    return _gskernel.GsCircleArc_DowncastTo(b)

class GsPolygon(GsGeometryCollection):
    r""" 多边形对象"""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        r"""
        *Overload 1:*
        从内存块构造 :param pBlob: 几何数据内存块 :param nLen: 内存块长度 默认构造

        |

        *Overload 2:*
        根据线创建面,会对线做清理处理,构建出来的面有可能是多面

        |

        *Overload 3:*
        根据线创建面,会对线做清理处理,构建出来的面有可能是多面

        |

        *Overload 4:*
        根据线创建面,会对线做清理处理,构建出来的面有可能是多面

        |

        *Overload 5:*
        根据线创建面,会对线做清理处理,构建出来的面有可能是多面
        """
        _gskernel.GsPolygon_swiginit(self, _gskernel.new_GsPolygon(*args))

    def IsClosed(self) -> "bool":
        r""" 是否闭合"""
        return _gskernel.GsPolygon_IsClosed(self)

    def ForceClose(self) -> "bool":
        r""" 强制闭合"""
        return _gskernel.GsPolygon_ForceClose(self)

    def FindExteriorRing(self, pInteriorRing: 'GsRing') -> "GsSmarterPtr< GsRing >":
        r""" 获取内环的外环"""
        return _gskernel.GsPolygon_FindExteriorRing(self, pInteriorRing)

    def InteriorRingCount(self, pExteriorRing: 'GsRing') -> "int":
        r""" 获取外环的内环个数"""
        return _gskernel.GsPolygon_InteriorRingCount(self, pExteriorRing)

    def InteriorRings(self, ppCollection: 'GsRing') -> "GsSmarterPtr< GsGeometryCollection >":
        r""" 获取外环的所有内环"""
        return _gskernel.GsPolygon_InteriorRings(self, ppCollection)

    def ExteriorRingCount(self) -> "int":
        r""" 获取外环个数"""
        return _gskernel.GsPolygon_ExteriorRingCount(self)

    def ExteriorRings(self) -> "GsSmarterPtr< GsGeometryCollection >":
        r""" 获取所有的外环"""
        return _gskernel.GsPolygon_ExteriorRings(self)

    def Area(self) -> "double":
        r""" 获取面积"""
        return _gskernel.GsPolygon_Area(self)

    def GeodesicArea(self, *args) -> "double":
        return _gskernel.GsPolygon_GeodesicArea(self, *args)

    def Length(self) -> "double":
        r"""
         得到长度 :rtype: float
        :return: 返回Polyline长度
        """
        return _gskernel.GsPolygon_Length(self)

    def GeoDesicLength(self, *args) -> "double":
        r"""
        *Overload 1:*
         计算测地线长度. 坐标单位必须为度 :rtype: float
        :return: 测地线长度

        |

        *Overload 2:*
         计算特定椭球下测地线长度. 坐标单位必须为度 :rtype: float
        :return: 测地线长度
        """
        return _gskernel.GsPolygon_GeoDesicLength(self, *args)

    def LabelPoint(self) -> "GsRawPoint":
        r""" 获取面状几何对象的一个内部点"""
        return _gskernel.GsPolygon_LabelPoint(self)

    def Centroid(self) -> "GsRawPoint":
        r""" 获取面的重心"""
        return _gskernel.GsPolygon_Centroid(self)

    def IsEmpty(self) -> "bool":
        r""" 判断是否为空"""
        return _gskernel.GsPolygon_IsEmpty(self)

    def IsMultiPolygon(self) -> "bool":
        r""" 是否是复合多边形（具有多个外圈的多边形）"""
        return _gskernel.GsPolygon_IsMultiPolygon(self)

    def ToSimplePolygon(self) -> "GsSmarterPtr< GsGeometryCollection >":
        r""" 将复合多边分解为为多个简单多边形。"""
        return _gskernel.GsPolygon_ToSimplePolygon(self)

    def SkeletonLine(self) -> "GsSmarterPtr< GsGeometry >":
        r"""
         获取面的骨架线 :rtype: GsSmarterPtr< GsGeometry >
        :return: 返回面的骨架线
        """
        return _gskernel.GsPolygon_SkeletonLine(self)

    @staticmethod
    def CanDowncast(b: 'GsGeometryCollection') -> "bool":
        return _gskernel.GsPolygon_CanDowncast(b)

    @staticmethod
    def DowncastTo(b: 'GsGeometryCollection') -> "GsSmarterPtr< GsPolygon >":
        return _gskernel.GsPolygon_DowncastTo(b)
    __swig_destroy__ = _gskernel.delete_GsPolygon

# Register GsPolygon in _gskernel:
_gskernel.GsPolygon_swigregister(GsPolygon)

def GsPolygon_CanDowncast(b: 'GsGeometryCollection') -> "bool":
    return _gskernel.GsPolygon_CanDowncast(b)

def GsPolygon_DowncastTo(b: 'GsGeometryCollection') -> "GsSmarterPtr< GsPolygon >":
    return _gskernel.GsPolygon_DowncastTo(b)

class GsPolyline(GsGeometryCollection):
    r""" 多段线"""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self):
        r""" 缺省构造"""
        _gskernel.GsPolyline_swiginit(self, _gskernel.new_GsPolyline())

    def StartPoint(self, *args) -> "GsRawPoint3D":
        r"""
        *Overload 1:*
         从内存块构造 :param pBlob: 几何数据内存块 :param nLen: 内存块长度 设置为起点 :type rhs: :py:class:`GsRawPoint`
        :param rhs: 二维点对象

        |

        *Overload 2:*
         设置起点 :type rhs: :py:class:`GsRawPoint3D`
        :param rhs: 三维点对象

        |

        *Overload 3:*
         得到起点 :rtype: :py:class:`GsRawPoint3D`
        :return: 返回三维起点
        """
        return _gskernel.GsPolyline_StartPoint(self, *args)

    def EndPoint(self, *args) -> "GsRawPoint3D":
        r"""
        *Overload 1:*
         设置终点 :type rhs: :py:class:`GsRawPoint`
        :param rhs: 二维点对象

        |

        *Overload 2:*
         设置终点 :type rhs: :py:class:`GsRawPoint3D`
        :param rhs: 三维点对象

        |

        *Overload 3:*
         得到终点 :rtype: :py:class:`GsRawPoint3D`
        :return: 返回三维起点
        """
        return _gskernel.GsPolyline_EndPoint(self, *args)

    def Length(self) -> "double":
        r"""
         得到长度 :rtype: float
        :return: 返回Polyline长度
        """
        return _gskernel.GsPolyline_Length(self)

    def GeoDesicLength(self, *args) -> "double":
        r"""
        *Overload 1:*
         计算测地线长度. 坐标单位必须为度 :rtype: float
        :return: 测地线长度

        |

        *Overload 2:*
         计算特定椭球下测地线长度. 坐标单位必须为度 :rtype: float
        :return: 测地线长度
        """
        return _gskernel.GsPolyline_GeoDesicLength(self, *args)

    def Reverse(self) -> "GsPolyline *":
        r"""
         反转Polyline :rtype: :py:class:`GsPolyline`
        :return: 返回反转后的Polyline
        """
        return _gskernel.GsPolyline_Reverse(self)

    def Closet(self, *args) -> "double":
        r"""
        *Overload 1:*
         计算距离点最近的线上的参数 :rtype: float
        :return: 返回参数。

        |

        *Overload 2:*
         计算距离点最近的线上的参数 :rtype: float
        :return: 返回参数。
        """
        return _gskernel.GsPolyline_Closet(self, *args)

    def Value(self, parameter: 'double') -> "GsRawPoint3D":
        r"""
         得到Polyline在指定位置处的点 :type parameter: float
        :param parameter:	点在Polyline上的比例参数. :rtype: :py:class:`GsRawPoint3D`
        :return: Polyline在指定位置处的点.
        """
        return _gskernel.GsPolyline_Value(self, parameter)

    def SubCurve(self, dblFromDis: 'double', dblToDis: 'double') -> "GsSmarterPtr< GsPolyline >":
        r"""
         得到子部分 :type dblFromDis: float
        :param dblFromDis:	输入的起点参数位置 :type dblToDis: float
        :param dblToDis:	输入的终点参数位置 :rtype: GsSmarterPtr< GsPolyline >
        :return: 新的Polyline
        """
        return _gskernel.GsPolyline_SubCurve(self, dblFromDis, dblToDis)

    @staticmethod
    def CanDowncast(b: 'GsGeometryCollection') -> "bool":
        return _gskernel.GsPolyline_CanDowncast(b)

    @staticmethod
    def DowncastTo(b: 'GsGeometryCollection') -> "GsSmarterPtr< GsPolyline >":
        return _gskernel.GsPolyline_DowncastTo(b)
    __swig_destroy__ = _gskernel.delete_GsPolyline

# Register GsPolyline in _gskernel:
_gskernel.GsPolyline_swigregister(GsPolyline)

def GsPolyline_CanDowncast(b: 'GsGeometryCollection') -> "bool":
    return _gskernel.GsPolyline_CanDowncast(b)

def GsPolyline_DowncastTo(b: 'GsGeometryCollection') -> "GsSmarterPtr< GsPolyline >":
    return _gskernel.GsPolyline_DowncastTo(b)

eOGCGeometry = _gskernel.eOGCGeometry
eOGCPoint = _gskernel.eOGCPoint
eOGCLineString = _gskernel.eOGCLineString
eOGCPolygon = _gskernel.eOGCPolygon
eOGCMultiPoint = _gskernel.eOGCMultiPoint
eOGCMultiLineString = _gskernel.eOGCMultiLineString
eOGCMultiPolygon = _gskernel.eOGCMultiPolygon
eOGCGeometryCollection = _gskernel.eOGCGeometryCollection
eOGCCircularString = _gskernel.eOGCCircularString
eOGCCompoundCurve = _gskernel.eOGCCompoundCurve
eOGCCurvePolygon = _gskernel.eOGCCurvePolygon
eOGCMultiCurve = _gskernel.eOGCMultiCurve
eOGCMultiSurface = _gskernel.eOGCMultiSurface
eOGCCurve = _gskernel.eOGCCurve
eOGCSurface = _gskernel.eOGCSurface
eOGCPolyhedralSurface = _gskernel.eOGCPolyhedralSurface
eOGCTIN = _gskernel.eOGCTIN
eOGCGeometryZ = _gskernel.eOGCGeometryZ
eOGCPointZ = _gskernel.eOGCPointZ
eOGCLineStringZ = _gskernel.eOGCLineStringZ
eOGCPolygonZ = _gskernel.eOGCPolygonZ
eOGCMultiPointZ = _gskernel.eOGCMultiPointZ
eOGCMultiLineStringZ = _gskernel.eOGCMultiLineStringZ
eOGCMultiPolygonZ = _gskernel.eOGCMultiPolygonZ
eOGCGeometryCollectionZ = _gskernel.eOGCGeometryCollectionZ
eOGCCircularStringZ = _gskernel.eOGCCircularStringZ
eOGCCompoundCurveZ = _gskernel.eOGCCompoundCurveZ
eOGCCurvePolygonZ = _gskernel.eOGCCurvePolygonZ
eOGCMultiCurveZ = _gskernel.eOGCMultiCurveZ
eOGCMultiSurfaceZ = _gskernel.eOGCMultiSurfaceZ
eOGCCurveZ = _gskernel.eOGCCurveZ
eOGCSurfaceZ = _gskernel.eOGCSurfaceZ
eOGCPolyhedralSurfaceZ = _gskernel.eOGCPolyhedralSurfaceZ
eOGCTINZ = _gskernel.eOGCTINZ
eXDR = _gskernel.eXDR
r""" 高字节序 Big Endian"""
eNDR = _gskernel.eNDR
r""" 低字节序  Little Endian"""
eDoNotInterpolationStyle = _gskernel.eDoNotInterpolationStyle
r""" 不插值，那么圆弧点将会当作折线点来使用"""
eInterpolationByAngle = _gskernel.eInterpolationByAngle
r""" 根据圆弧的角度进行插值"""
eInterpolationByDistance = _gskernel.eInterpolationByDistance
r""" 根据圆弧和插值结果的最大距离。"""
class GsOGCReader(object):
    r""" OGC几何对象读取"""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __swig_destroy__ = _gskernel.delete_GsOGCReader

    def Read(self) -> "GsSmarterPtr< GsGeometry >":
        r""" 读取生成一个几何对象。"""
        return _gskernel.GsOGCReader_Read(self)

    def InvertedAxisOrder(self, *args) -> "void":
        r"""
        *Overload 1:*
        获取坐标是否反向读取参数如果为true，读取的时候将xy反向读取,，如果为false，坐标顺序读取

        |

        *Overload 2:*
        设置坐标是否反读取向参数如果为true，读取的时候将xy反向读取,，如果为false，坐标顺序读取
        """
        return _gskernel.GsOGCReader_InvertedAxisOrder(self, *args)

# Register GsOGCReader in _gskernel:
_gskernel.GsOGCReader_swigregister(GsOGCReader)

class GsWKTOGCReader(GsOGCReader):
    r""" WKT格式读取"""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, strWKT: 'char const *'):
        _gskernel.GsWKTOGCReader_swiginit(self, _gskernel.new_GsWKTOGCReader(strWKT))

    def Begin(self, strWKT: 'char const *') -> "void":
        r""" 重新设置一段新的wkt字符串用于解析"""
        return _gskernel.GsWKTOGCReader_Begin(self, strWKT)
    __swig_destroy__ = _gskernel.delete_GsWKTOGCReader

# Register GsWKTOGCReader in _gskernel:
_gskernel.GsWKTOGCReader_swigregister(GsWKTOGCReader)

class GsWKBOGCReader(GsOGCReader):
    r""" WKB格式读取"""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        _gskernel.GsWKBOGCReader_swiginit(self, _gskernel.new_GsWKBOGCReader(*args))

    def Begin(self, pBuffer: 'signed char const *', nLen: 'int') -> "void":
        r""" 重新设置一段新的WKB数据用于解析Geometry"""
        return _gskernel.GsWKBOGCReader_Begin(self, pBuffer, nLen)
    __swig_destroy__ = _gskernel.delete_GsWKBOGCReader

# Register GsWKBOGCReader in _gskernel:
_gskernel.GsWKBOGCReader_swigregister(GsWKBOGCReader)

class GsKMLOGCReader(GsOGCReader):
    r""" KML格式读入"""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, pKML: 'char const *'):
        _gskernel.GsKMLOGCReader_swiginit(self, _gskernel.new_GsKMLOGCReader(pKML))
    __swig_destroy__ = _gskernel.delete_GsKMLOGCReader

    def Begin(self, pKML: 'char const *') -> "void":
        r""" 重新设置KML字符串开始读取"""
        return _gskernel.GsKMLOGCReader_Begin(self, pKML)

# Register GsKMLOGCReader in _gskernel:
_gskernel.GsKMLOGCReader_swigregister(GsKMLOGCReader)

class GsGMLOGCReader(GsOGCReader):
    r""" GML格式读入"""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, strGML: 'char const *'):
        _gskernel.GsGMLOGCReader_swiginit(self, _gskernel.new_GsGMLOGCReader(strGML))
    __swig_destroy__ = _gskernel.delete_GsGMLOGCReader

    def Begin(self, strGML: 'char const *') -> "void":
        return _gskernel.GsGMLOGCReader_Begin(self, strGML)

    def Read(self) -> "GsSmarterPtr< GsGeometry >":
        r""" 读取生成一个几何对象。"""
        return _gskernel.GsGMLOGCReader_Read(self)

# Register GsGMLOGCReader in _gskernel:
_gskernel.GsGMLOGCReader_swigregister(GsGMLOGCReader)

class GsGeoJSONOGCReader(GsOGCReader):
    r""" GeoJSON格式读入"""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, strGeoJSON: 'char const *'):
        _gskernel.GsGeoJSONOGCReader_swiginit(self, _gskernel.new_GsGeoJSONOGCReader(strGeoJSON))

    def Begin(self, strGeoJSON: 'char const *') -> "void":
        r""" 重新设置GeoJson字符串用于解析几何对象"""
        return _gskernel.GsGeoJSONOGCReader_Begin(self, strGeoJSON)

    def AttributeSize(self) -> "int":
        r""" 从GeoJson读取的属性字段的数量"""
        return _gskernel.GsGeoJSONOGCReader_AttributeSize(self)

    def AttributeName(self, i: 'int') -> "char const *":
        r""" 根据索引获取属性数据的名称"""
        return _gskernel.GsGeoJSONOGCReader_AttributeName(self, i)

    def Attribute(self, i: 'int') -> "GsAny const &":
        r""" 根据索引获取属性数据"""
        return _gskernel.GsGeoJSONOGCReader_Attribute(self, i)

    def CrsID(self) -> "int":
        return _gskernel.GsGeoJSONOGCReader_CrsID(self)
    __swig_destroy__ = _gskernel.delete_GsGeoJSONOGCReader

# Register GsGeoJSONOGCReader in _gskernel:
_gskernel.GsGeoJSONOGCReader_swigregister(GsGeoJSONOGCReader)

class GsOGCWriter(object):
    r""" OGC几何对象写入"""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _gskernel.delete_GsOGCWriter

    def InterpolationStyle(self, *args) -> "void":
        r"""
        *Overload 1:*
        获取圆弧的插值类型

        |

        *Overload 2:*
        设置圆弧的插值类型
        """
        return _gskernel.GsOGCWriter_InterpolationStyle(self, *args)

    def InterpolationParameter(self, *args) -> "void":
        r"""
        *Overload 1:*
        圆弧插值参数当插值类型为eInterpolationByAngle时参数代表每180（PI)的角度插值多少点，当插值类型为eInterpolationByDistance时参数代表插值后的折线距离圆弧的最大距离。

        |

        *Overload 2:*
        设置圆弧插值参数当插值类型为eInterpolationByAngle时参数代表每180（PI)的角度插值多少点，当插值类型为eInterpolationByDistance时参数代表插值后的折线距离圆弧的最大距离。
        """
        return _gskernel.GsOGCWriter_InterpolationParameter(self, *args)

    def InvertedAxisOrder(self, *args) -> "void":
        r"""
        *Overload 1:*
        获取坐标是否反向参数如果为true，输出的时候将xy反向输出，如果为false，xy坐标不反向直接输出

        |

        *Overload 2:*
        设置坐标是否反向参数如果为true，输出的时候将xy反向输出，如果为false，xy坐标不反向直接输出
        """
        return _gskernel.GsOGCWriter_InvertedAxisOrder(self, *args)

    def Write(self, pGeo: 'GsGeometry') -> "bool":
        r""" 写入一个几何对象。"""
        return _gskernel.GsOGCWriter_Write(self, pGeo)

    def Reset(self) -> "void":
        r""" 重置Writer恢复到初始状态"""
        return _gskernel.GsOGCWriter_Reset(self)

    @staticmethod
    def OGCGeometryType(pGeo: 'GsGeometry') -> "GsOGCGeometryType":
        return _gskernel.GsOGCWriter_OGCGeometryType(pGeo)

# Register GsOGCWriter in _gskernel:
_gskernel.GsOGCWriter_swigregister(GsOGCWriter)

def GsOGCWriter_OGCGeometryType(pGeo: 'GsGeometry') -> "GsOGCGeometryType":
    return _gskernel.GsOGCWriter_OGCGeometryType(pGeo)

class GsWKTOGCWriter(GsOGCWriter):
    r""" WKT格式写入"""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self):
        _gskernel.GsWKTOGCWriter_swiginit(self, _gskernel.new_GsWKTOGCWriter())

    def WKT(self) -> "GsString":
        r""" 获取写入的wkt字符串"""
        return _gskernel.GsWKTOGCWriter_WKT(self)

    def Reset(self) -> "void":
        r""" 重置Writer恢复到初始状态"""
        return _gskernel.GsWKTOGCWriter_Reset(self)
    __swig_destroy__ = _gskernel.delete_GsWKTOGCWriter

# Register GsWKTOGCWriter in _gskernel:
_gskernel.GsWKTOGCWriter_swigregister(GsWKTOGCWriter)

class GsWKBOGCWriter(GsOGCWriter):
    r""" WKB格式写入"""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, pBuffer: 'GsGrowByteBuffer', eByteOrder: 'GsOGCByteOrder'=eXDR):
        _gskernel.GsWKBOGCWriter_swiginit(self, _gskernel.new_GsWKBOGCWriter(pBuffer, eByteOrder))

    def WKB(self) -> "GsGrowByteBuffer *":
        r""" 缓存"""
        return _gskernel.GsWKBOGCWriter_WKB(self)

    def Reset(self) -> "void":
        r""" 重置Writer恢复到初始状态"""
        return _gskernel.GsWKBOGCWriter_Reset(self)
    __swig_destroy__ = _gskernel.delete_GsWKBOGCWriter

# Register GsWKBOGCWriter in _gskernel:
_gskernel.GsWKBOGCWriter_swigregister(GsWKBOGCWriter)

class GsGMLOGCWriter(GsOGCWriter):
    r""" GML格式写入"""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def GML(self) -> "GsString":
        r""" 获取写入的gml字符串"""
        return _gskernel.GsGMLOGCWriter_GML(self)

    def __init__(self):
        _gskernel.GsGMLOGCWriter_swiginit(self, _gskernel.new_GsGMLOGCWriter())

    def Reset(self) -> "void":
        r""" 重置Writer恢复到初始状态"""
        return _gskernel.GsGMLOGCWriter_Reset(self)
    __swig_destroy__ = _gskernel.delete_GsGMLOGCWriter

# Register GsGMLOGCWriter in _gskernel:
_gskernel.GsGMLOGCWriter_swigregister(GsGMLOGCWriter)

class GsGML3OGCWriter(GsGMLOGCWriter):
    r""" GML格式写入"""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self):
        _gskernel.GsGML3OGCWriter_swiginit(self, _gskernel.new_GsGML3OGCWriter())
    __swig_destroy__ = _gskernel.delete_GsGML3OGCWriter

# Register GsGML3OGCWriter in _gskernel:
_gskernel.GsGML3OGCWriter_swigregister(GsGML3OGCWriter)

class GsKMLOGCWriter(GsOGCWriter):
    r""" KML格式写入"""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def KML(self) -> "GsString":
        r""" 获取写入的gml字符串"""
        return _gskernel.GsKMLOGCWriter_KML(self)

    def __init__(self):
        _gskernel.GsKMLOGCWriter_swiginit(self, _gskernel.new_GsKMLOGCWriter())

    def Reset(self) -> "void":
        r""" 重置Writer恢复到初始状态"""
        return _gskernel.GsKMLOGCWriter_Reset(self)
    __swig_destroy__ = _gskernel.delete_GsKMLOGCWriter

# Register GsKMLOGCWriter in _gskernel:
_gskernel.GsKMLOGCWriter_swigregister(GsKMLOGCWriter)

class GsGeoJSONOGCWriter(GsOGCWriter):
    r""" GeoJSON格式写入"""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self):
        _gskernel.GsGeoJSONOGCWriter_swiginit(self, _gskernel.new_GsGeoJSONOGCWriter())

    def GeoJSON(self) -> "GsString":
        r""" 获取写入的GeoJSON字符串"""
        return _gskernel.GsGeoJSONOGCWriter_GeoJSON(self)

    def Reset(self) -> "void":
        r""" 重置Writer恢复到初始状态"""
        return _gskernel.GsGeoJSONOGCWriter_Reset(self)

    def AttributeSize(self) -> "int":
        r""" GeoJson属性字段的数量"""
        return _gskernel.GsGeoJSONOGCWriter_AttributeSize(self)

    def ClearAttribute(self) -> "void":
        r""" 清除属性字段"""
        return _gskernel.GsGeoJSONOGCWriter_ClearAttribute(self)

    def AttributeName(self, i: 'int') -> "char const *":
        r""" 根据索引获取属性数据的名称"""
        return _gskernel.GsGeoJSONOGCWriter_AttributeName(self, i)

    def Attribute(self, *args) -> "void":
        r"""
        *Overload 1:*
        根据索引获取属性数据

        |

        *Overload 2:*
        设置属性字段值
        """
        return _gskernel.GsGeoJSONOGCWriter_Attribute(self, *args)

    def RemoveAttribute(self, *args) -> "void":
        r"""
        *Overload 1:*
        删除属性字段

        |

        *Overload 2:*
        删除属性字段
        """
        return _gskernel.GsGeoJSONOGCWriter_RemoveAttribute(self, *args)
    __swig_destroy__ = _gskernel.delete_GsGeoJSONOGCWriter

# Register GsGeoJSONOGCWriter in _gskernel:
_gskernel.GsGeoJSONOGCWriter_swigregister(GsGeoJSONOGCWriter)

class GsIndexGeometry(GsRefObject):
    r""" 针对Geometry封装类，内部存储Geometry索引，加速控件操作比较效率"""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        r""" 初始化索引几何对象"""
        _gskernel.GsIndexGeometry_swiginit(self, _gskernel.new_GsIndexGeometry(*args))

    def IsTouch(self, *args) -> "GsGeometryRelationResult":
        return _gskernel.GsIndexGeometry_IsTouch(self, *args)

    def IsWithin(self, *args) -> "GsGeometryRelationResult":
        return _gskernel.GsIndexGeometry_IsWithin(self, *args)

    def IsContain(self, *args) -> "GsGeometryRelationResult":
        return _gskernel.GsIndexGeometry_IsContain(self, *args)

    def IsCross(self, *args) -> "GsGeometryRelationResult":
        return _gskernel.GsIndexGeometry_IsCross(self, *args)

    def IsOverlap(self, *args) -> "GsGeometryRelationResult":
        return _gskernel.GsIndexGeometry_IsOverlap(self, *args)

    def IsDisjoin(self, *args) -> "GsGeometryRelationResult":
        return _gskernel.GsIndexGeometry_IsDisjoin(self, *args)

    def IsIntersect(self, *args) -> "GsGeometryRelationResult":
        return _gskernel.GsIndexGeometry_IsIntersect(self, *args)

    def Intersection(self, pOther: 'GsGeometry') -> "GsSmarterPtr< GsGeometry >":
        r""" 计算和另外一个几何对象的相交的部分"""
        return _gskernel.GsIndexGeometry_Intersection(self, pOther)

    def Union(self, pOther: 'GsGeometry') -> "GsSmarterPtr< GsGeometry >":
        r""" 计算和另外一个几何对象的合并的结果"""
        return _gskernel.GsIndexGeometry_Union(self, pOther)

    def Difference(self, pOther: 'GsGeometry') -> "GsSmarterPtr< GsGeometry >":
        r""" 计算和另外一个几何对象不同的部分"""
        return _gskernel.GsIndexGeometry_Difference(self, pOther)

    def SymDifference(self, pOther: 'GsGeometry') -> "GsSmarterPtr< GsGeometry >":
        r""" 计算和另外一个几何对象对称差"""
        return _gskernel.GsIndexGeometry_SymDifference(self, pOther)

    def Distance(self, pGeo: 'GsGeometry') -> "double":
        r""" 计算和另外一个Geometry的距离 Image: Geometry_Distance.png("Geometry最短路径")"""
        return _gskernel.GsIndexGeometry_Distance(self, pGeo)

    def Clip(self, pCliperGeo: 'GsGeometry', bIncludeBoundary: 'bool') -> "GsSmarterPtr< GsGeometry >":
        r""" 用传入的几何对当前几何对象进行剪切"""
        return _gskernel.GsIndexGeometry_Clip(self, pCliperGeo, bIncludeBoundary)

    def ReturnNearestPoint(self, pPoint: 'GsPoint', extension: 'GsSegmentExtension') -> "GsSmarterPtr< GsPoint >":
        r""" 创建并返回当前几何对象上距离输入点最近的一个点"""
        return _gskernel.GsIndexGeometry_ReturnNearestPoint(self, pPoint, extension)
    __swig_destroy__ = _gskernel.delete_GsIndexGeometry

# Register GsIndexGeometry in _gskernel:
_gskernel.GsIndexGeometry_swigregister(GsIndexGeometry)

class GsGraphicsGeometry(GsRefObject):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        _gskernel.GsGraphicsGeometry_swiginit(self, _gskernel.new_GsGraphicsGeometry(*args))
    __swig_destroy__ = _gskernel.delete_GsGraphicsGeometry

    def Assign(self, *args) -> "void":
        r"""
        *Overload 1:*
        绑定并转换几何数据

        |

        *Overload 2:*
        绑定并转换几何数据
        """
        return _gskernel.GsGraphicsGeometry_Assign(self, *args)

    def PartCount(self) -> "int":
        r""" 几何分块的数量"""
        return _gskernel.GsGraphicsGeometry_PartCount(self)

    def PartPtr(self, i: 'int', pfCoord: 'float *') -> "void":
        r""" 特定块的坐标指针"""
        return _gskernel.GsGraphicsGeometry_PartPtr(self, i, pfCoord)

    def PartLength(self, i: 'int') -> "int":
        r""" 特定块的坐标长度"""
        return _gskernel.GsGraphicsGeometry_PartLength(self, i)

    def TotalLength(self) -> "int":
        r""" 总的坐标长度"""
        return _gskernel.GsGraphicsGeometry_TotalLength(self)

    def Clear(self) -> "void":
        r""" 清空几何对象"""
        return _gskernel.GsGraphicsGeometry_Clear(self)

# Register GsGraphicsGeometry in _gskernel:
_gskernel.GsGraphicsGeometry_swigregister(GsGraphicsGeometry)

class GsSymbolVector(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self):
        _gskernel.GsSymbolVector_swiginit(self, _gskernel.new_GsSymbolVector())
    __swig_destroy__ = _gskernel.delete_GsSymbolVector

    def add(self, obj: 'GsSymbol') -> "void":
        return _gskernel.GsSymbolVector_add(self, obj)

    def size(self) -> "size_t":
        return _gskernel.GsSymbolVector_size(self)

    def clear(self) -> "void":
        return _gskernel.GsSymbolVector_clear(self)

    def empty(self) -> "bool":
        return _gskernel.GsSymbolVector_empty(self)

    def get(self, n: 'int') -> "GsSmarterPtr< GsSymbol >":
        return _gskernel.GsSymbolVector_get(self, n)

    def set(self, n: 'int', val: 'GsSymbol') -> "void":
        return _gskernel.GsSymbolVector_set(self, n, val)

# Register GsSymbolVector in _gskernel:
_gskernel.GsSymbolVector_swigregister(GsSymbolVector)

class GsRawPointVector(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self):
        _gskernel.GsRawPointVector_swiginit(self, _gskernel.new_GsRawPointVector())
    __swig_destroy__ = _gskernel.delete_GsRawPointVector

    def add(self, obj: 'GsRawPoint') -> "void":
        return _gskernel.GsRawPointVector_add(self, obj)

    def size(self) -> "size_t":
        return _gskernel.GsRawPointVector_size(self)

    def clear(self) -> "void":
        return _gskernel.GsRawPointVector_clear(self)

    def empty(self) -> "bool":
        return _gskernel.GsRawPointVector_empty(self)

    def get(self, n: 'int') -> "GsRawPoint":
        return _gskernel.GsRawPointVector_get(self, n)

    def set(self, n: 'int', val: 'GsRawPoint') -> "void":
        return _gskernel.GsRawPointVector_set(self, n, val)

# Register GsRawPointVector in _gskernel:
_gskernel.GsRawPointVector_swigregister(GsRawPointVector)

class GsPatternVector(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self):
        _gskernel.GsPatternVector_swiginit(self, _gskernel.new_GsPatternVector())
    __swig_destroy__ = _gskernel.delete_GsPatternVector

    def add(self, obj: 'GsPattern') -> "void":
        return _gskernel.GsPatternVector_add(self, obj)

    def size(self) -> "size_t":
        return _gskernel.GsPatternVector_size(self)

    def clear(self) -> "void":
        return _gskernel.GsPatternVector_clear(self)

    def empty(self) -> "bool":
        return _gskernel.GsPatternVector_empty(self)

    def get(self, n: 'int') -> "GsPattern":
        return _gskernel.GsPatternVector_get(self, n)

    def set(self, n: 'int', val: 'GsPattern') -> "void":
        return _gskernel.GsPatternVector_set(self, n, val)

# Register GsPatternVector in _gskernel:
_gskernel.GsPatternVector_swigregister(GsPatternVector)

ePointSymbol = _gskernel.ePointSymbol
r""" 点符号"""
eLineSymbol = _gskernel.eLineSymbol
r""" 线符号"""
eFillSymbol = _gskernel.eFillSymbol
r""" 面符号"""
eTextSymbol = _gskernel.eTextSymbol
r""" 文本符号"""
class GsSymbol(GsRefObject):
    r""" 符号对象基类"""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _gskernel.delete_GsSymbol

    def Name(self, *args) -> "void":
        r"""
        *Overload 1:*
        符号名称

        |

        *Overload 2:*
        设置符号名称
        """
        return _gskernel.GsSymbol_Name(self, *args)

    def Version(self, *args) -> "void":
        r"""
        *Overload 1:*
        符号版本

        |

        *Overload 2:*
        设置符号版本
        """
        return _gskernel.GsSymbol_Version(self, *args)

    def Description(self, *args) -> "void":
        r"""
        *Overload 1:*
        符号描述

        |

        *Overload 2:*
        设置符号描述
        """
        return _gskernel.GsSymbol_Description(self, *args)

    def Code(self, *args) -> "void":
        r"""
        *Overload 1:*
        符号编码

        |

        *Overload 2:*
        设置符号编码
        """
        return _gskernel.GsSymbol_Code(self, *args)

    def SchemaCode(self, *args) -> "void":
        r"""
        *Overload 1:*
        图式编号

        |

        *Overload 2:*
        设置图式编号
        """
        return _gskernel.GsSymbol_SchemaCode(self, *args)

    def HasStartDrawing(self) -> "bool":
        r""" 是否已经调用了StartDrawing方法"""
        return _gskernel.GsSymbol_HasStartDrawing(self)

    def StartDrawing(self, pCanvas: 'GsCanvas', pDT: 'GsDisplayTransformation') -> "bool":
        r""" 开始绘制"""
        return _gskernel.GsSymbol_StartDrawing(self, pCanvas, pDT)

    def EndDrawing(self) -> "bool":
        r""" 结束绘制"""
        return _gskernel.GsSymbol_EndDrawing(self)

    def Draw(self, pGeo: 'GsGeometry') -> "bool":
        r""" 绘制几何对象"""
        return _gskernel.GsSymbol_Draw(self, pGeo)

    def DrawBlob(self, pBuffer: 'GsGeometryBlob') -> "bool":
        r""" 绘制几何内存块"""
        return _gskernel.GsSymbol_DrawBlob(self, pBuffer)

    def IsValid(self) -> "bool":
        r""" 符号是否有效 符号是否会在画布上绘制内容，如果符号不会在画布上绘制任何的内容则不需要执行绘制过程。"""
        return _gskernel.GsSymbol_IsValid(self)

    def Type(self) -> "GsSymbolType":
        r""" 符号的类型"""
        return _gskernel.GsSymbol_Type(self)

    def Clone(self) -> "GsSmarterPtr< GsSymbol >":
        r""" 对符号进行克隆"""
        return _gskernel.GsSymbol_Clone(self)

# Register GsSymbol in _gskernel:
_gskernel.GsSymbol_swigregister(GsSymbol)

class GsPointSymbol(GsSymbol):
    r""" 点符号"""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __swig_destroy__ = _gskernel.delete_GsPointSymbol

    def Size(self, *args) -> "void":
        r"""
        *Overload 1:*
        符号大小

        |

        *Overload 2:*
        设置符号大小
        """
        return _gskernel.GsPointSymbol_Size(self, *args)

    def DesignSize(self) -> "double":
        r""" 符号大小"""
        return _gskernel.GsPointSymbol_DesignSize(self)

    def Color(self, *args) -> "void":
        r"""
        *Overload 1:*
        颜色

        |

        *Overload 2:*
        设置颜色
        """
        return _gskernel.GsPointSymbol_Color(self, *args)

    def Angle(self, *args) -> "void":
        r"""
        *Overload 1:*
        获取旋转角

        |

        *Overload 2:*
        设置旋转角
        """
        return _gskernel.GsPointSymbol_Angle(self, *args)

    def OffsetX(self, *args) -> "void":
        r"""
        *Overload 1:*
        x偏移

        |

        *Overload 2:*
        x偏移
        """
        return _gskernel.GsPointSymbol_OffsetX(self, *args)

    def OffsetY(self, *args) -> "void":
        r"""
        *Overload 1:*
        y偏移

        |

        *Overload 2:*
        y偏移
        """
        return _gskernel.GsPointSymbol_OffsetY(self, *args)

    def Offset(self, *args) -> "void":
        r"""
        *Overload 1:*
        偏移

        |

        *Overload 2:*
        偏移

        |

        *Overload 3:*
        偏移
        """
        return _gskernel.GsPointSymbol_Offset(self, *args)

    def Envelope(self) -> "GsBox":
        r""" 点符号的矩形范围"""
        return _gskernel.GsPointSymbol_Envelope(self)

    def Type(self) -> "GsSymbolType":
        return _gskernel.GsPointSymbol_Type(self)

    @staticmethod
    def CanDowncast(b: 'GsSymbol') -> "bool":
        return _gskernel.GsPointSymbol_CanDowncast(b)

    @staticmethod
    def DowncastTo(b: 'GsSymbol') -> "GsSmarterPtr< GsPointSymbol >":
        return _gskernel.GsPointSymbol_DowncastTo(b)

# Register GsPointSymbol in _gskernel:
_gskernel.GsPointSymbol_swigregister(GsPointSymbol)

def GsPointSymbol_CanDowncast(b: 'GsSymbol') -> "bool":
    return _gskernel.GsPointSymbol_CanDowncast(b)

def GsPointSymbol_DowncastTo(b: 'GsSymbol') -> "GsSmarterPtr< GsPointSymbol >":
    return _gskernel.GsPointSymbol_DowncastTo(b)

class GsSimplePointSymbol(GsPointSymbol):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        r"""
        *Overload 1:*
        构造函数

        |

        *Overload 2:*
        从颜色和size构造

        |

        *Overload 3:*
        从颜色和size构造
        """
        _gskernel.GsSimplePointSymbol_swiginit(self, _gskernel.new_GsSimplePointSymbol(*args))
    __swig_destroy__ = _gskernel.delete_GsSimplePointSymbol

    @staticmethod
    def CanDowncast(b: 'GsPointSymbol') -> "bool":
        return _gskernel.GsSimplePointSymbol_CanDowncast(b)

    @staticmethod
    def DowncastTo(b: 'GsPointSymbol') -> "GsSmarterPtr< GsSimplePointSymbol >":
        return _gskernel.GsSimplePointSymbol_DowncastTo(b)

# Register GsSimplePointSymbol in _gskernel:
_gskernel.GsSimplePointSymbol_swigregister(GsSimplePointSymbol)

def GsSimplePointSymbol_CanDowncast(b: 'GsPointSymbol') -> "bool":
    return _gskernel.GsSimplePointSymbol_CanDowncast(b)

def GsSimplePointSymbol_DowncastTo(b: 'GsPointSymbol') -> "GsSmarterPtr< GsSimplePointSymbol >":
    return _gskernel.GsSimplePointSymbol_DowncastTo(b)

class GsSurfacePointSymbol(GsPointSymbol):
    r""" 面类型的点符号抽象基类"""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __swig_destroy__ = _gskernel.delete_GsSurfacePointSymbol

    def FillType(self, *args) -> "void":
        r"""
        *Overload 1:*
        填充的画笔类

        |

        *Overload 2:*
        填充的画笔类
        """
        return _gskernel.GsSurfacePointSymbol_FillType(self, *args)

    def FillColor(self, *args) -> "void":
        r"""
        *Overload 1:*
        填充的画笔类

        |

        *Overload 2:*
        填充的画笔类
        """
        return _gskernel.GsSurfacePointSymbol_FillColor(self, *args)

    def LineWidth(self, *args) -> "void":
        return _gskernel.GsSurfacePointSymbol_LineWidth(self, *args)

# Register GsSurfacePointSymbol in _gskernel:
_gskernel.GsSurfacePointSymbol_swigregister(GsSurfacePointSymbol)

class GsEllipsePointSymbol(GsSurfacePointSymbol):
    r""" 椭圆的点符号。"""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def EllipseParameter(self, *args) -> "void":
        r"""
        *Overload 1:*
        获取椭圆属性

        |

        *Overload 2:*
        设置椭圆属性

        |

        *Overload 3:*
        设置椭圆属性
        """
        return _gskernel.GsEllipsePointSymbol_EllipseParameter(self, *args)

    def LongAxis(self, *args) -> "void":
        r"""
        *Overload 1:*
        获取长轴长度

        |

        *Overload 2:*
        设置长轴长度
        """
        return _gskernel.GsEllipsePointSymbol_LongAxis(self, *args)

    def ShortAxis(self, *args) -> "void":
        r"""
        *Overload 1:*
        获取短轴长度

        |

        *Overload 2:*
        设置短轴长度
        """
        return _gskernel.GsEllipsePointSymbol_ShortAxis(self, *args)

    def Size(self, *args) -> "void":
        r"""
        *Overload 1:*
        获取符号大小

        |

        *Overload 2:*
        设置符号大小
        """
        return _gskernel.GsEllipsePointSymbol_Size(self, *args)

    def Envelope(self) -> "GsBox":
        r""" 点符号的矩形范围"""
        return _gskernel.GsEllipsePointSymbol_Envelope(self)

    def __init__(self, *args):
        _gskernel.GsEllipsePointSymbol_swiginit(self, _gskernel.new_GsEllipsePointSymbol(*args))
    __swig_destroy__ = _gskernel.delete_GsEllipsePointSymbol

# Register GsEllipsePointSymbol in _gskernel:
_gskernel.GsEllipsePointSymbol_swigregister(GsEllipsePointSymbol)

class GsPiePointSymbol(GsSurfacePointSymbol):
    r""" pie符号"""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def EllipseParameter(self, *args) -> "void":
        r"""
        *Overload 1:*
        获取椭圆属性

        |

        *Overload 2:*
        设置椭圆属性

        |

        *Overload 3:*
        设置椭圆属性
        """
        return _gskernel.GsPiePointSymbol_EllipseParameter(self, *args)

    def LongAxis(self, *args) -> "void":
        r"""
        *Overload 1:*
        获取长轴长度

        |

        *Overload 2:*
        设置长轴长度
        """
        return _gskernel.GsPiePointSymbol_LongAxis(self, *args)

    def ShortAxis(self, *args) -> "void":
        r"""
        *Overload 1:*
        获取短轴长度

        |

        *Overload 2:*
        设置短轴长度
        """
        return _gskernel.GsPiePointSymbol_ShortAxis(self, *args)

    def Size(self, *args) -> "void":
        r"""
        *Overload 1:*
        获取符号大小

        |

        *Overload 2:*
        设置符号大小
        """
        return _gskernel.GsPiePointSymbol_Size(self, *args)

    def Envelope(self) -> "GsBox":
        r""" 点符号的矩形范围"""
        return _gskernel.GsPiePointSymbol_Envelope(self)

    def __init__(self):
        _gskernel.GsPiePointSymbol_swiginit(self, _gskernel.new_GsPiePointSymbol())
    __swig_destroy__ = _gskernel.delete_GsPiePointSymbol

    def StartAngle(self, *args) -> "double":
        r"""
        *Overload 1:*
        设置Pie开始角度

        |

        *Overload 2:*
        获取Pie开始角度
        """
        return _gskernel.GsPiePointSymbol_StartAngle(self, *args)

    def EndAngle(self, *args) -> "double":
        r"""
        *Overload 1:*
        设置Pie结束角度

        |

        *Overload 2:*
        获取Pie结束角度
        """
        return _gskernel.GsPiePointSymbol_EndAngle(self, *args)

# Register GsPiePointSymbol in _gskernel:
_gskernel.GsPiePointSymbol_swigregister(GsPiePointSymbol)

class GsArcPointSymbol(GsPointSymbol):
    r""" 圆弧点符号"""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def EllipseParameter(self, *args) -> "void":
        r"""
        *Overload 1:*
        获取椭圆属性

        |

        *Overload 2:*
        设置椭圆属性

        |

        *Overload 3:*
        设置椭圆属性
        """
        return _gskernel.GsArcPointSymbol_EllipseParameter(self, *args)

    def LongAxis(self, *args) -> "void":
        r"""
        *Overload 1:*
        获取长轴长度

        |

        *Overload 2:*
        设置长轴长度
        """
        return _gskernel.GsArcPointSymbol_LongAxis(self, *args)

    def ShortAxis(self, *args) -> "void":
        r"""
        *Overload 1:*
        获取短轴长度

        |

        *Overload 2:*
        设置短轴长度
        """
        return _gskernel.GsArcPointSymbol_ShortAxis(self, *args)

    def Size(self, *args) -> "void":
        r"""
        *Overload 1:*
        获取符号大小

        |

        *Overload 2:*
        设置符号大小
        """
        return _gskernel.GsArcPointSymbol_Size(self, *args)

    def Envelope(self) -> "GsBox":
        r""" 点符号的矩形范围"""
        return _gskernel.GsArcPointSymbol_Envelope(self)

    def __init__(self, *args):
        _gskernel.GsArcPointSymbol_swiginit(self, _gskernel.new_GsArcPointSymbol(*args))
    __swig_destroy__ = _gskernel.delete_GsArcPointSymbol

    def StartAngle(self, *args) -> "void":
        r"""
        *Overload 1:*
        截取圆中arc的起始角度

        |

        *Overload 2:*
        设置截取圆中arc的起始角度
        """
        return _gskernel.GsArcPointSymbol_StartAngle(self, *args)

    def EndAngle(self, *args) -> "void":
        r"""
        *Overload 1:*
        截取圆中arc的终止角度

        |

        *Overload 2:*
        设置截取圆中arc的终止角度
        """
        return _gskernel.GsArcPointSymbol_EndAngle(self, *args)

    def LineWidth(self, *args) -> "void":
        r"""
        *Overload 1:*
        符号的线宽

        |

        *Overload 2:*
        设置符号的线宽
        """
        return _gskernel.GsArcPointSymbol_LineWidth(self, *args)

# Register GsArcPointSymbol in _gskernel:
_gskernel.GsArcPointSymbol_swigregister(GsArcPointSymbol)

class GsLinePointSymbol(GsPointSymbol):
    r""" 线的点符号。"""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        r"""
        *Overload 1:*
        默认构造函数

        |

        *Overload 2:*
        从颜色和线宽构造
        """
        _gskernel.GsLinePointSymbol_swiginit(self, _gskernel.new_GsLinePointSymbol(*args))
    __swig_destroy__ = _gskernel.delete_GsLinePointSymbol

    def StartPoint(self, *args) -> "GsRawPoint":
        r"""
        *Overload 1:*
        设置LinePoint的起点坐标

        |

        *Overload 2:*
        获取LinePoint的起点
        """
        return _gskernel.GsLinePointSymbol_StartPoint(self, *args)

    def EndPoint(self, *args) -> "GsRawPoint":
        r"""
        *Overload 1:*
        设置LinePoint的终点坐标

        |

        *Overload 2:*
        获取LinePoint的终点
        """
        return _gskernel.GsLinePointSymbol_EndPoint(self, *args)

    def Width(self, *args) -> "double":
        r"""
        *Overload 1:*
        设置线宽度

        |

        *Overload 2:*
        获取线宽度
        """
        return _gskernel.GsLinePointSymbol_Width(self, *args)

    def Size(self, *args) -> "void":
        r"""
        *Overload 1:*
        符号大小

        |

        *Overload 2:*
        设置符号大小
        """
        return _gskernel.GsLinePointSymbol_Size(self, *args)

    def Envelope(self) -> "GsBox":
        r""" 点符号的矩形范围"""
        return _gskernel.GsLinePointSymbol_Envelope(self)

# Register GsLinePointSymbol in _gskernel:
_gskernel.GsLinePointSymbol_swigregister(GsLinePointSymbol)

class GsCurvelinePointSymbol(GsPointSymbol):
    r""" 曲线点符号"""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def CurvePoints(self, *args) -> "void":
        r"""
        *Overload 1:*
        获取节点类型数组

        |

        *Overload 2:*
        获取的节点类型数组

        |

        *Overload 3:*
        设置点
        """
        return _gskernel.GsCurvelinePointSymbol_CurvePoints(self, *args)

    def Size(self, *args) -> "double":
        r"""
        *Overload 1:*
        设置符号大小

        |

        *Overload 2:*
        设置符号大小
        """
        return _gskernel.GsCurvelinePointSymbol_Size(self, *args)

    def Envelope(self) -> "GsBox":
        r""" 符号的矩形范围"""
        return _gskernel.GsCurvelinePointSymbol_Envelope(self)

    def __init__(self, *args):
        _gskernel.GsCurvelinePointSymbol_swiginit(self, _gskernel.new_GsCurvelinePointSymbol(*args))
    __swig_destroy__ = _gskernel.delete_GsCurvelinePointSymbol

    def Width(self, *args) -> "void":
        r"""
        *Overload 1:*
        获取线宽度

        |

        *Overload 2:*
        设置线宽度
        """
        return _gskernel.GsCurvelinePointSymbol_Width(self, *args)

# Register GsCurvelinePointSymbol in _gskernel:
_gskernel.GsCurvelinePointSymbol_swigregister(GsCurvelinePointSymbol)

class GsPolygonPointSymbol(GsSurfacePointSymbol):
    r""" 面点符号"""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def CurvePoints(self, *args) -> "void":
        r"""
        *Overload 1:*
        获取节点类型数组

        |

        *Overload 2:*
        获取的节点类型数组

        |

        *Overload 3:*
        设置点
        """
        return _gskernel.GsPolygonPointSymbol_CurvePoints(self, *args)

    def Size(self, *args) -> "double":
        r"""
        *Overload 1:*
        设置符号大小

        |

        *Overload 2:*
        设置符号大小
        """
        return _gskernel.GsPolygonPointSymbol_Size(self, *args)

    def Envelope(self) -> "GsBox":
        r""" 符号的矩形范围"""
        return _gskernel.GsPolygonPointSymbol_Envelope(self)

    def __init__(self, *args):
        _gskernel.GsPolygonPointSymbol_swiginit(self, _gskernel.new_GsPolygonPointSymbol(*args))
    __swig_destroy__ = _gskernel.delete_GsPolygonPointSymbol

# Register GsPolygonPointSymbol in _gskernel:
_gskernel.GsPolygonPointSymbol_swigregister(GsPolygonPointSymbol)

eAsteristkOrdination = _gskernel.eAsteristkOrdination
r""" 普通型"""
eAsteristkCross = _gskernel.eAsteristkCross
r""" 交叉型"""
eAsteristkInternal = _gskernel.eAsteristkInternal
r""" 内接型"""
eAsteristkRadiation = _gskernel.eAsteristkRadiation
r""" 辐射型"""
class GsEllipseSurfacePointSymbol(GsSurfacePointSymbol):
    r""" 类椭圆点符号基类"""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __swig_destroy__ = _gskernel.delete_GsEllipseSurfacePointSymbol

    def EllipseParameter(self, *args) -> "void":
        r"""
        *Overload 1:*
        获取椭圆属性

        |

        *Overload 2:*
        设置椭圆属性

        |

        *Overload 3:*
        设置椭圆属性
        """
        return _gskernel.GsEllipseSurfacePointSymbol_EllipseParameter(self, *args)

    def LongAxis(self, *args) -> "void":
        r"""
        *Overload 1:*
        获取长轴长度

        |

        *Overload 2:*
        设置长轴长度
        """
        return _gskernel.GsEllipseSurfacePointSymbol_LongAxis(self, *args)

    def ShortAxis(self, *args) -> "void":
        r"""
        *Overload 1:*
        获取短轴长度

        |

        *Overload 2:*
        设置短轴长度
        """
        return _gskernel.GsEllipseSurfacePointSymbol_ShortAxis(self, *args)

    def Size(self, *args) -> "void":
        r"""
        *Overload 1:*
        获取符号大小

        |

        *Overload 2:*
        设置符号大小
        """
        return _gskernel.GsEllipseSurfacePointSymbol_Size(self, *args)

    def Envelope(self) -> "GsBox":
        r""" 点符号的矩形范围"""
        return _gskernel.GsEllipseSurfacePointSymbol_Envelope(self)

# Register GsEllipseSurfacePointSymbol in _gskernel:
_gskernel.GsEllipseSurfacePointSymbol_swigregister(GsEllipseSurfacePointSymbol)

class GsAsteriskPointSymbol(GsEllipseSurfacePointSymbol):
    r""" 星形点符号"""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def EllipseParameter(self, *args) -> "void":
        r"""
        *Overload 1:*
        获取椭圆属性

        |

        *Overload 2:*
        设置椭圆属性

        |

        *Overload 3:*
        设置椭圆属性
        """
        return _gskernel.GsAsteriskPointSymbol_EllipseParameter(self, *args)

    def LongAxis(self, *args) -> "void":
        r"""
        *Overload 1:*
        获取长轴长度

        |

        *Overload 2:*
        设置长轴长度
        """
        return _gskernel.GsAsteriskPointSymbol_LongAxis(self, *args)

    def ShortAxis(self, *args) -> "void":
        r"""
        *Overload 1:*
        获取短轴长度

        |

        *Overload 2:*
        设置短轴长度
        """
        return _gskernel.GsAsteriskPointSymbol_ShortAxis(self, *args)

    def Size(self, *args) -> "void":
        r"""
        *Overload 1:*
        获取符号大小

        |

        *Overload 2:*
        设置符号大小
        """
        return _gskernel.GsAsteriskPointSymbol_Size(self, *args)

    def Envelope(self) -> "GsBox":
        r""" 点符号的矩形范围"""
        return _gskernel.GsAsteriskPointSymbol_Envelope(self)

    def __init__(self):
        _gskernel.GsAsteriskPointSymbol_swiginit(self, _gskernel.new_GsAsteriskPointSymbol())
    __swig_destroy__ = _gskernel.delete_GsAsteriskPointSymbol

    def Rate(self, *args) -> "void":
        r"""
        *Overload 1:*
        比例

        |

        *Overload 2:*
        设置比例
        """
        return _gskernel.GsAsteriskPointSymbol_Rate(self, *args)

    def AsterType(self, *args) -> "void":
        r"""
        *Overload 1:*
        获取星型的类型

        |

        *Overload 2:*
        设置星型的类型
        """
        return _gskernel.GsAsteriskPointSymbol_AsterType(self, *args)

    def Corners(self, *args) -> "void":
        r"""
        *Overload 1:*
        获取星型角的数量

        |

        *Overload 2:*
        设置星型角的数量
        """
        return _gskernel.GsAsteriskPointSymbol_Corners(self, *args)

    def InterStartAngle(self, *args) -> "void":
        r"""
        *Overload 1:*
        获取外角的开始角度

        |

        *Overload 2:*
        设置外角的开始角度
        """
        return _gskernel.GsAsteriskPointSymbol_InterStartAngle(self, *args)

    def InnerStartAngle(self, *args) -> "void":
        r"""
        *Overload 1:*
        获取内角的开始角度

        |

        *Overload 2:*
        设置内角的开始角度
        """
        return _gskernel.GsAsteriskPointSymbol_InnerStartAngle(self, *args)

# Register GsAsteriskPointSymbol in _gskernel:
_gskernel.GsAsteriskPointSymbol_swigregister(GsAsteriskPointSymbol)

class GsChordPointSymbol(GsSurfacePointSymbol):
    r""" 弦点符号"""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def EllipseParameter(self, *args) -> "void":
        r"""
        *Overload 1:*
        获取椭圆属性

        |

        *Overload 2:*
        设置椭圆属性

        |

        *Overload 3:*
        设置椭圆属性
        """
        return _gskernel.GsChordPointSymbol_EllipseParameter(self, *args)

    def LongAxis(self, *args) -> "void":
        r"""
        *Overload 1:*
        获取长轴长度

        |

        *Overload 2:*
        设置长轴长度
        """
        return _gskernel.GsChordPointSymbol_LongAxis(self, *args)

    def ShortAxis(self, *args) -> "void":
        r"""
        *Overload 1:*
        获取短轴长度

        |

        *Overload 2:*
        设置短轴长度
        """
        return _gskernel.GsChordPointSymbol_ShortAxis(self, *args)

    def Envelope(self) -> "GsBox":
        r""" 设置符号大小 点符号的矩形范围"""
        return _gskernel.GsChordPointSymbol_Envelope(self)

    def __init__(self, *args):
        _gskernel.GsChordPointSymbol_swiginit(self, _gskernel.new_GsChordPointSymbol(*args))
    __swig_destroy__ = _gskernel.delete_GsChordPointSymbol

    def StartAngle(self, *args) -> "void":
        r"""
        *Overload 1:*
        截取圆中arc的起始角度

        |

        *Overload 2:*
        设置开始角度
        """
        return _gskernel.GsChordPointSymbol_StartAngle(self, *args)

    def EndAngle(self, *args) -> "void":
        r"""
        *Overload 1:*
        获取结束角度

        |

        *Overload 2:*
        设置结束角度
        """
        return _gskernel.GsChordPointSymbol_EndAngle(self, *args)

    def Size(self, dblSize: 'double') -> "void":
        r""" 获取符号大小 设置符号大小,跟据设置的大小，调整长短轴"""
        return _gskernel.GsChordPointSymbol_Size(self, dblSize)

# Register GsChordPointSymbol in _gskernel:
_gskernel.GsChordPointSymbol_swigregister(GsChordPointSymbol)

class GsCurvegonPointSymbol(GsSurfacePointSymbol):
    r""" 由贝塞尔曲线构成的面点符号"""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def CurvePoints(self, *args) -> "void":
        r"""
        *Overload 1:*
        获取节点类型数组

        |

        *Overload 2:*
        获取的节点类型数组

        |

        *Overload 3:*
        设置点
        """
        return _gskernel.GsCurvegonPointSymbol_CurvePoints(self, *args)

    def Size(self, *args) -> "double":
        r"""
        *Overload 1:*
        设置符号大小

        |

        *Overload 2:*
        设置符号大小
        """
        return _gskernel.GsCurvegonPointSymbol_Size(self, *args)

    def Envelope(self) -> "GsBox":
        r""" 符号的矩形范围"""
        return _gskernel.GsCurvegonPointSymbol_Envelope(self)

    def __init__(self, *args):
        _gskernel.GsCurvegonPointSymbol_swiginit(self, _gskernel.new_GsCurvegonPointSymbol(*args))
    __swig_destroy__ = _gskernel.delete_GsCurvegonPointSymbol

# Register GsCurvegonPointSymbol in _gskernel:
_gskernel.GsCurvegonPointSymbol_swigregister(GsCurvegonPointSymbol)

ePictureNoKeep = _gskernel.ePictureNoKeep
ePictureKeepWidth = _gskernel.ePictureKeepWidth
ePictureKeepHeight = _gskernel.ePictureKeepHeight
ePictureKeepAll = _gskernel.ePictureKeepAll
class GsPicturePointSymbol(GsPointSymbol):
    r""" 图片点符号"""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        r"""
        *Overload 1:*
        无参构造函数

        |

        *Overload 2:*
        路径导入图片构造函数
        """
        _gskernel.GsPicturePointSymbol_swiginit(self, _gskernel.new_GsPicturePointSymbol(*args))

    def Transparent(self, *args) -> "void":
        r"""
        *Overload 1:*
        获取是否使用透明色

        |

        *Overload 2:*
        设置是否使用透明色
        """
        return _gskernel.GsPicturePointSymbol_Transparent(self, *args)

    def TransparentColor(self, *args) -> "void":
        r"""
        *Overload 1:*
        获取要透明的颜色

        |

        *Overload 2:*
        设置要透明的颜色
        """
        return _gskernel.GsPicturePointSymbol_TransparentColor(self, *args)

    def UseBackColor(self, *args) -> "void":
        r"""
        *Overload 1:*
        获取是否使用背景色

        |

        *Overload 2:*
        设置是否使用背景色
        """
        return _gskernel.GsPicturePointSymbol_UseBackColor(self, *args)

    def BackColor(self, *args) -> "void":
        r"""
        *Overload 1:*
        获取背景色

        |

        *Overload 2:*
        设置背景色
        """
        return _gskernel.GsPicturePointSymbol_BackColor(self, *args)

    def PictureData(self) -> "GsGrowByteBuffer *":
        r""" 获取图片的数据"""
        return _gskernel.GsPicturePointSymbol_PictureData(self)

    def Picture(self, *args) -> "void":
        r"""
        *Overload 1:*
        获取图片对象

        |

        *Overload 2:*
        设置图片对象
        """
        return _gskernel.GsPicturePointSymbol_Picture(self, *args)

    def Width(self, *args) -> "void":
        r"""
        *Overload 1:*
        获取图片宽度(单位毫米)

        |

        *Overload 2:*
        设置图片宽度(单位毫米)
        """
        return _gskernel.GsPicturePointSymbol_Width(self, *args)

    def Height(self, *args) -> "void":
        r"""
        *Overload 1:*
        获取图片高度(单位毫米)

        |

        *Overload 2:*
        设置图片高度(单位毫米)
        """
        return _gskernel.GsPicturePointSymbol_Height(self, *args)

    def OriginalState(self, *args) -> "void":
        r"""
        *Overload 1:*
        获取图片锁定状态

        |

        *Overload 2:*
        设置图片锁定状态
        """
        return _gskernel.GsPicturePointSymbol_OriginalState(self, *args)

    def LoadPicture(self, *args) -> "bool":
        r"""
        *Overload 1:*
        从文件载入图片

        |

        *Overload 2:*
        从内存块载入图片。
        """
        return _gskernel.GsPicturePointSymbol_LoadPicture(self, *args)
    __swig_destroy__ = _gskernel.delete_GsPicturePointSymbol

# Register GsPicturePointSymbol in _gskernel:
_gskernel.GsPicturePointSymbol_swigregister(GsPicturePointSymbol)

class GsCurvePointSymbol(GsPointSymbol):
    r""" 支持多个点构成曲线、曲线面的点符号模板基类"""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def CurvePoints(self, *args) -> "void":
        r"""
        *Overload 1:*
        获取节点类型数组

        |

        *Overload 2:*
        获取的节点类型数组

        |

        *Overload 3:*
        设置点
        """
        return _gskernel.GsCurvePointSymbol_CurvePoints(self, *args)

    def Size(self, *args) -> "double":
        r"""
        *Overload 1:*
        设置符号大小

        |

        *Overload 2:*
        获取符号大小
        """
        return _gskernel.GsCurvePointSymbol_Size(self, *args)

    def Envelope(self) -> "GsBox":
        r""" 符号的矩形范围"""
        return _gskernel.GsCurvePointSymbol_Envelope(self)
    __swig_destroy__ = _gskernel.delete_GsCurvePointSymbol

# Register GsCurvePointSymbol in _gskernel:
_gskernel.GsCurvePointSymbol_swigregister(GsCurvePointSymbol)

class GsPolylinePointSymbol(GsCurvePointSymbol):
    r""" 折线点符号"""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def CurvePoints(self, *args) -> "void":
        r"""
        *Overload 1:*
        获取节点类型数组

        |

        *Overload 2:*
        获取的节点类型数组

        |

        *Overload 3:*
        设置点
        """
        return _gskernel.GsPolylinePointSymbol_CurvePoints(self, *args)

    def Size(self, *args) -> "double":
        r"""
        *Overload 1:*
        设置符号大小

        |

        *Overload 2:*
        设置符号大小
        """
        return _gskernel.GsPolylinePointSymbol_Size(self, *args)

    def Envelope(self) -> "GsBox":
        r""" 符号的矩形范围"""
        return _gskernel.GsPolylinePointSymbol_Envelope(self)

    def __init__(self, *args):
        _gskernel.GsPolylinePointSymbol_swiginit(self, _gskernel.new_GsPolylinePointSymbol(*args))
    __swig_destroy__ = _gskernel.delete_GsPolylinePointSymbol

    def Width(self, *args) -> "void":
        r"""
        *Overload 1:*
        获取折线点的宽度

        |

        *Overload 2:*
        设置折线点的宽度
        """
        return _gskernel.GsPolylinePointSymbol_Width(self, *args)

# Register GsPolylinePointSymbol in _gskernel:
_gskernel.GsPolylinePointSymbol_swigregister(GsPolylinePointSymbol)

class GsRectanglePointSymbol(GsEllipseSurfacePointSymbol):
    r""" 矩形点符号"""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def EllipseParameter(self, *args) -> "void":
        r"""
        *Overload 1:*
        获取椭圆属性

        |

        *Overload 2:*
        设置椭圆属性

        |

        *Overload 3:*
        设置椭圆属性
        """
        return _gskernel.GsRectanglePointSymbol_EllipseParameter(self, *args)

    def LongAxis(self, *args) -> "void":
        r"""
        *Overload 1:*
        获取长轴长度

        |

        *Overload 2:*
        设置长轴长度
        """
        return _gskernel.GsRectanglePointSymbol_LongAxis(self, *args)

    def ShortAxis(self, *args) -> "void":
        r"""
        *Overload 1:*
        获取短轴长度

        |

        *Overload 2:*
        设置短轴长度
        """
        return _gskernel.GsRectanglePointSymbol_ShortAxis(self, *args)

    def Size(self, *args) -> "void":
        r"""
        *Overload 1:*
        获取符号大小

        |

        *Overload 2:*
        设置符号大小
        """
        return _gskernel.GsRectanglePointSymbol_Size(self, *args)

    def Envelope(self) -> "GsBox":
        r""" 点符号的矩形范围"""
        return _gskernel.GsRectanglePointSymbol_Envelope(self)

    def __init__(self, *args):
        _gskernel.GsRectanglePointSymbol_swiginit(self, _gskernel.new_GsRectanglePointSymbol(*args))
    __swig_destroy__ = _gskernel.delete_GsRectanglePointSymbol

# Register GsRectanglePointSymbol in _gskernel:
_gskernel.GsRectanglePointSymbol_swigregister(GsRectanglePointSymbol)

class GsTextPointSymbol(GsSurfacePointSymbol):
    r""" 文本点符号"""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def EllipseParameter(self, *args) -> "void":
        r"""
        *Overload 1:*
        获取椭圆属性

        |

        *Overload 2:*
        设置椭圆属性

        |

        *Overload 3:*
        设置椭圆属性
        """
        return _gskernel.GsTextPointSymbol_EllipseParameter(self, *args)

    def LongAxis(self, *args) -> "void":
        r"""
        *Overload 1:*
        获取长轴长度

        |

        *Overload 2:*
        设置长轴长度
        """
        return _gskernel.GsTextPointSymbol_LongAxis(self, *args)

    def ShortAxis(self, *args) -> "void":
        r"""
        *Overload 1:*
        获取短轴长度

        |

        *Overload 2:*
        设置短轴长度
        """
        return _gskernel.GsTextPointSymbol_ShortAxis(self, *args)

    def Size(self, *args) -> "void":
        r"""
        *Overload 1:*
        获取符号大小

        |

        *Overload 2:*
        设置符号大小
        """
        return _gskernel.GsTextPointSymbol_Size(self, *args)

    def Envelope(self) -> "GsBox":
        r""" 点符号的矩形范围"""
        return _gskernel.GsTextPointSymbol_Envelope(self)

    def __init__(self, *args):
        _gskernel.GsTextPointSymbol_swiginit(self, _gskernel.new_GsTextPointSymbol(*args))

    def TextFlag(self, pItalic: 'GsItalic', bBold: 'bool', bStroke: 'bool') -> "void":
        return _gskernel.GsTextPointSymbol_TextFlag(self, pItalic, bBold, bStroke)

    def Font(self, *args) -> "void":
        r"""
        *Overload 1:*
        获取字体

        |

        *Overload 2:*
        设置字体
        """
        return _gskernel.GsTextPointSymbol_Font(self, *args)

    def Text(self, *args) -> "void":
        r"""
        *Overload 1:*
        获取字符内容

        |

        *Overload 2:*
        设置字符内容
        """
        return _gskernel.GsTextPointSymbol_Text(self, *args)

    def Bold(self, *args) -> "bool":
        r"""
        *Overload 1:*
        设置加粗标识

        |

        *Overload 2:*
        获取加粗标识
        """
        return _gskernel.GsTextPointSymbol_Bold(self, *args)

    def Stroke(self, *args) -> "bool":
        r"""
        *Overload 1:*
        设置空心标识

        |

        *Overload 2:*
        获取空心标识
        """
        return _gskernel.GsTextPointSymbol_Stroke(self, *args)

    def Italic(self, *args) -> "GsItalic":
        r"""
        *Overload 1:*
        设置倾斜类型

        |

        *Overload 2:*
        获取倾斜类型
        """
        return _gskernel.GsTextPointSymbol_Italic(self, *args)
    __swig_destroy__ = _gskernel.delete_GsTextPointSymbol

# Register GsTextPointSymbol in _gskernel:
_gskernel.GsTextPointSymbol_swigregister(GsTextPointSymbol)

class GsQRCodePointSymbol(GsPointSymbol):
    r""" 二维码点符号"""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self):
        _gskernel.GsQRCodePointSymbol_swiginit(self, _gskernel.new_GsQRCodePointSymbol())

    def BorderSize(self, *args) -> "void":
        r"""
        *Overload 1:*
        二维码边框留白的大小

        |

        *Overload 2:*
        二维码边框留白的大小
        """
        return _gskernel.GsQRCodePointSymbol_BorderSize(self, *args)

    def QRCodePtr(self) -> "GsQRCode *":
        r""" 获取二维码编码对象"""
        return _gskernel.GsQRCodePointSymbol_QRCodePtr(self)

    def PageIndex(self, *args) -> "void":
        r"""
        *Overload 1:*
        多个二维码编码对象时编码某个页面

        |

        *Overload 2:*
        多个二维码编码对象时编码某个页面
        """
        return _gskernel.GsQRCodePointSymbol_PageIndex(self, *args)

    def LogoPicture(self, *args) -> "void":
        return _gskernel.GsQRCodePointSymbol_LogoPicture(self, *args)

    def LogoPictureRatio(self, *args) -> "void":
        r"""
        *Overload 1:*
        二维码中心图片占用的比率 介于0.1~0.3之间，过大会遮挡过多二维码导致无法识别，过小中心图片看不清

        |

        *Overload 2:*
        二维码中心图片占用的比率
        """
        return _gskernel.GsQRCodePointSymbol_LogoPictureRatio(self, *args)

    def BackColor(self, *args) -> "void":
        r"""
        *Overload 1:*
        背景颜色

        |

        *Overload 2:*
        背景颜色
        """
        return _gskernel.GsQRCodePointSymbol_BackColor(self, *args)

    def LogoPictureData(self) -> "GsGrowByteBuffer *":
        r""" 置于二维码中心的图片数据"""
        return _gskernel.GsQRCodePointSymbol_LogoPictureData(self)

    def QRData(self, *args) -> "void":
        r"""
        *Overload 1:*
        二维码显示的原始数据

        |

        *Overload 2:*
        设置任意二进制的数据

        |

        *Overload 3:*
        设置字符串的数据
        """
        return _gskernel.GsQRCodePointSymbol_QRData(self, *args)

    def DataType(self) -> "GsQRCodeDataType":
        r""" 获取数据的类型"""
        return _gskernel.GsQRCodePointSymbol_DataType(self)
    __swig_destroy__ = _gskernel.delete_GsQRCodePointSymbol

# Register GsQRCodePointSymbol in _gskernel:
_gskernel.GsQRCodePointSymbol_swigregister(GsQRCodePointSymbol)

class GsLineSymbol(GsSymbol):
    r""" 线符号基类"""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __swig_destroy__ = _gskernel.delete_GsLineSymbol

    def Width(self, *args) -> "void":
        r"""
        *Overload 1:*
        线符号的宽度,单位毫米

        |

        *Overload 2:*
        设置线符号的宽度,单位毫米
        """
        return _gskernel.GsLineSymbol_Width(self, *args)

    def Color(self, *args) -> "void":
        r"""
        *Overload 1:*
        线符号颜色

        |

        *Overload 2:*
        设置线符号颜色
        """
        return _gskernel.GsLineSymbol_Color(self, *args)

    def Type(self) -> "GsSymbolType":
        return _gskernel.GsLineSymbol_Type(self)

# Register GsLineSymbol in _gskernel:
_gskernel.GsLineSymbol_swigregister(GsLineSymbol)

class GsSimpleLineSymbol(GsLineSymbol):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        r"""
        *Overload 1:*
        从颜色和线宽构造

        |

        *Overload 2:*
        从颜色和线宽构造
        """
        _gskernel.GsSimpleLineSymbol_swiginit(self, _gskernel.new_GsSimpleLineSymbol(*args))
    __swig_destroy__ = _gskernel.delete_GsSimpleLineSymbol

    def LineStyle(self, *args) -> "void":
        r"""
        *Overload 1:*
        获取线的类型

        |

        *Overload 2:*
        设置线的类型
        """
        return _gskernel.GsSimpleLineSymbol_LineStyle(self, *args)

    def IsValid(self) -> "bool":
        r""" 符号是否有效 符号是否会在画布上绘制内容，如果符号不会在画布上绘制任何的内容则不需要执行绘制过程。"""
        return _gskernel.GsSimpleLineSymbol_IsValid(self)

# Register GsSimpleLineSymbol in _gskernel:
_gskernel.GsSimpleLineSymbol_swigregister(GsSimpleLineSymbol)

class GsPattern(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        _gskernel.GsPattern_swiginit(self, _gskernel.new_GsPattern(*args))
    fMark = property(_gskernel.GsPattern_fMark_get, _gskernel.GsPattern_fMark_set)
    fGap = property(_gskernel.GsPattern_fGap_get, _gskernel.GsPattern_fGap_set)
    __swig_destroy__ = _gskernel.delete_GsPattern

# Register GsPattern in _gskernel:
_gskernel.GsPattern_swigregister(GsPattern)

class GsSymbolTemplate(GsPatternVector):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        _gskernel.GsSymbolTemplate_swiginit(self, _gskernel.new_GsSymbolTemplate(*args))
    __swig_destroy__ = _gskernel.delete_GsSymbolTemplate

    def Offset(self, *args) -> "void":
        r"""
        *Overload 1:*
        获得线的偏移量

        |

        *Overload 2:*
        设置线的偏移量
        """
        return _gskernel.GsSymbolTemplate_Offset(self, *args)

    def Interval(self, *args) -> "void":
        r"""
        *Overload 1:*
        获得线的倍率

        |

        *Overload 2:*
        设置线的倍率
        """
        return _gskernel.GsSymbolTemplate_Interval(self, *args)

    def Add(self, *args) -> "void":
        r"""
        *Overload 1:*
        加入一个线模板

        |

        *Overload 2:*
        加入一个线模板
        """
        return _gskernel.GsSymbolTemplate_Add(self, *args)

    def Reset(self) -> "void":
        r""" 重置线模板"""
        return _gskernel.GsSymbolTemplate_Reset(self)

# Register GsSymbolTemplate in _gskernel:
_gskernel.GsSymbolTemplate_swigregister(GsSymbolTemplate)

class GsTemplateLineSymbol(GsLineSymbol):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __swig_destroy__ = _gskernel.delete_GsTemplateLineSymbol

    def SymbolTemplate(self) -> "GsSymbolTemplate":
        r""" 获取线符号模版属性"""
        return _gskernel.GsTemplateLineSymbol_SymbolTemplate(self)

    def Offset(self, *args) -> "double":
        r"""
        *Overload 1:*
         获取线符号模版的指针 :rtype: void
        :return: 返回线符号模版的指针 设置线符号模版属性 :param pTemplate: 模版对象的指针 设置线模板的偏移量 :type offset: float
        :param offset: 线模板的偏移量

        |

        *Overload 2:*
         获取线模板的偏移量
        """
        return _gskernel.GsTemplateLineSymbol_Offset(self, *args)

# Register GsTemplateLineSymbol in _gskernel:
_gskernel.GsTemplateLineSymbol_swigregister(GsTemplateLineSymbol)

class GsPointLineSymbol(GsTemplateLineSymbol):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        r"""
        *Overload 1:*
        默认构造函数

        |

        *Overload 2:*
        传入点符号构建

        |

        *Overload 3:*
        传入点符号和模板构建
        """
        _gskernel.GsPointLineSymbol_swiginit(self, _gskernel.new_GsPointLineSymbol(*args))
    __swig_destroy__ = _gskernel.delete_GsPointLineSymbol

    def PointSymbol(self, *args) -> "GsPointSymbol *":
        r"""
        *Overload 1:*
         设置点线符号中的点符号 :type pPointSymbol: :py:class:`GsPointSymbol`
        :param pPointSymbol: 点符号的指针

        |

        *Overload 2:*
         获取点线符号中的点符号
        """
        return _gskernel.GsPointLineSymbol_PointSymbol(self, *args)

# Register GsPointLineSymbol in _gskernel:
_gskernel.GsPointLineSymbol_swigregister(GsPointLineSymbol)

ePicDirectionUp = _gskernel.ePicDirectionUp
ePicDirectionDown = _gskernel.ePicDirectionDown
ePicDirectionLeft = _gskernel.ePicDirectionLeft
ePicDirectionRight = _gskernel.ePicDirectionRight
class GsFrameLineSymbol(GsLineSymbol):
    r""" 图框线符号"""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        _gskernel.GsFrameLineSymbol_swiginit(self, _gskernel.new_GsFrameLineSymbol(*args))
    __swig_destroy__ = _gskernel.delete_GsFrameLineSymbol

    def CornerPicture(self, *args) -> "GsSmarterPtr< GsImage >":
        r"""
        *Overload 1:*
        设置四角的图片

        |

        *Overload 2:*
        获取四角的图片
        """
        return _gskernel.GsFrameLineSymbol_CornerPicture(self, *args)

    def SidePicture(self, *args) -> "GsSmarterPtr< GsImage >":
        r"""
        *Overload 1:*
        设置四边的图片

        |

        *Overload 2:*
        获取四边的图片
        """
        return _gskernel.GsFrameLineSymbol_SidePicture(self, *args)

    def Offset(self, *args) -> "void":
        r"""
        *Overload 1:*
        线的偏移

        |

        *Overload 2:*
        线的偏移
        """
        return _gskernel.GsFrameLineSymbol_Offset(self, *args)

    def TransparentColor(self, *args) -> "GsColor":
        r"""
        *Overload 1:*
        设置透明色

        |

        *Overload 2:*
        获取透明色
        """
        return _gskernel.GsFrameLineSymbol_TransparentColor(self, *args)

    def BackColor(self, *args) -> "GsColor":
        r"""
        *Overload 1:*
        设置背景色

        |

        *Overload 2:*
        获取背景色
        """
        return _gskernel.GsFrameLineSymbol_BackColor(self, *args)

    def XScale(self, *args) -> "double":
        r"""
        *Overload 1:*
        设置X方向比例因子

        |

        *Overload 2:*
        获取X方向比例因子
        """
        return _gskernel.GsFrameLineSymbol_XScale(self, *args)

    def YScale(self, *args) -> "double":
        r"""
        *Overload 1:*
        设置Y方向比例因子

        |

        *Overload 2:*
        获取Y方向比例因子
        """
        return _gskernel.GsFrameLineSymbol_YScale(self, *args)

    def UseWidth(self, *args) -> "bool":
        r"""
        *Overload 1:*
        设置是否使用线宽属性

        |

        *Overload 2:*
        获取是否使用线宽属性
        """
        return _gskernel.GsFrameLineSymbol_UseWidth(self, *args)

    def LeftTopDirection(self, *args) -> "void":
        r"""
        *Overload 1:*
        获取左上角图片方向

        |

        *Overload 2:*
        设置左上角图片方向
        """
        return _gskernel.GsFrameLineSymbol_LeftTopDirection(self, *args)

    def RightTopDirection(self, *args) -> "void":
        r"""
        *Overload 1:*
        获取右上角图片方向

        |

        *Overload 2:*
        设置右上角图片方向
        """
        return _gskernel.GsFrameLineSymbol_RightTopDirection(self, *args)

    def LeftBottomDirection(self, *args) -> "void":
        r"""
        *Overload 1:*
        获取左下角图片方向

        |

        *Overload 2:*
        设置左下角图片方向
        """
        return _gskernel.GsFrameLineSymbol_LeftBottomDirection(self, *args)

    def RightBottomDirection(self, *args) -> "void":
        r"""
        *Overload 1:*
        获取右下角图片方向

        |

        *Overload 2:*
        设置右下角图片方向
        """
        return _gskernel.GsFrameLineSymbol_RightBottomDirection(self, *args)

    def LeftSideDirection(self, *args) -> "void":
        r"""
        *Overload 1:*
        获取左边图片方向

        |

        *Overload 2:*
        设置左边图片方向
        """
        return _gskernel.GsFrameLineSymbol_LeftSideDirection(self, *args)

    def TopSideDirection(self, *args) -> "void":
        r"""
        *Overload 1:*
        获取上边图片方向

        |

        *Overload 2:*
        设置上边图片方向
        """
        return _gskernel.GsFrameLineSymbol_TopSideDirection(self, *args)

    def RightSideDirection(self, *args) -> "void":
        r"""
        *Overload 1:*
        获取右边图片方向

        |

        *Overload 2:*
        设置右边图片方向
        """
        return _gskernel.GsFrameLineSymbol_RightSideDirection(self, *args)

    def BottomSideDirection(self, *args) -> "void":
        r"""
        *Overload 1:*
        获取下边图片方向

        |

        *Overload 2:*
        设置下边图片方向
        """
        return _gskernel.GsFrameLineSymbol_BottomSideDirection(self, *args)

    def LoadCornerPicture(self, strFileName: 'char const *') -> "bool":
        r""" 加载四角图片"""
        return _gskernel.GsFrameLineSymbol_LoadCornerPicture(self, strFileName)

    def LoadSidePicture(self, strFileName: 'char const *') -> "bool":
        r""" 加载四边图片"""
        return _gskernel.GsFrameLineSymbol_LoadSidePicture(self, strFileName)

# Register GsFrameLineSymbol in _gskernel:
_gskernel.GsFrameLineSymbol_swigregister(GsFrameLineSymbol)

eDirectionNorth = _gskernel.eDirectionNorth
r""" 正北方向"""
eDirectionLeft = _gskernel.eDirectionLeft
r""" 左侧"""
eDirectionRight = _gskernel.eDirectionRight
r""" 右侧"""
eDirectionBidirectional = _gskernel.eDirectionBidirectional
r""" 双侧"""
eDirectionBisector = _gskernel.eDirectionBisector
r""" 角平分线"""
eLocateNone = _gskernel.eLocateNone
r""" 不绘端点"""
eLocateBegin = _gskernel.eLocateBegin
r""" 仅绘起点"""
eLocateEnd = _gskernel.eLocateEnd
r""" 仅绘终点"""
eLocateBoth = _gskernel.eLocateBoth
r""" 绘两端点"""
class GsLocatePointLineSymbol(GsLineSymbol):
    r""" 定位点线符号"""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        r"""
        *Overload 1:*
        默认构造

        |

        *Overload 2:*
        通过点符号构造
        """
        _gskernel.GsLocatePointLineSymbol_swiginit(self, _gskernel.new_GsLocatePointLineSymbol(*args))

    def PointSymbol(self, *args) -> "GsPointSymbol *":
        r"""
        *Overload 1:*
        设置点符号

        |

        *Overload 2:*
        获得点符号
        """
        return _gskernel.GsLocatePointLineSymbol_PointSymbol(self, *args)

    def LocateDirection(self, *args) -> "GsSymbolLocateDirectionType":
        r"""
        *Overload 1:*
        设置点符号方向

        |

        *Overload 2:*
        获取点符号方向
        """
        return _gskernel.GsLocatePointLineSymbol_LocateDirection(self, *args)

    def LocateEnds(self, *args) -> "GsSymbolLocateEndsType":
        r"""
        *Overload 1:*
        设置端点绘制方式

        |

        *Overload 2:*
        获取端点绘制方式
        """
        return _gskernel.GsLocatePointLineSymbol_LocateEnds(self, *args)

    def IsValid(self) -> "bool":
        r""" 符号是否有效 符号是否会在画布上绘制内容，如果符号不会在画布上绘制任何的内容则不需要执行绘制过程。"""
        return _gskernel.GsLocatePointLineSymbol_IsValid(self)
    __swig_destroy__ = _gskernel.delete_GsLocatePointLineSymbol

# Register GsLocatePointLineSymbol in _gskernel:
_gskernel.GsLocatePointLineSymbol_swigregister(GsLocatePointLineSymbol)

class GsHashLineSymbol(GsTemplateLineSymbol):
    r""" 图框线符号"""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def LineSymbol(self, *args) -> "void":
        r"""
        *Overload 1:*
        返回线符号

        |

        *Overload 2:*
        设置线符号
        """
        return _gskernel.GsHashLineSymbol_LineSymbol(self, *args)

    def Angle(self, *args) -> "void":
        r"""
        *Overload 1:*
        获取子线和原线的夹角

        |

        *Overload 2:*
        设置子线和原线的夹角
        """
        return _gskernel.GsHashLineSymbol_Angle(self, *args)

    def IsValid(self) -> "bool":
        r""" 符号是否有效 符号是否会在画布上绘制内容，如果符号不会在画布上绘制任何的内容则不需要执行绘制过程。"""
        return _gskernel.GsHashLineSymbol_IsValid(self)

    def __init__(self):
        _gskernel.GsHashLineSymbol_swiginit(self, _gskernel.new_GsHashLineSymbol())
    __swig_destroy__ = _gskernel.delete_GsHashLineSymbol

# Register GsHashLineSymbol in _gskernel:
_gskernel.GsHashLineSymbol_swigregister(GsHashLineSymbol)

eLineCapButt = _gskernel.eLineCapButt
eLineCapRound = _gskernel.eLineCapRound
eLineCapSquare = _gskernel.eLineCapSquare
eLineJoinMiter = _gskernel.eLineJoinMiter
eLineJoinRound = _gskernel.eLineJoinRound
eLineJoinBevel = _gskernel.eLineJoinBevel
class GsCartographicLineSymbol(GsTemplateLineSymbol):
    r""" 制图线符号"""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        _gskernel.GsCartographicLineSymbol_swiginit(self, _gskernel.new_GsCartographicLineSymbol(*args))
    __swig_destroy__ = _gskernel.delete_GsCartographicLineSymbol

    def CapStyle(self, *args) -> "void":
        r"""
        *Overload 1:*
        获取端套类型

        |

        *Overload 2:*
        设置端套类型
        """
        return _gskernel.GsCartographicLineSymbol_CapStyle(self, *args)

    def JoinStyle(self, *args) -> "void":
        r"""
        *Overload 1:*
        获取接头类型

        |

        *Overload 2:*
        设置接头类型
        """
        return _gskernel.GsCartographicLineSymbol_JoinStyle(self, *args)

    def MiterLimit(self, *args) -> "void":
        r"""
        *Overload 1:*
        获取制图线的线端斜面接合限值

        |

        *Overload 2:*
        设置制图线的线端斜面接合限值
        """
        return _gskernel.GsCartographicLineSymbol_MiterLimit(self, *args)

    def IsValid(self) -> "bool":
        r""" 符号是否有效 符号是否会在画布上绘制内容，如果符号不会在画布上绘制任何的内容则不需要执行绘制过程。"""
        return _gskernel.GsCartographicLineSymbol_IsValid(self)

# Register GsCartographicLineSymbol in _gskernel:
_gskernel.GsCartographicLineSymbol_swigregister(GsCartographicLineSymbol)

class GsLeadConnectedLineSymbol(GsLineSymbol):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        r"""
        *Overload 1:*
        构造函数，无参构造函数使用简单线符号进行导线的绘制

        |

        *Overload 2:*
        构造函数，使用给定的颜色和宽度构造简单线符号进行导线的绘制

        |

        *Overload 3:*
        构造函数，使用给定的颜色和宽度构造简单线符号进行导线的绘制

        |

        *Overload 4:*
        构造函数，使用给定的线符号进行导线的绘制
        """
        _gskernel.GsLeadConnectedLineSymbol_swiginit(self, _gskernel.new_GsLeadConnectedLineSymbol(*args))
    __swig_destroy__ = _gskernel.delete_GsLeadConnectedLineSymbol

    def Interval(self, *args) -> "void":
        r"""
        *Overload 1:*
        获取单线之间的间隔

        |

        *Overload 2:*
        设置单线之间的间隔
        """
        return _gskernel.GsLeadConnectedLineSymbol_Interval(self, *args)

    def LineSymbol(self, *args) -> "void":
        r"""
        *Overload 1:*
        获取线型符号

        |

        *Overload 2:*
        设置线型符号
        """
        return _gskernel.GsLeadConnectedLineSymbol_LineSymbol(self, *args)

    def Width(self, *args) -> "void":
        r"""
        *Overload 1:*
        重写父类方法。获取线符号的宽度,单位毫米

        |

        *Overload 2:*
        重写父类方法。设置线符号的宽度,单位毫米
        """
        return _gskernel.GsLeadConnectedLineSymbol_Width(self, *args)

    def Color(self, *args) -> "void":
        r"""
        *Overload 1:*
        重写父类方法。获取线符号颜色

        |

        *Overload 2:*
        重写父类方法。设置线符号颜色
        """
        return _gskernel.GsLeadConnectedLineSymbol_Color(self, *args)

# Register GsLeadConnectedLineSymbol in _gskernel:
_gskernel.GsLeadConnectedLineSymbol_swigregister(GsLeadConnectedLineSymbol)

class GsScriptLineSymbol(GsLineSymbol):
    r""" 脚本化的线符号"""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self):
        r""" 缺省构造"""
        _gskernel.GsScriptLineSymbol_swiginit(self, _gskernel.new_GsScriptLineSymbol())
    __swig_destroy__ = _gskernel.delete_GsScriptLineSymbol

    def StartDrawingScript(self, *args) -> "void":
        r"""
        *Overload 1:*
        获取开始绘制的脚本

        |

        *Overload 2:*
        设置开始绘制的脚本
        """
        return _gskernel.GsScriptLineSymbol_StartDrawingScript(self, *args)

    def EndDrawingScript(self, *args) -> "void":
        r"""
        *Overload 1:*
        获取结束绘制的脚本

        |

        *Overload 2:*
        设置结束绘制的脚本
        """
        return _gskernel.GsScriptLineSymbol_EndDrawingScript(self, *args)

    def DrawScript(self, *args) -> "void":
        r"""
        *Overload 1:*
        获取绘制的脚本

        |

        *Overload 2:*
        设置绘制的脚本
        """
        return _gskernel.GsScriptLineSymbol_DrawScript(self, *args)

# Register GsScriptLineSymbol in _gskernel:
_gskernel.GsScriptLineSymbol_swigregister(GsScriptLineSymbol)

class GsFillSymbol(GsSymbol):
    r""" 面符号基类"""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __swig_destroy__ = _gskernel.delete_GsFillSymbol

    def FillColor(self, *args) -> "void":
        r"""
        *Overload 1:*
        填充的颜色

        |

        *Overload 2:*
        设置填充的颜色
        """
        return _gskernel.GsFillSymbol_FillColor(self, *args)

    def Outline(self, *args) -> "void":
        r"""
        *Overload 1:*
        边线符号

        |

        *Overload 2:*
        设置边线符号
        """
        return _gskernel.GsFillSymbol_Outline(self, *args)

    def Type(self) -> "GsSymbolType":
        return _gskernel.GsFillSymbol_Type(self)

# Register GsFillSymbol in _gskernel:
_gskernel.GsFillSymbol_swigregister(GsFillSymbol)

class GsSimpleFillSymbol(GsFillSymbol):
    r""" 简单面符号"""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        _gskernel.GsSimpleFillSymbol_swiginit(self, _gskernel.new_GsSimpleFillSymbol(*args))
    __swig_destroy__ = _gskernel.delete_GsSimpleFillSymbol

    def IsValid(self) -> "bool":
        r""" 符号是否有效 符号是否会在画布上绘制内容，如果符号不会在画布上绘制任何的内容则不需要执行绘制过程。"""
        return _gskernel.GsSimpleFillSymbol_IsValid(self)

    def Style(self, *args) -> "void":
        r"""
        *Overload 1:*
        画笔的式样

        |

        *Overload 2:*
        画笔的式样
        """
        return _gskernel.GsSimpleFillSymbol_Style(self, *args)

# Register GsSimpleFillSymbol in _gskernel:
_gskernel.GsSimpleFillSymbol_swigregister(GsSimpleFillSymbol)

ePFS_Grid = _gskernel.ePFS_Grid
r""" 格网填充"""
ePFS_Triangle = _gskernel.ePFS_Triangle
r""" 品形填充"""
ePFS_Random = _gskernel.ePFS_Random
r""" 随机填充"""
ePFS_LabelPoint = _gskernel.ePFS_LabelPoint
r""" Label点填充"""
class GsPointFillSymbol(GsFillSymbol):
    r""" 点填充符号"""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        _gskernel.GsPointFillSymbol_swiginit(self, _gskernel.new_GsPointFillSymbol(*args))

    def PointSymbol(self, *args) -> "void":
        r"""
        *Overload 1:*
        获取点符号

        |

        *Overload 2:*
        设置点符号
        """
        return _gskernel.GsPointFillSymbol_PointSymbol(self, *args)

    def Style(self, *args) -> "void":
        r"""
        *Overload 1:*
        获取点符号填充式样

        |

        *Overload 2:*
        设置点符号填充式样
        """
        return _gskernel.GsPointFillSymbol_Style(self, *args)

    def GridAngle(self, *args) -> "void":
        r"""
        *Overload 1:*
        获取格网填充时格网的角度

        |

        *Overload 2:*
        获取格网角度
        """
        return _gskernel.GsPointFillSymbol_GridAngle(self, *args)

    def Offset(self, *args) -> "void":
        r"""
        *Overload 1:*
        偏移

        |

        *Overload 2:*
        偏移
        """
        return _gskernel.GsPointFillSymbol_Offset(self, *args)

    def XSeparation(self, *args) -> "void":
        r"""
        *Overload 1:*
        x方向上间隔

        |

        *Overload 2:*
        x方向上间隔
        """
        return _gskernel.GsPointFillSymbol_XSeparation(self, *args)

    def YSeparation(self, *args) -> "void":
        r"""
        *Overload 1:*
        y方向上间隔

        |

        *Overload 2:*
        x方向上间隔
        """
        return _gskernel.GsPointFillSymbol_YSeparation(self, *args)

    def Picture(self) -> "GsImage *":
        r""" 获取图片"""
        return _gskernel.GsPointFillSymbol_Picture(self)

    def IsValid(self) -> "bool":
        r""" 符号是否有效 符号是否会在画布上绘制内容，如果符号不会在画布上绘制任何的内容则不需要执行绘制过程。"""
        return _gskernel.GsPointFillSymbol_IsValid(self)
    __swig_destroy__ = _gskernel.delete_GsPointFillSymbol

# Register GsPointFillSymbol in _gskernel:
_gskernel.GsPointFillSymbol_swigregister(GsPointFillSymbol)

class GsLineFillSymbol(GsFillSymbol):
    r""" 线填充符号"""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        _gskernel.GsLineFillSymbol_swiginit(self, _gskernel.new_GsLineFillSymbol(*args))

    def Angle(self, *args) -> "void":
        r"""
        *Overload 1:*
        获取线填充的角度

        |

        *Overload 2:*
        设置线填充的角度
        """
        return _gskernel.GsLineFillSymbol_Angle(self, *args)

    def LineSymbol(self, *args) -> "void":
        r"""
        *Overload 1:*
        获取线符号

        |

        *Overload 2:*
        设置线符号
        """
        return _gskernel.GsLineFillSymbol_LineSymbol(self, *args)

    def Separation(self, *args) -> "void":
        r"""
        *Overload 1:*
        获取线填充的间隔

        |

        *Overload 2:*
        设置线填充的间隔
        """
        return _gskernel.GsLineFillSymbol_Separation(self, *args)

    def Offset(self, *args) -> "void":
        r"""
        *Overload 1:*
        线的偏移

        |

        *Overload 2:*
        线的偏移
        """
        return _gskernel.GsLineFillSymbol_Offset(self, *args)
    __swig_destroy__ = _gskernel.delete_GsLineFillSymbol

# Register GsLineFillSymbol in _gskernel:
_gskernel.GsLineFillSymbol_swigregister(GsLineFillSymbol)

class GsPictureFillSymbol(GsFillSymbol):
    r""" 图片填充符号"""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        _gskernel.GsPictureFillSymbol_swiginit(self, _gskernel.new_GsPictureFillSymbol(*args))

    def Angle(self, *args) -> "void":
        r"""
        *Overload 1:*
        获取图片的旋转

        |

        *Overload 2:*
        设置图片的旋转
        """
        return _gskernel.GsPictureFillSymbol_Angle(self, *args)

    def Picture(self, *args) -> "void":
        r"""
        *Overload 1:*
        获取图片

        |

        *Overload 2:*
        设置图片
        """
        return _gskernel.GsPictureFillSymbol_Picture(self, *args)

    def BackColor(self, *args) -> "void":
        r"""
        *Overload 1:*
        背景色

        |

        *Overload 2:*
        透明色
        """
        return _gskernel.GsPictureFillSymbol_BackColor(self, *args)

    def TransparentColor(self, *args) -> "void":
        r"""
        *Overload 1:*
        透明色

        |

        *Overload 2:*
        设置线填充的间隔
        """
        return _gskernel.GsPictureFillSymbol_TransparentColor(self, *args)

    def XScale(self, *args) -> "void":
        r"""
        *Overload 1:*
        x方向上的缩放比率

        |

        *Overload 2:*
        x方向上的缩放比率
        """
        return _gskernel.GsPictureFillSymbol_XScale(self, *args)

    def YScale(self, *args) -> "void":
        r"""
        *Overload 1:*
        y方向上的缩放比率

        |

        *Overload 2:*
        y方向上的缩放比率
        """
        return _gskernel.GsPictureFillSymbol_YScale(self, *args)

    def LoadPicture(self, *args) -> "void":
        r"""
        *Overload 1:*
        从文件载入图片

        |

        *Overload 2:*
        从内存载入图片
        """
        return _gskernel.GsPictureFillSymbol_LoadPicture(self, *args)

    def Tile(self, *args) -> "void":
        r"""
        *Overload 1:*
        是否平铺

        |

        *Overload 2:*
        是否平铺
        """
        return _gskernel.GsPictureFillSymbol_Tile(self, *args)

    def Offset(self, *args) -> "void":
        r"""
        *Overload 1:*
        偏移

        |

        *Overload 2:*
        偏移
        """
        return _gskernel.GsPictureFillSymbol_Offset(self, *args)

    def XSeparation(self, *args) -> "void":
        r"""
        *Overload 1:*
        x方向上间隔

        |

        *Overload 2:*
        x方向上间隔
        """
        return _gskernel.GsPictureFillSymbol_XSeparation(self, *args)

    def YSeparation(self, *args) -> "void":
        r"""
        *Overload 1:*
        y方向上间隔

        |

        *Overload 2:*
        x方向上间隔
        """
        return _gskernel.GsPictureFillSymbol_YSeparation(self, *args)

    def IsValid(self) -> "bool":
        r""" 符号是否有效 符号是否会在画布上绘制内容，如果符号不会在画布上绘制任何的内容则不需要执行绘制过程。"""
        return _gskernel.GsPictureFillSymbol_IsValid(self)
    __swig_destroy__ = _gskernel.delete_GsPictureFillSymbol

# Register GsPictureFillSymbol in _gskernel:
_gskernel.GsPictureFillSymbol_swigregister(GsPictureFillSymbol)

eGFS_LINEAR = _gskernel.eGFS_LINEAR
eGFS_RECTANGULAR = _gskernel.eGFS_RECTANGULAR
eGFS_CIRCULAR = _gskernel.eGFS_CIRCULAR
eGFS_GFSBUFFERED = _gskernel.eGFS_GFSBUFFERED
class GsGradsFillSymbol(GsFillSymbol):
    r""" 渐变填充符号"""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        _gskernel.GsGradsFillSymbol_swiginit(self, _gskernel.new_GsGradsFillSymbol(*args))

    def GradsAngle(self, *args) -> "double":
        r"""
        *Overload 1:*
        渐变色填充的角度

        |

        *Overload 2:*
        渐变色填充的角度
        """
        return _gskernel.GsGradsFillSymbol_GradsAngle(self, *args)

    def Style(self, *args) -> "void":
        r"""
        *Overload 1:*
        渐变色填充的式样

        |

        *Overload 2:*
        渐变色填充的式样
        """
        return _gskernel.GsGradsFillSymbol_Style(self, *args)

    def Percentage(self, *args) -> "void":
        r"""
        *Overload 1:*
        渐变色填充的比率

        |

        *Overload 2:*
        渐变色填充的比率
        """
        return _gskernel.GsGradsFillSymbol_Percentage(self, *args)

    def Interval(self, *args) -> "void":
        r"""
        *Overload 1:*
        渐变色填充的间隔

        |

        *Overload 2:*
        渐变色填充的间隔
        """
        return _gskernel.GsGradsFillSymbol_Interval(self, *args)

    def StartColor(self, *args) -> "void":
        r"""
        *Overload 1:*
        渐变色

        |

        *Overload 2:*
        渐变色
        """
        return _gskernel.GsGradsFillSymbol_StartColor(self, *args)

    def EndColor(self, *args) -> "void":
        r"""
        *Overload 1:*
        渐变色

        |

        *Overload 2:*
        渐变色
        """
        return _gskernel.GsGradsFillSymbol_EndColor(self, *args)

    def GradsColor(self, *args) -> "void":
        r"""
        *Overload 1:*
        渐变色

        |

        *Overload 2:*
        渐变色
        """
        return _gskernel.GsGradsFillSymbol_GradsColor(self, *args)

    def IsValid(self) -> "bool":
        r""" 符号是否有效 符号是否会在画布上绘制内容，如果符号不会在画布上绘制任何的内容则不需要执行绘制过程。"""
        return _gskernel.GsGradsFillSymbol_IsValid(self)
    __swig_destroy__ = _gskernel.delete_GsGradsFillSymbol

# Register GsGradsFillSymbol in _gskernel:
_gskernel.GsGradsFillSymbol_swigregister(GsGradsFillSymbol)

class GsBuildingFillSymbol(GsFillSymbol):
    r""" 建筑符号"""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    NONE = _gskernel.GsBuildingFillSymbol_NONE
    r""" 不设置"""
    CONSTANTNUM = _gskernel.GsBuildingFillSymbol_CONSTANTNUM
    r""" 常数"""
    FIELDKEY = _gskernel.GsBuildingFillSymbol_FIELDKEY
    r""" 字段"""
    AUTOCAL = _gskernel.GsBuildingFillSymbol_AUTOCAL
    r""" 脚本计算"""

    def __init__(self):
        _gskernel.GsBuildingFillSymbol_swiginit(self, _gskernel.new_GsBuildingFillSymbol())

    def ViewAngle(self, *args) -> "void":
        r"""
        *Overload 1:*
        视角

        |

        *Overload 2:*
        视角
        """
        return _gskernel.GsBuildingFillSymbol_ViewAngle(self, *args)

    def ExtrusionBase(self) -> "int":
        r""" 基础，必须要小于或者等于高度"""
        return _gskernel.GsBuildingFillSymbol_ExtrusionBase(self)

    def ExtrusionHeightMode(self) -> "GsBuildingFillSymbol::GsExtrusionHeightMode":
        r""" 获取高度的方式"""
        return _gskernel.GsBuildingFillSymbol_ExtrusionHeightMode(self)

    def ExtrusionHeight(self, *args) -> "void":
        r"""
        *Overload 1:*
        高度(地理距离,单位米)

        |

        *Overload 2:*
        高度(地理距离,单位米)
        """
        return _gskernel.GsBuildingFillSymbol_ExtrusionHeight(self, *args)

    def ExtrusionHeightKey(self, *args) -> "void":
        r"""
        *Overload 1:*
        高度字段

        |

        *Overload 2:*
        高度字段
        """
        return _gskernel.GsBuildingFillSymbol_ExtrusionHeightKey(self, *args)

    def Type(self) -> "GsSymbolType":
        return _gskernel.GsBuildingFillSymbol_Type(self)

    def Style(self, *args) -> "void":
        r"""
        *Overload 1:*
        画笔的式样

        |

        *Overload 2:*
        画笔的式样
        """
        return _gskernel.GsBuildingFillSymbol_Style(self, *args)

    def IsValid(self) -> "bool":
        r""" 符号是否有效 符号是否会在画布上绘制内容，如果符号不会在画布上绘制任何的内容则不需要执行绘制过程。"""
        return _gskernel.GsBuildingFillSymbol_IsValid(self)

    def DrawTop(self, pGeo: 'GsGeometry') -> "void":
        r""" 绘制顶部"""
        return _gskernel.GsBuildingFillSymbol_DrawTop(self, pGeo)
    __swig_destroy__ = _gskernel.delete_GsBuildingFillSymbol

# Register GsBuildingFillSymbol in _gskernel:
_gskernel.GsBuildingFillSymbol_swigregister(GsBuildingFillSymbol)

eTextStyleNormal = _gskernel.eTextStyleNormal
r""" 无倾斜 ━━ ┃  ┃ ┃  ┃ ━━ """
eTextStyleLeftItalic = _gskernel.eTextStyleLeftItalic
r""" 左倾 ━━ ╲   ╲ ╲   ╲ ━━"""
eTextStyleRightItalic = _gskernel.eTextStyleRightItalic
r""" 右倾 ━━ ╱  ╱ ╱  ╱ ━━"""
eTextStyleLeftShrug = _gskernel.eTextStyleLeftShrug
r""" 右耸 ┃╲     ┃  ╲   ╲   ┃ ╲┃"""
eTextStyleRightShrug = _gskernel.eTextStyleRightShrug
r""" 右耸 ╱┃    ╱  ┃   ┃  ╱ ┃╱"""
class GsTextSymbol(GsSymbol):
    r""" 文本符号"""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self):
        r""" 默认构造函数"""
        _gskernel.GsTextSymbol_swiginit(self, _gskernel.new_GsTextSymbol())
    __swig_destroy__ = _gskernel.delete_GsTextSymbol

    def TextStyle(self, *args) -> "GsTextStyle":
        r"""
        *Overload 1:*
        设置倾斜类型

        |

        *Overload 2:*
        获取倾斜类型
        """
        return _gskernel.GsTextSymbol_TextStyle(self, *args)

    def Bold(self, *args) -> "bool":
        r"""
        *Overload 1:*
        设置加粗标识

        |

        *Overload 2:*
        获取加粗标识
        """
        return _gskernel.GsTextSymbol_Bold(self, *args)

    def Hollow(self, *args) -> "bool":
        r"""
        *Overload 1:*
        设置空心标识

        |

        *Overload 2:*
        获取空心标识
        """
        return _gskernel.GsTextSymbol_Hollow(self, *args)

    def UnderLine(self, *args) -> "bool":
        r"""
        *Overload 1:*
        设置下划线标识

        |

        *Overload 2:*
        获取下划线标识
        """
        return _gskernel.GsTextSymbol_UnderLine(self, *args)

    def StrikeOut(self, *args) -> "bool":
        r"""
        *Overload 1:*
        设置删除线标识

        |

        *Overload 2:*
        获取删除线标识
        """
        return _gskernel.GsTextSymbol_StrikeOut(self, *args)

    def Color(self, *args) -> "void":
        r"""
        *Overload 1:*
        返回符号的颜色

        |

        *Overload 2:*
        设置符号的颜色
        """
        return _gskernel.GsTextSymbol_Color(self, *args)

    def Font(self, *args) -> "void":
        r"""
        *Overload 1:*
        返回符号的字体

        |

        *Overload 2:*
        设置符号的字体
        """
        return _gskernel.GsTextSymbol_Font(self, *args)

    def Size(self, *args) -> "void":
        r"""
        *Overload 1:*
        返回符号的大小

        |

        *Overload 2:*
        设置符号的大小
        """
        return _gskernel.GsTextSymbol_Size(self, *args)

    def Text(self, *args) -> "void":
        r"""
        *Overload 1:*
        返回符号的文本

        |

        *Overload 2:*
        设置符号的文本
        """
        return _gskernel.GsTextSymbol_Text(self, *args)

    def HorizonAlign(self, *args) -> "void":
        r"""
        *Overload 1:*
        获取水平对齐方式

        |

        *Overload 2:*
        设置水平对齐方式
        """
        return _gskernel.GsTextSymbol_HorizonAlign(self, *args)

    def VerticalAlign(self, *args) -> "void":
        r"""
        *Overload 1:*
        获取垂直对齐方式

        |

        *Overload 2:*
        设置垂直对齐方式
        """
        return _gskernel.GsTextSymbol_VerticalAlign(self, *args)

    def Width(self, *args) -> "void":
        r"""
        *Overload 1:*
        获取注记宽度

        |

        *Overload 2:*
        设置注记高度
        """
        return _gskernel.GsTextSymbol_Width(self, *args)

    def Height(self, *args) -> "void":
        r"""
        *Overload 1:*
        获取注记高度

        |

        *Overload 2:*
        设置注记高度
        """
        return _gskernel.GsTextSymbol_Height(self, *args)

    def StyleAngle(self, *args) -> "void":
        r"""
        *Overload 1:*
        获取字体风格的倾斜角度

        |

        *Overload 2:*
        设置字体风格的倾斜角度
        """
        return _gskernel.GsTextSymbol_StyleAngle(self, *args)

    def Angle(self, *args) -> "void":
        r"""
        *Overload 1:*
        获取注记旋转角度

        |

        *Overload 2:*
        设置注记旋转角度
        """
        return _gskernel.GsTextSymbol_Angle(self, *args)

    def OffsetX(self, *args) -> "void":
        r"""
        *Overload 1:*
        获取注记X偏移

        |

        *Overload 2:*
        设置注记X偏移
        """
        return _gskernel.GsTextSymbol_OffsetX(self, *args)

    def OffsetY(self, *args) -> "void":
        r"""
        *Overload 1:*
        获取注记Y偏移

        |

        *Overload 2:*
        设置注记Y偏移
        """
        return _gskernel.GsTextSymbol_OffsetY(self, *args)

    def HorizonExtra(self, *args) -> "void":
        r"""
        *Overload 1:*
        获取注记水平间距

        |

        *Overload 2:*
        设置注记水平间距
        """
        return _gskernel.GsTextSymbol_HorizonExtra(self, *args)

    def VerticalExtra(self, *args) -> "void":
        r"""
        *Overload 1:*
        获取注记垂直间距

        |

        *Overload 2:*
        设置垂直水平间距
        """
        return _gskernel.GsTextSymbol_VerticalExtra(self, *args)

    def BackgroundColor(self, *args) -> "void":
        r"""
        *Overload 1:*
        返回注记的背景色

        |

        *Overload 2:*
        设置注记的背景色
        """
        return _gskernel.GsTextSymbol_BackgroundColor(self, *args)

    def ShadowColor(self, *args) -> "void":
        r"""
        *Overload 1:*
        返回注记阴影的颜色

        |

        *Overload 2:*
        设置注记阴影的颜色
        """
        return _gskernel.GsTextSymbol_ShadowColor(self, *args)

    def ShadowOffsetX(self, *args) -> "void":
        r"""
        *Overload 1:*
        返回注记阴影的X偏移

        |

        *Overload 2:*
        设置注记阴影的X偏移
        """
        return _gskernel.GsTextSymbol_ShadowOffsetX(self, *args)

    def ShadowOffsetY(self, *args) -> "void":
        r"""
        *Overload 1:*
        返回注记阴影的Y偏移

        |

        *Overload 2:*
        设置注记阴影的Y偏移
        """
        return _gskernel.GsTextSymbol_ShadowOffsetY(self, *args)

    def Type(self) -> "GsSymbolType":
        r""" 返回符号的类型"""
        return _gskernel.GsTextSymbol_Type(self)

    def IsValid(self) -> "bool":
        r""" 是否有效"""
        return _gskernel.GsTextSymbol_IsValid(self)

# Register GsTextSymbol in _gskernel:
_gskernel.GsTextSymbol_swigregister(GsTextSymbol)

eGeoMapDefineFormat = _gskernel.eGeoMapDefineFormat
r""" 地图定义文件的符号存储格式"""
eGenernalFormat = _gskernel.eGenernalFormat
r""" 跨平台符号的符号存储格式。"""
class GsSymbolLibrary(object):
    r""" 符号库对象。 用于实例化符号库的符号或者生成符号库文件。"""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        r"""
        *Overload 1:*
        从符号库文件或者符号库xml字符串实例化对象

        |

        *Overload 2:*
        构造一个空的符号库对象
        """
        _gskernel.GsSymbolLibrary_swiginit(self, _gskernel.new_GsSymbolLibrary(*args))
    __swig_destroy__ = _gskernel.delete_GsSymbolLibrary

    def SymbolByCode(self, *args) -> "GsSmarterPtr< GsSymbol >":
        r"""
        *Overload 1:*
         根据符号的Code查找符号 如果存在多个相同的code则返回第一个符号。

        |

        *Overload 2:*
         根据符号的Code查找符号 :type nCode: int
        :param nCode: 需要查找的编号 :type eType: int
        :param eType: 需要查找的符号的类型 :rtype: GsSmarterPtr< GsSymbol >
        :return: 返回特定类型(eType)下找到的(nCode)编号的第一个符号
        """
        return _gskernel.GsSymbolLibrary_SymbolByCode(self, *args)

    def SymbolByName(self, strName: 'char const *') -> "GsSmarterPtr< GsSymbol >":
        r""" 根据符号的名称查找符号 支持统配查找"""
        return _gskernel.GsSymbolLibrary_SymbolByName(self, strName)

    def SymbolBySchemaCode(self, SchemaCode: 'char const *') -> "GsSmarterPtr< GsSymbol >":
        r""" 根据字符串的图式编号查找Code 支持统配查找"""
        return _gskernel.GsSymbolLibrary_SymbolBySchemaCode(self, SchemaCode)

    def Symbols(self, *args) -> "GsVector< GsSmarterPtr< GsSymbol > >":
        r"""
        *Overload 1:*
        保存符号的集合

        |

        *Overload 2:*
        返回特定类型的符号。
        """
        return _gskernel.GsSymbolLibrary_Symbols(self, *args)

    def SaveToString(self, eFormat: 'GsSymbolLibraryFormat'=eGenernalFormat) -> "GsString":
        r""" 保存符号库到字符串"""
        return _gskernel.GsSymbolLibrary_SaveToString(self, eFormat)

    def Save(self, *args) -> "void":
        r"""
        *Overload 1:*
        保存符号库到文件

        |

        *Overload 2:*
        保存符号库到新的文件。
        """
        return _gskernel.GsSymbolLibrary_Save(self, *args)

    def Name(self, *args) -> "void":
        r"""
        *Overload 1:*
        符号库的名称

        |

        *Overload 2:*
        设置符号库的名称
        """
        return _gskernel.GsSymbolLibrary_Name(self, *args)

    def Description(self, *args) -> "void":
        r"""
        *Overload 1:*
        符号库的名称

        |

        *Overload 2:*
        设置符号库的描述信息。
        """
        return _gskernel.GsSymbolLibrary_Description(self, *args)

    @staticmethod
    def ToString(pSym: 'GsSymbol', eFormat: 'GsSymbolLibraryFormat'=eGenernalFormat) -> "GsString":
        r""" 将符号序列化为字符串。"""
        return _gskernel.GsSymbolLibrary_ToString(pSym, eFormat)

    @staticmethod
    def HashCode(pSym: 'GsSymbol') -> "long long":
        r""" 计算符号哈希值"""
        return _gskernel.GsSymbolLibrary_HashCode(pSym)

    @staticmethod
    def ParserSymbol(str: 'char const *') -> "GsSmarterPtr< GsSymbol >":
        r""" 从字符串解析生成符号对象"""
        return _gskernel.GsSymbolLibrary_ParserSymbol(str)

    @staticmethod
    def Assign(pSym: 'GsSymbol', strXML: 'char const *') -> "bool":
        r""" 为特定的符号解析并配置属性"""
        return _gskernel.GsSymbolLibrary_Assign(pSym, strXML)

# Register GsSymbolLibrary in _gskernel:
_gskernel.GsSymbolLibrary_swigregister(GsSymbolLibrary)

def GsSymbolLibrary_ToString(pSym: 'GsSymbol', eFormat: 'GsSymbolLibraryFormat'=eGenernalFormat) -> "GsString":
    r""" 将符号序列化为字符串。"""
    return _gskernel.GsSymbolLibrary_ToString(pSym, eFormat)

def GsSymbolLibrary_HashCode(pSym: 'GsSymbol') -> "long long":
    r""" 计算符号哈希值"""
    return _gskernel.GsSymbolLibrary_HashCode(pSym)

def GsSymbolLibrary_ParserSymbol(str: 'char const *') -> "GsSmarterPtr< GsSymbol >":
    r""" 从字符串解析生成符号对象"""
    return _gskernel.GsSymbolLibrary_ParserSymbol(str)

def GsSymbolLibrary_Assign(pSym: 'GsSymbol', strXML: 'char const *') -> "bool":
    r""" 为特定的符号解析并配置属性"""
    return _gskernel.GsSymbolLibrary_Assign(pSym, strXML)

class GsMultiLineSymbol(GsLineSymbol):
    r""" 复合线符号"""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self):
        _gskernel.GsMultiLineSymbol_swiginit(self, _gskernel.new_GsMultiLineSymbol())

    def Add(self, pSymbol: 'GsLineSymbol') -> "void":
        r""" 增加子符号"""
        return _gskernel.GsMultiLineSymbol_Add(self, pSymbol)

    def Clear(self) -> "void":
        r""" 清空所有的符号"""
        return _gskernel.GsMultiLineSymbol_Clear(self)

    def Count(self) -> "int":
        r""" 子符号的数量"""
        return _gskernel.GsMultiLineSymbol_Count(self)

    def RemoveAt(self, i: 'int') -> "void":
        r""" 子符号的数量"""
        return _gskernel.GsMultiLineSymbol_RemoveAt(self, i)

    def ElementAt(self, i: 'int') -> "GsLineSymbol *":
        r""" 获取子符号"""
        return _gskernel.GsMultiLineSymbol_ElementAt(self, i)

    def IsValid(self) -> "bool":
        r""" 符号是否有效 符号是否会在画布上绘制内容，如果符号不会在画布上绘制任何的内容则不需要执行绘制过程。"""
        return _gskernel.GsMultiLineSymbol_IsValid(self)

    def Width(self, *args) -> "void":
        r"""
        *Overload 1:*
        获取线符号的宽度,单位毫米

        |

        *Overload 2:*
        设置线符号的宽度,单位毫米
        """
        return _gskernel.GsMultiLineSymbol_Width(self, *args)

    def Color(self, *args) -> "void":
        r"""
        *Overload 1:*
        获取线符号颜色

        |

        *Overload 2:*
        设置线符号颜色
        """
        return _gskernel.GsMultiLineSymbol_Color(self, *args)
    __swig_destroy__ = _gskernel.delete_GsMultiLineSymbol

# Register GsMultiLineSymbol in _gskernel:
_gskernel.GsMultiLineSymbol_swigregister(GsMultiLineSymbol)

class GsMultiFillSymbol(GsFillSymbol):
    r""" 复合面符号"""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self):
        _gskernel.GsMultiFillSymbol_swiginit(self, _gskernel.new_GsMultiFillSymbol())

    def Add(self, pSymbol: 'GsFillSymbol') -> "void":
        r""" 增加子符号"""
        return _gskernel.GsMultiFillSymbol_Add(self, pSymbol)

    def Clear(self) -> "void":
        r""" 清空所有的符号"""
        return _gskernel.GsMultiFillSymbol_Clear(self)

    def Count(self) -> "int":
        r""" 子符号的数量"""
        return _gskernel.GsMultiFillSymbol_Count(self)

    def RemoveAt(self, i: 'int') -> "void":
        r""" 子符号的数量"""
        return _gskernel.GsMultiFillSymbol_RemoveAt(self, i)

    def ElementAt(self, i: 'int') -> "GsFillSymbol *":
        r""" 获取子符号"""
        return _gskernel.GsMultiFillSymbol_ElementAt(self, i)

    def IsValid(self) -> "bool":
        r""" 符号是否有效 符号是否会在画布上绘制内容，如果符号不会在画布上绘制任何的内容则不需要执行绘制过程。"""
        return _gskernel.GsMultiFillSymbol_IsValid(self)

    def FillColor(self, *args) -> "void":
        r"""
        *Overload 1:*
        获取填充的颜色

        |

        *Overload 2:*
        设置填充的颜色
        """
        return _gskernel.GsMultiFillSymbol_FillColor(self, *args)
    __swig_destroy__ = _gskernel.delete_GsMultiFillSymbol

# Register GsMultiFillSymbol in _gskernel:
_gskernel.GsMultiFillSymbol_swigregister(GsMultiFillSymbol)

class GsMultiPointSymbol(GsPointSymbol):
    r""" 复合点符号"""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def Add(self, pSymbol: 'GsPointSymbol') -> "void":
        r""" 增加子符号"""
        return _gskernel.GsMultiPointSymbol_Add(self, pSymbol)

    def Clear(self) -> "void":
        r""" 清空所有的符号"""
        return _gskernel.GsMultiPointSymbol_Clear(self)

    def Count(self) -> "int":
        r""" 子符号的数量"""
        return _gskernel.GsMultiPointSymbol_Count(self)

    def RemoveAt(self, i: 'int') -> "void":
        r""" 子符号的数量"""
        return _gskernel.GsMultiPointSymbol_RemoveAt(self, i)

    def ElementAt(self, i: 'int') -> "GsPointSymbol *":
        r""" 获取子符号"""
        return _gskernel.GsMultiPointSymbol_ElementAt(self, i)

    def IsValid(self) -> "bool":
        r""" 符号是否有效 符号是否会在画布上绘制内容，如果符号不会在画布上绘制任何的内容则不需要执行绘制过程。"""
        return _gskernel.GsMultiPointSymbol_IsValid(self)

    def __init__(self):
        _gskernel.GsMultiPointSymbol_swiginit(self, _gskernel.new_GsMultiPointSymbol())

    def Size(self, *args) -> "void":
        r"""
        *Overload 1:*
        符号大小

        |

        *Overload 2:*
        设置符号大小
        """
        return _gskernel.GsMultiPointSymbol_Size(self, *args)

    def Color(self, *args) -> "void":
        r"""
        *Overload 1:*
        颜色

        |

        *Overload 2:*
        设置颜色
        """
        return _gskernel.GsMultiPointSymbol_Color(self, *args)

    def Angle(self, *args) -> "void":
        r"""
        *Overload 1:*
        获取旋转角

        |

        *Overload 2:*
        设置旋转角
        """
        return _gskernel.GsMultiPointSymbol_Angle(self, *args)

    def OffsetX(self, val: 'double') -> "void":
        r""" x偏移"""
        return _gskernel.GsMultiPointSymbol_OffsetX(self, val)

    def OffsetY(self, val: 'double') -> "void":
        r""" y偏移"""
        return _gskernel.GsMultiPointSymbol_OffsetY(self, val)

    def Offset(self, val: 'GsRawPoint') -> "void":
        r""" 偏移"""
        return _gskernel.GsMultiPointSymbol_Offset(self, val)

    def Envelope(self) -> "GsBox":
        r""" 点符号的矩形范围"""
        return _gskernel.GsMultiPointSymbol_Envelope(self)

    def IsDirectionPoint(self, *args) -> "bool":
        return _gskernel.GsMultiPointSymbol_IsDirectionPoint(self, *args)

    def MultiSize(self) -> "double":
        r""" Multi符号外框的大小"""
        return _gskernel.GsMultiPointSymbol_MultiSize(self)
    __swig_destroy__ = _gskernel.delete_GsMultiPointSymbol

# Register GsMultiPointSymbol in _gskernel:
_gskernel.GsMultiPointSymbol_swigregister(GsMultiPointSymbol)

class GsLabel(GsRefObject):
    r""" 标注对象"""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _gskernel.delete_GsLabel

    def Geometry(self) -> "GsGeometryBlob *":
        r""" 标准绘制的Geometry"""
        return _gskernel.GsLabel_Geometry(self)

    def LabelPoint(self, *args) -> "GsRawPoint":
        r"""
        *Overload 1:*
        标注的点

        |

        *Overload 2:*
        标注的点
        """
        return _gskernel.GsLabel_LabelPoint(self, *args)

    def Reset(self) -> "void":
        r""" 重置标注为初始状态"""
        return _gskernel.GsLabel_Reset(self)

    def Priority(self, *args) -> "void":
        r"""
        *Overload 1:*
        获取标注的优先级

        |

        *Overload 2:*
        设置标注的优先级
        """
        return _gskernel.GsLabel_Priority(self, *args)

    def Order(self, *args) -> "void":
        r"""
        *Overload 1:*
        获取标注的顺序

        |

        *Overload 2:*
        获取标注的顺序
        """
        return _gskernel.GsLabel_Order(self, *args)

    def OwnID(self, *args) -> "void":
        r"""
        *Overload 1:*
        标注所属几何标识

        |

        *Overload 2:*
        标注所属几何标识
        """
        return _gskernel.GsLabel_OwnID(self, *args)

    def Symbol(self, *args) -> "void":
        r"""
        *Overload 1:*
        标注绘制的符号

        |

        *Overload 2:*
        标注绘制的符号
        """
        return _gskernel.GsLabel_Symbol(self, *args)

    def PointSymbol(self, *args) -> "void":
        r"""
        *Overload 1:*
        标注点符号

        |

        *Overload 2:*
        标注点符号
        """
        return _gskernel.GsLabel_PointSymbol(self, *args)

    def Text(self, *args) -> "void":
        r"""
        *Overload 1:*
        标注的文本

        |

        *Overload 2:*
        标注的文本
        """
        return _gskernel.GsLabel_Text(self, *args)

    def IsIntersects(self, rhs: 'GsLabel') -> "bool":
        r""" 是否和另外一个label堆叠"""
        return _gskernel.GsLabel_IsIntersects(self, rhs)

    def Draw(self, pDT: 'GsDisplayTransformation', pCanvas: 'GsCanvas') -> "void":
        r""" 绘制标注"""
        return _gskernel.GsLabel_Draw(self, pDT, pCanvas)

# Register GsLabel in _gskernel:
_gskernel.GsLabel_swigregister(GsLabel)

class GsLabelContainer(GsRefObject):
    r""" 自动标注避让容器抽象基类"""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __swig_destroy__ = _gskernel.delete_GsLabelContainer

    def Enabled(self, *args) -> "void":
        r"""
        *Overload 1:*
        是否允许自动标注

        |

        *Overload 2:*
        是否允许自动标注
        """
        return _gskernel.GsLabelContainer_Enabled(self, *args)

    def MaxLabel(self, *args) -> "void":
        r"""
        *Overload 1:*
        最大存储的标注

        |

        *Overload 2:*
        最大存储的标注
        """
        return _gskernel.GsLabelContainer_MaxLabel(self, *args)

    def CreateLabel(self) -> "GsSmarterPtr< GsLabelContainer >":
        r""" 创建或者复用一个Label对象。"""
        return _gskernel.GsLabelContainer_CreateLabel(self)

    def Begin(self) -> "void":
        r""" 准备避让"""
        return _gskernel.GsLabelContainer_Begin(self)

    def Add(self, label: 'GsLabel') -> "bool":
        r""" 增加一个标注到容器"""
        return _gskernel.GsLabelContainer_Add(self, label)

    def End(self) -> "void":
        r""" 结束避让"""
        return _gskernel.GsLabelContainer_End(self)

    def DrawLabel(self, pDT: 'GsDisplayTransformation', pCanvas: 'GsCanvas') -> "void":
        r""" 绘制标注"""
        return _gskernel.GsLabelContainer_DrawLabel(self, pDT, pCanvas)

# Register GsLabelContainer in _gskernel:
_gskernel.GsLabelContainer_swigregister(GsLabelContainer)

class GsSimpleLabelContainer(GsLabelContainer):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self):
        _gskernel.GsSimpleLabelContainer_swiginit(self, _gskernel.new_GsSimpleLabelContainer())
    __swig_destroy__ = _gskernel.delete_GsSimpleLabelContainer

# Register GsSimpleLabelContainer in _gskernel:
_gskernel.GsSimpleLabelContainer_swigregister(GsSimpleLabelContainer)

class GsAdvancedLabelContainer(GsSimpleLabelContainer):
    r""" GsSimpleLabelContainerPtr  进阶版标注容器，采用更为复杂的避让规则"""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self):
        _gskernel.GsAdvancedLabelContainer_swiginit(self, _gskernel.new_GsAdvancedLabelContainer())
    __swig_destroy__ = _gskernel.delete_GsAdvancedLabelContainer

# Register GsAdvancedLabelContainer in _gskernel:
_gskernel.GsAdvancedLabelContainer_swigregister(GsAdvancedLabelContainer)

class GsLabelProperty(GsRefObject):
    r""" 自动标注计算基类"""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _gskernel.delete_GsLabelProperty

    def Begin(self, pDT: 'GsDisplayTransformation', pContainer: 'GsLabelContainer') -> "void":
        r""" 准备开始标注计算"""
        return _gskernel.GsLabelProperty_Begin(self, pDT, pContainer)

    def End(self) -> "void":
        r""" 结束标注计算"""
        return _gskernel.GsLabelProperty_End(self)

    def LabelField(self, *args) -> "void":
        r"""
        *Overload 1:*
        要标注的字段名称

        |

        *Overload 2:*
        要标注的字段名称
        """
        return _gskernel.GsLabelProperty_LabelField(self, *args)

    def Symbol(self, *args) -> "void":
        r"""
        *Overload 1:*
        标注绘制的符号

        |

        *Overload 2:*
        标注绘制的符号
        """
        return _gskernel.GsLabelProperty_Symbol(self, *args)

    def CalculateLabel(self, *args) -> "bool":
        r"""
        *Overload 1:*
        计算标注

        |

        *Overload 2:*
        计算标注
        """
        return _gskernel.GsLabelProperty_CalculateLabel(self, *args)

# Register GsLabelProperty in _gskernel:
_gskernel.GsLabelProperty_swigregister(GsLabelProperty)

eRight = _gskernel.eRight
r"""标注位于符号右边         ★Label"""
eLeft = _gskernel.eLeft
r"""标注位于符号左边       Label★"""
eTop = _gskernel.eTop
r"""标注位于符号顶部        Label         ★"""
eBottom = _gskernel.eBottom
r"""标注位于符号底部         ★        Label"""
eTopLeft = _gskernel.eTopLeft
r"""标注位于符号左上    Label         ★"""
eTopRight = _gskernel.eTopRight
r"""标注位于符号右上           Label         ★"""
eBottomLeft = _gskernel.eBottomLeft
r"""标注位于符号左下                    ★    Label"""
eBottomRight = _gskernel.eBottomRight
r"""标注位于符号右下                    ★           Label"""
eAbandonPriority = _gskernel.eAbandonPriority
r""" 放弃"""
eHighPriority = _gskernel.eHighPriority
r""" 高优先级"""
eMiddlePriority = _gskernel.eMiddlePriority
r""" 中等优先级"""
eLowPriority = _gskernel.eLowPriority
r""" 低先级"""
class GsPointLabelProperty(GsLabelProperty):
    r""" 点自动标注计算类"""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr

    def PlaceOrder(self, *args) -> "void":
        r"""
        *Overload 1:*
        获取标注位置的优先级

        |

        *Overload 2:*
        设置标注位置的优先级
        """
        return _gskernel.GsPointLabelProperty_PlaceOrder(self, *args)
    __swig_destroy__ = _gskernel.delete_GsPointLabelProperty

# Register GsPointLabelProperty in _gskernel:
_gskernel.GsPointLabelProperty_swigregister(GsPointLabelProperty)

class GsLineLabelProperty(GsLabelProperty):
    r""" 线自动标注计算类"""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _gskernel.delete_GsLineLabelProperty

# Register GsLineLabelProperty in _gskernel:
_gskernel.GsLineLabelProperty_swigregister(GsLineLabelProperty)

class GsSurfaceLabelProperty(GsLabelProperty):
    r""" 面自动标注计算类"""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _gskernel.delete_GsSurfaceLabelProperty

# Register GsSurfaceLabelProperty in _gskernel:
_gskernel.GsSurfaceLabelProperty_swigregister(GsSurfaceLabelProperty)

eWin32HwndDeviceDC = _gskernel.eWin32HwndDeviceDC
r""" Windows平台上使用GDI在HWND窗体上绘制的设备"""
eWin32HwndDeviceD2D = _gskernel.eWin32HwndDeviceD2D
r""" Windows平台上使用Direct2D硬件加速画布在HWND窗体上绘制的设备"""
eQTBackingStore = _gskernel.eQTBackingStore
r""" 基于QT的BackingStore创建的绘制设备"""
eOpenGLDevice = _gskernel.eOpenGLDevice
r""" OpenGL硬件加速绘制的设备"""
eOpenGLESDevice = _gskernel.eOpenGLESDevice
r""" OpenGLES硬件加速绘制的设备"""
eCanGrabWindowImage = _gskernel.eCanGrabWindowImage
r""" 绘制设备是否支持将窗体会绘制的内容复制为图片 0:表示不支持，1：表示支持"""
class GsPaintDevice(GsRefObject):
    r""" 绘制设备抽象基类 不同操作系统上的绘制设备接口不一，通过绘制设备接口实现所有操作系统上绘制的设备的同意操作。"""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _gskernel.delete_GsPaintDevice

    def TestCapbility(self, eCapbility: 'GsPaintDeviceCapbility') -> "int":
        r"""
         测试绘制设备上是否支持某项能力 :type eCapbility: int
        :param eCapbility: 绘制设备的能力 :rtype: int
        :return: 返回测试结果，通常情况下0为false，1位为ture
        """
        return _gskernel.GsPaintDevice_TestCapbility(self, eCapbility)

    def CreateImageCanvas(self, extent: 'GsRect', pOld: 'GsImageCanvas'=None) -> "GsSmarterPtr< GsImageCanvas >":
        r"""
         以为设备为基础创建一个指定大小的位图画布 创建一个可以在设备绘制的位图，大小通常和设备的显示大小相当。 当某种显示设备不支持eCanGrabWindowImage能力时需要由Display通过此方法创建临时位图以实现双缓冲绘图。 :type extent: :py:class:`GsRect`
        :param extent: 要创建的位图大小 :type pOld: :py:class:`GsImageCanvas`
        :param pOld: 上一次使用此方法创建的位图 :rtype: GsSmarterPtr< GsImageCanvas >
        :return: 创建的位图画布
        """
        return _gskernel.GsPaintDevice_CreateImageCanvas(self, extent, pOld)

    def StartDrawing(self, extent: 'GsRect') -> "GsSmarterPtr< GsCanvas >":
        r"""
         开始设备上的绘制 :type extent: :py:class:`GsRect`
        :param extent: 绘制的范围 :rtype: GsSmarterPtr< GsCanvas >
        :return: 返回可以在此设备上绘制的画布
        """
        return _gskernel.GsPaintDevice_StartDrawing(self, extent)

    def EndDrawing(self) -> "bool":
        r""" 结束设备上的绘制"""
        return _gskernel.GsPaintDevice_EndDrawing(self)

    def OnSizeChanged(self) -> "void":
        r""" 通知设备外部接收到绘制设备改变消息"""
        return _gskernel.GsPaintDevice_OnSizeChanged(self)

    @staticmethod
    def CreatePaintDevice(eType: 'GsPaintDeviceType', pHandle: 'long long', strOption: 'char const *'=None) -> "GsSmarterPtr< GsPaintDevice >":
        r"""
         根据设备类型创建系统内置的可绘制设备 :type eType: int
        :param eType: 可绘制设备内省 :type pHandle: int
        :param pHandle: 绘制设备在该平台上的句柄或者相关数据，如windows平台上位HWND句柄 :type strOption: string
        :param strOption: 更多的参数
        """
        return _gskernel.GsPaintDevice_CreatePaintDevice(eType, pHandle, strOption)

# Register GsPaintDevice in _gskernel:
_gskernel.GsPaintDevice_swigregister(GsPaintDevice)

def GsPaintDevice_CreatePaintDevice(eType: 'GsPaintDeviceType', pHandle: 'long long', strOption: 'char const *'=None) -> "GsSmarterPtr< GsPaintDevice >":
    r"""
     根据设备类型创建系统内置的可绘制设备 :type eType: int
    :param eType: 可绘制设备内省 :type pHandle: int
    :param pHandle: 绘制设备在该平台上的句柄或者相关数据，如windows平台上位HWND句柄 :type strOption: string
    :param strOption: 更多的参数
    """
    return _gskernel.GsPaintDevice_CreatePaintDevice(eType, pHandle, strOption)

class GsPaintDeviceFactory(GsRefObject):
    r""" 绘制设备抽象工厂 用于创建不同操作系统的上的绘制设备。"""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __swig_destroy__ = _gskernel.delete_GsPaintDeviceFactory

    def CreatePaintDevice(self, pHandle: 'long long', strOption: 'char const *'=None) -> "GsSmarterPtr< GsPaintDevice >":
        r""" 从窗体或者设备句柄创建绘制设备"""
        return _gskernel.GsPaintDeviceFactory_CreatePaintDevice(self, pHandle, strOption)

# Register GsPaintDeviceFactory in _gskernel:
_gskernel.GsPaintDeviceFactory_swigregister(GsPaintDeviceFactory)

class GsDisplay(GsRefObject):
    r""" 显示对象 代表地图的显示设备"""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, pCanvas: 'GsCanvas', pDT: 'GsDisplayTransformation'):
        _gskernel.GsDisplay_swiginit(self, _gskernel.new_GsDisplay(pCanvas, pDT))
    __swig_destroy__ = _gskernel.delete_GsDisplay

    def LabelContainer(self, *args) -> "void":
        r"""
        *Overload 1:*
        获取自动标注避让容器

        |

        *Overload 2:*
        获取自动标注避让容器
        """
        return _gskernel.GsDisplay_LabelContainer(self, *args)

    def ClipEnvelope(self) -> "GsBox":
        r"""
         当前显示的地理范围 :rtype: :py:class:`GsBox`
        :return: 返回显示地物范围的Box
        """
        return _gskernel.GsDisplay_ClipEnvelope(self)

    def BackColor(self, *args) -> "void":
        r"""
        *Overload 1:*
         获取绘制的背景颜色 :rtype: :py:class:`GsColor`
        :return: 返回背景颜色

        |

        *Overload 2:*
         设置绘制的背景颜色 :type c: :py:class:`GsColor`
        :param c: 背景颜色
        """
        return _gskernel.GsDisplay_BackColor(self, *args)

    def StartDrawing(self) -> "void":
        r""" 开始绘制"""
        return _gskernel.GsDisplay_StartDrawing(self)

    def EndDrawing(self) -> "void":
        r""" 结束绘制"""
        return _gskernel.GsDisplay_EndDrawing(self)

    def Flush(self) -> "void":
        r""" 提交绘制内容"""
        return _gskernel.GsDisplay_Flush(self)

    def Canvas(self) -> "GsCanvas *":
        r""" 获取绘制用的画布"""
        return _gskernel.GsDisplay_Canvas(self)

    def DisplayTransformation(self) -> "GsDisplayTransformation *":
        r"""
         获取坐标转换对象 :rtype: :py:class:`GsDisplayTransformation`
        :return: 返回坐标转换对象指针
        """
        return _gskernel.GsDisplay_DisplayTransformation(self)

# Register GsDisplay in _gskernel:
_gskernel.GsDisplay_swigregister(GsDisplay)

class GsTrackCancel(GsRefObject):
    r""" 取消追踪"""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self):
        r""" 缺省构造"""
        _gskernel.GsTrackCancel_swiginit(self, _gskernel.new_GsTrackCancel())
    __swig_destroy__ = _gskernel.delete_GsTrackCancel

    def Name(self, *args) -> "void":
        r"""
        *Overload 1:*
        获取名称

        |

        *Overload 2:*
        设置名称
        """
        return _gskernel.GsTrackCancel_Name(self, *args)

    def StartTimer(self, nMilliseconds: 'unsigned int'=200) -> "void":
        r"""
         开始计时 :type nMilliseconds: int
        :param nMilliseconds: 计时周期，单位毫秒，缺省200毫秒
        """
        return _gskernel.GsTrackCancel_StartTimer(self, nMilliseconds)

    def FinishTimer(self) -> "long long":
        r""" 结束计时"""
        return _gskernel.GsTrackCancel_FinishTimer(self)

    def TimerFired(self) -> "bool":
        r""" 是否到达一个计时周期"""
        return _gskernel.GsTrackCancel_TimerFired(self)

    def Reset(self) -> "void":
        r""" 重置取消状态"""
        return _gskernel.GsTrackCancel_Reset(self)

    def Cancel(self) -> "void":
        r""" 取消"""
        return _gskernel.GsTrackCancel_Cancel(self)

    def Continue(self) -> "bool":
        r"""
         可否继续 是否调用Cancel进行取消 :rtype: boolean
        :return: 返回是否处于取消状态
        """
        return _gskernel.GsTrackCancel_Continue(self)

    def FireTimer(self) -> "void":
        r""" 导致计时器立刻被激发"""
        return _gskernel.GsTrackCancel_FireTimer(self)

# Register GsTrackCancel in _gskernel:
_gskernel.GsTrackCancel_swigregister(GsTrackCancel)

class GsScreenDisplay(GsDisplay):
    r""" 屏幕显示对象 将可绘制设备封装成为屏幕绘制显示对象"""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        _gskernel.GsScreenDisplay_swiginit(self, _gskernel.new_GsScreenDisplay(*args))
    __swig_destroy__ = _gskernel.delete_GsScreenDisplay

    def BindDevice(self, pDevice: 'GsPaintDevice') -> "void":
        r""" 绑定设备"""
        return _gskernel.GsScreenDisplay_BindDevice(self, pDevice)

    def BeginRecording(self, order: 'int') -> "GsImageCanvas *":
        r""" 开始记录。"""
        return _gskernel.GsScreenDisplay_BeginRecording(self, order)

    def RecordingCanvas(self) -> "GsImageCanvas *":
        r""" 正用于记录的画布"""
        return _gskernel.GsScreenDisplay_RecordingCanvas(self)

    def EndRecording(self) -> "void":
        r""" 结束记录"""
        return _gskernel.GsScreenDisplay_EndRecording(self)

    def PanStart(self, x: 'double', y: 'double') -> "void":
        r"""
         从地理坐标开始漫游 :type x: float
        :param x: 地理x坐标 :type y: float
        :param y: 地理y坐标
        """
        return _gskernel.GsScreenDisplay_PanStart(self, x, y)

    def PanMoveTo(self, x: 'double', y: 'double') -> "void":
        r"""
         漫游到地理坐标 :type x: float
        :param x: 地理x坐标 :type y: float
        :param y: 地理y坐标
        """
        return _gskernel.GsScreenDisplay_PanMoveTo(self, x, y)

    def PanStop(self) -> "GsBox":
        r"""
         停止漫游 :rtype: :py:class:`GsBox`
        :return: 返回漫游结束时应该实现的地理范围
        """
        return _gskernel.GsScreenDisplay_PanStop(self)

    def HasStartPan(self) -> "bool":
        return _gskernel.GsScreenDisplay_HasStartPan(self)

    def Paint(self, *args) -> "void":
        r"""
         将缓存的内容绘制到设备上 :type pt: :py:class:`GsPT`
        :param pt: 绘制偏移的像素坐标
        """
        return _gskernel.GsScreenDisplay_Paint(self, *args)

    def OnSizeChanged(self) -> "void":
        r""" 当绘制设备发生变化时"""
        return _gskernel.GsScreenDisplay_OnSizeChanged(self)

    def StartDrawing(self) -> "void":
        r""" 开始绘制"""
        return _gskernel.GsScreenDisplay_StartDrawing(self)

    def EndDrawing(self) -> "void":
        r""" 结束绘制"""
        return _gskernel.GsScreenDisplay_EndDrawing(self)

    def Flush(self) -> "void":
        r""" 提交绘制结果到屏幕"""
        return _gskernel.GsScreenDisplay_Flush(self)

# Register GsScreenDisplay in _gskernel:
_gskernel.GsScreenDisplay_swigregister(GsScreenDisplay)

eDrawNormal = _gskernel.eDrawNormal
r""" 通用绘制"""
eDrawSelectionSet = _gskernel.eDrawSelectionSet
r""" 绘制选择集"""
class GsLayer(GsRefObject):
    r""" 图形的抽象基类"""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _gskernel.delete_GsLayer

    def Name(self, *args) -> "void":
        r"""
        *Overload 1:*
        图层的名称

        |

        *Overload 2:*
        设置图层的名称
        """
        return _gskernel.GsLayer_Name(self, *args)

    def AliasName(self, *args) -> "void":
        r"""
        *Overload 1:*
        图层的别名

        |

        *Overload 2:*
        设置图层的别名
        """
        return _gskernel.GsLayer_AliasName(self, *args)

    def Visible(self, *args) -> "void":
        r"""
        *Overload 1:*
        图层是否可见

        |

        *Overload 2:*
        设置图层是否可见
        """
        return _gskernel.GsLayer_Visible(self, *args)

    def ReferenceScale(self, *args) -> "void":
        r"""
        *Overload 1:*
        参考比例尺

        |

        *Overload 2:*
        参考比例尺
        """
        return _gskernel.GsLayer_ReferenceScale(self, *args)

    def MinScale(self, *args) -> "void":
        r"""
        *Overload 1:*
        图层最小可见比例尺

        |

        *Overload 2:*
        设置图层最小可见比例尺
        """
        return _gskernel.GsLayer_MinScale(self, *args)

    def MaxScale(self, *args) -> "void":
        r"""
        *Overload 1:*
        图层最大可见比例尺

        |

        *Overload 2:*
        设置图层最大可见比例尺
        """
        return _gskernel.GsLayer_MaxScale(self, *args)

    def Tag(self, *args) -> "void":
        r"""
        *Overload 1:*
        图层的名称

        |

        *Overload 2:*
        设置图层的名称
        """
        return _gskernel.GsLayer_Tag(self, *args)

    def IsValid(self) -> "bool":
        r""" 是否有效"""
        return _gskernel.GsLayer_IsValid(self)

    def Extent(self, pTargetSR: 'GsSpatialReference'=None) -> "GsBox":
        r""" 图层的最大范围,以图层的空间参考显示"""
        return _gskernel.GsLayer_Extent(self, pTargetSR)

    def HasSelection(self) -> "bool":
        r""" 图层是否存在选择集"""
        return _gskernel.GsLayer_HasSelection(self)

    def SpatialReference(self) -> "GsSpatialReference *":
        r""" 图层的空间参考"""
        return _gskernel.GsLayer_SpatialReference(self)

    def Draw(self, pDisplay: 'GsDisplay', pCancel: 'GsTrackCancel', eDrawPhase: 'GsDrawPhase') -> "bool":
        r"""
         图形绘制入口 :param pDislay: 绘制对象 :type pCancel: :py:class:`GsTrackCancel`
        :param pCancel: 绘制取消对象
        """
        return _gskernel.GsLayer_Draw(self, pDisplay, pCancel, eDrawPhase)

# Register GsLayer in _gskernel:
_gskernel.GsLayer_swigregister(GsLayer)

class GsLayerVector(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self):
        _gskernel.GsLayerVector_swiginit(self, _gskernel.new_GsLayerVector())
    __swig_destroy__ = _gskernel.delete_GsLayerVector

    def add(self, obj: 'GsLayer') -> "void":
        return _gskernel.GsLayerVector_add(self, obj)

    def size(self) -> "size_t":
        return _gskernel.GsLayerVector_size(self)

    def clear(self) -> "void":
        return _gskernel.GsLayerVector_clear(self)

    def empty(self) -> "bool":
        return _gskernel.GsLayerVector_empty(self)

    def get(self, n: 'int') -> "GsSmarterPtr< GsLayer >":
        return _gskernel.GsLayerVector_get(self, n)

    def set(self, n: 'int', val: 'GsLayer') -> "void":
        return _gskernel.GsLayerVector_set(self, n, val)

# Register GsLayerVector in _gskernel:
_gskernel.GsLayerVector_swigregister(GsLayerVector)

class GsMultiLayer(GsLayer):
    r""" 复合图层"""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self):
        _gskernel.GsMultiLayer_swiginit(self, _gskernel.new_GsMultiLayer())
    __swig_destroy__ = _gskernel.delete_GsMultiLayer

    def Layers(self) -> "GsVector< GsSmarterPtr< GsLayer > > *":
        r""" 获取图层列表对象指针"""
        return _gskernel.GsMultiLayer_Layers(self)

    def Extent(self, pTargetSR: 'GsSpatialReference'=None) -> "GsBox":
        r""" 图层的最大范围"""
        return _gskernel.GsMultiLayer_Extent(self, pTargetSR)

    def HasSelection(self) -> "bool":
        r""" 图层是否存在选择集"""
        return _gskernel.GsMultiLayer_HasSelection(self)

    def SpatialReference(self) -> "GsSpatialReference *":
        r""" 图层的空间参考"""
        return _gskernel.GsMultiLayer_SpatialReference(self)

    def IsValid(self) -> "bool":
        r""" 是否有效"""
        return _gskernel.GsMultiLayer_IsValid(self)

# Register GsMultiLayer in _gskernel:
_gskernel.GsMultiLayer_swigregister(GsMultiLayer)

class GsLayerCollection(GsRefObject):
    r""" 图层集合"""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self):
        _gskernel.GsLayerCollection_swiginit(self, _gskernel.new_GsLayerCollection())
    __swig_destroy__ = _gskernel.delete_GsLayerCollection

    def Count(self) -> "int":
        r""" 图层的数量"""
        return _gskernel.GsLayerCollection_Count(self)

    def Layer(self, i: 'int') -> "GsLayer *":
        r""" 根据索引获得图层对象"""
        return _gskernel.GsLayerCollection_Layer(self, i)

    def Add(self, lyr: 'GsLayer') -> "bool":
        r""" 添加一个图层到图层末尾"""
        return _gskernel.GsLayerCollection_Add(self, lyr)

    def Insert(self, i: 'int', lyr: 'GsLayer') -> "bool":
        r""" 在特定为位置插入一个图层"""
        return _gskernel.GsLayerCollection_Insert(self, i, lyr)

    def Clear(self) -> "void":
        r""" 清除图层"""
        return _gskernel.GsLayerCollection_Clear(self)

    def Remove(self, *args) -> "bool":
        r"""
        *Overload 1:*
        删除指定的图层

        |

        *Overload 2:*
        删除指定的图层
        """
        return _gskernel.GsLayerCollection_Remove(self, *args)

    def Move(self, lyr: 'GsLayer', i: 'int') -> "bool":
        r""" 将图层移动到特定的位置"""
        return _gskernel.GsLayerCollection_Move(self, lyr, i)

    def IndexOf(self, lyr: 'GsLayer') -> "int":
        r""" 获取图层指针在集合中的索引"""
        return _gskernel.GsLayerCollection_IndexOf(self, lyr)

    def Clone(self) -> "GsSmarterPtr< GsLayerCollection >":
        r""" 克隆图层集合"""
        return _gskernel.GsLayerCollection_Clone(self)

    def Layers(self) -> "GsVector< GsSmarterPtr< GsLayer > > *":
        r""" 获取图层数组"""
        return _gskernel.GsLayerCollection_Layers(self)

# Register GsLayerCollection in _gskernel:
_gskernel.GsLayerCollection_swigregister(GsLayerCollection)

class GsMap(GsRefObject):
    r""" 地图对象 多个图层绘制"""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, pDisplay: 'GsScreenDisplay'):
        r""" 根据屏幕显示对象构造"""
        _gskernel.GsMap_swiginit(self, _gskernel.new_GsMap(pDisplay))
    __swig_destroy__ = _gskernel.delete_GsMap

    def TrackCancel(self) -> "GsTrackCancel *":
        r""" 取消对象指针"""
        return _gskernel.GsMap_TrackCancel(self)

    def ScreenDisplay(self) -> "GsScreenDisplay *":
        r""" 获取屏幕显示对象"""
        return _gskernel.GsMap_ScreenDisplay(self)

    def Cancel(self) -> "void":
        r""" 取消当前绘制"""
        return _gskernel.GsMap_Cancel(self)

    def IsDrawing(self) -> "bool":
        r""" 地图是否处于绘制状态"""
        return _gskernel.GsMap_IsDrawing(self)

    def Layers(self) -> "GsVector< GsSmarterPtr< GsLayer > > *":
        r""" 获取图层列表对象指针"""
        return _gskernel.GsMap_Layers(self)

    def DynamicLayers(self) -> "GsVector< GsSmarterPtr< GsLayer > > *":
        return _gskernel.GsMap_DynamicLayers(self)

    def LayerCollection(self) -> "GsSmarterPtr< GsLayerCollection >":
        return _gskernel.GsMap_LayerCollection(self)

    def DynamicLayerCollection(self) -> "GsSmarterPtr< GsLayerCollection >":
        return _gskernel.GsMap_DynamicLayerCollection(self)

    def Update(self) -> "void":
        r""" 强制刷新地图 使地图失效，强制刷新"""
        return _gskernel.GsMap_Update(self)

    def Paint(self, eReason: 'GsDrawPhase'=eDrawNormal) -> "void":
        r""" 绘制地图 如果地图数据未失效，则直接绘制缓冲的位图，反之则重新绘制"""
        return _gskernel.GsMap_Paint(self, eReason)

    def Invalidate(self) -> "void":
        r""" 使地图失效"""
        return _gskernel.GsMap_Invalidate(self)

    def IsValid(self) -> "bool":
        r""" 判断是否是否已经失效"""
        return _gskernel.GsMap_IsValid(self)

    def FullExtent(self) -> "GsBox":
        r""" 全图范围 所有图层的范围合并的范围"""
        return _gskernel.GsMap_FullExtent(self)

    def ViewExtent(self, *args) -> "GsBox":
        r"""
        *Overload 1:*
        设置当前显示范围 会取消当前地图绘制，同时使得地图失效，但不会立刻刷新地图，需要额外调用Paint或者Update刷新地图

        |

        *Overload 2:*
        获取当前显示范围 相当于调用方法Display()->DisplayTransformation()->MapExtent();
        """
        return _gskernel.GsMap_ViewExtent(self, *args)

    def Output(self, pDisp: 'GsDisplay', pCancel: 'GsTrackCancel') -> "bool":
        r"""
         将地图数据绘制到输入的Display上。 调用者需要在外部输入启动Display的StartDraw，并在输出结束后调用EndDraw。 :type pDisp: :py:class:`GsDisplay`
        :param pDisp: 需要输出数据的Display
        """
        return _gskernel.GsMap_Output(self, pDisp, pCancel)

    def Clone(self) -> "GsSmarterPtr< GsMap >":
        return _gskernel.GsMap_Clone(self)

# Register GsMap in _gskernel:
_gskernel.GsMap_swigregister(GsMap)

class GsRendition(GsRefObject):
    r""" 渲染器，实现数据的渲染。"""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __swig_destroy__ = _gskernel.delete_GsRendition

    def Begin(self, pDisplay: 'GsDisplay') -> "void":
        r""" 开始渲染"""
        return _gskernel.GsRendition_Begin(self, pDisplay)

    def End(self) -> "void":
        r""" 结束渲染"""
        return _gskernel.GsRendition_End(self)

    def TextMinScale(self, *args) -> "double":
        return _gskernel.GsRendition_TextMinScale(self, *args)

    def TextMaxScale(self, *args) -> "double":
        return _gskernel.GsRendition_TextMaxScale(self, *args)

# Register GsRendition in _gskernel:
_gskernel.GsRendition_swigregister(GsRendition)

class GsFeatureRendition(GsRendition):
    r""" 矢量数据渲染器"""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __swig_destroy__ = _gskernel.delete_GsFeatureRendition

    def Render(self, pFea: 'GsFeature', pSym: 'GsSymbol') -> "bool":
        r""" 渲染一个地物"""
        return _gskernel.GsFeatureRendition_Render(self, pFea, pSym)

# Register GsFeatureRendition in _gskernel:
_gskernel.GsFeatureRendition_swigregister(GsFeatureRendition)

class GsLabelRendition(GsFeatureRendition):
    r""" 标注渲染器"""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, pLabelProperty: 'GsLabelProperty'):
        _gskernel.GsLabelRendition_swiginit(self, _gskernel.new_GsLabelRendition(pLabelProperty))
    __swig_destroy__ = _gskernel.delete_GsLabelRendition

    def Begin(self, pDisplay: 'GsDisplay') -> "void":
        r""" 开始渲染"""
        return _gskernel.GsLabelRendition_Begin(self, pDisplay)

    def End(self) -> "void":
        r""" 结束渲染"""
        return _gskernel.GsLabelRendition_End(self)

    def Render(self, pFea: 'GsFeature', pSym: 'GsSymbol') -> "bool":
        r""" 渲染一个地物"""
        return _gskernel.GsLabelRendition_Render(self, pFea, pSym)

    def LabelProperty(self) -> "GsLabelProperty *":
        r""" 返回 LabelProperty"""
        return _gskernel.GsLabelRendition_LabelProperty(self)

# Register GsLabelRendition in _gskernel:
_gskernel.GsLabelRendition_swigregister(GsLabelRendition)

class GsFeatureRenderer(GsRefObject):
    r""" 地物渲染器抽象基类"""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __swig_destroy__ = _gskernel.delete_GsFeatureRenderer

    def Rendition(self, nIndex: 'int'=0) -> "GsFeatureRendition *":
        r""" 获取渲染器"""
        return _gskernel.GsFeatureRenderer_Rendition(self, nIndex)

    def AddRendition(self, pRen: 'GsFeatureRendition') -> "void":
        r""" 设置渲染器"""
        return _gskernel.GsFeatureRenderer_AddRendition(self, pRen)

    def DrawCursor(self, pFeaCursor: 'GsFeatureCursor', pDisplay: 'GsDisplay', pCancel: 'GsTrackCancel') -> "void":
        r""" 绘制一个地物游标中的数据"""
        return _gskernel.GsFeatureRenderer_DrawCursor(self, pFeaCursor, pDisplay, pCancel)

    def CoordinateTransformation(self, *args) -> "void":
        r"""
        *Overload 1:*
        获取坐标转换对象

        |

        *Overload 2:*
        设置坐标转换对象
        """
        return _gskernel.GsFeatureRenderer_CoordinateTransformation(self, *args)

# Register GsFeatureRenderer in _gskernel:
_gskernel.GsFeatureRenderer_swigregister(GsFeatureRenderer)

class GsRasterRenderer(GsRefObject):
    r""" 栅格数据渲染器抽象基类"""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __swig_destroy__ = _gskernel.delete_GsRasterRenderer

    def DrawCursor(self, pRasterCursor: 'GsRasterCursor', pDisplay: 'GsDisplay', pCancel: 'GsTrackCancel') -> "void":
        r""" 绘制一个地物游标中的数据"""
        return _gskernel.GsRasterRenderer_DrawCursor(self, pRasterCursor, pDisplay, pCancel)

    def Transparency(self, dblTrans: 'double') -> "void":
        r""" 设置透明度，取值从0到1"""
        return _gskernel.GsRasterRenderer_Transparency(self, dblTrans)

# Register GsRasterRenderer in _gskernel:
_gskernel.GsRasterRenderer_swigregister(GsRasterRenderer)

class GsRGBARasterRenderer(GsRasterRenderer):
    r""" RGBA渲染器 游标中所有的像素统一使用RGBA值进行绘制"""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        _gskernel.GsRGBARasterRenderer_swiginit(self, _gskernel.new_GsRGBARasterRenderer(*args))
    __swig_destroy__ = _gskernel.delete_GsRGBARasterRenderer

    def CreateColorTrans(self, pRaster: 'GsRasterClass', pCancel: 'GsTrackCancel') -> "void":
        r""" 创建颜色绘制对象"""
        return _gskernel.GsRGBARasterRenderer_CreateColorTrans(self, pRaster, pCancel)

    def Red(self, *args) -> "void":
        return _gskernel.GsRGBARasterRenderer_Red(self, *args)

    def Green(self, *args) -> "void":
        return _gskernel.GsRGBARasterRenderer_Green(self, *args)

    def Blue(self, *args) -> "void":
        return _gskernel.GsRGBARasterRenderer_Blue(self, *args)

# Register GsRGBARasterRenderer in _gskernel:
_gskernel.GsRGBARasterRenderer_swigregister(GsRGBARasterRenderer)

class GsGrayIndexRasterRenderer(GsRasterRenderer):
    r""" 灰度影像渲染器"""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, minVal: 'short', maxVal: 'short', nNoData: 'short'):
        _gskernel.GsGrayIndexRasterRenderer_swiginit(self, _gskernel.new_GsGrayIndexRasterRenderer(minVal, maxVal, nNoData))
    __swig_destroy__ = _gskernel.delete_GsGrayIndexRasterRenderer

    def CreateColorTrans(self, pRaster: 'GsRasterClass', pCancel: 'GsTrackCancel') -> "void":
        r""" 创建颜色绘制对象"""
        return _gskernel.GsGrayIndexRasterRenderer_CreateColorTrans(self, pRaster, pCancel)

    def SwapWhiteBlack(self, bSwap: 'bool') -> "void":
        r""" 交换黑色和白色"""
        return _gskernel.GsGrayIndexRasterRenderer_SwapWhiteBlack(self, bSwap)

    def UseNoDataValue(self, *args) -> "bool":
        return _gskernel.GsGrayIndexRasterRenderer_UseNoDataValue(self, *args)

    def NoDataValue(self, *args) -> "void":
        return _gskernel.GsGrayIndexRasterRenderer_NoDataValue(self, *args)

# Register GsGrayIndexRasterRenderer in _gskernel:
_gskernel.GsGrayIndexRasterRenderer_swigregister(GsGrayIndexRasterRenderer)

class GsPaletteRasterRenderer(GsRasterRenderer):
    r""" 调色板真彩色渲染器"""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, table: 'GsColorTable'):
        _gskernel.GsPaletteRasterRenderer_swiginit(self, _gskernel.new_GsPaletteRasterRenderer(table))
    __swig_destroy__ = _gskernel.delete_GsPaletteRasterRenderer

    def CreateColorTrans(self, pRaster: 'GsRasterClass', pCancel: 'GsTrackCancel') -> "void":
        r""" 创建颜色绘制对象"""
        return _gskernel.GsPaletteRasterRenderer_CreateColorTrans(self, pRaster, pCancel)

    def ColorTable(self) -> "GsColorTable &":
        r""" 返回调色板"""
        return _gskernel.GsPaletteRasterRenderer_ColorTable(self)

# Register GsPaletteRasterRenderer in _gskernel:
_gskernel.GsPaletteRasterRenderer_swigregister(GsPaletteRasterRenderer)

class GsSimpleFeatureRenderer(GsFeatureRenderer):
    r""" 简单地物渲染器 游标中所有的地物统一使用一种符号进行绘制"""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        r"""
        *Overload 1:*
        缺省构造

        |

        *Overload 2:*
        根据符号构造
        """
        _gskernel.GsSimpleFeatureRenderer_swiginit(self, _gskernel.new_GsSimpleFeatureRenderer(*args))
    __swig_destroy__ = _gskernel.delete_GsSimpleFeatureRenderer

    def Symbol(self, *args) -> "GsSymbol *":
        r"""
        *Overload 1:*
        设置渲染的符号

        |

        *Overload 2:*
        获取渲染的符号指针
        """
        return _gskernel.GsSimpleFeatureRenderer_Symbol(self, *args)

# Register GsSimpleFeatureRenderer in _gskernel:
_gskernel.GsSimpleFeatureRenderer_swigregister(GsSimpleFeatureRenderer)

class GsUniqueValueRenderer(GsFeatureRenderer):
    r""" 质底填充渲染器 游标中根据指定的属性值，过滤出各个地物，使用不同符号进行绘制"""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        r"""
        *Overload 1:*
        缺省构造

        |

        *Overload 2:*
        根据默认符号构造
        """
        _gskernel.GsUniqueValueRenderer_swiginit(self, _gskernel.new_GsUniqueValueRenderer(*args))
    __swig_destroy__ = _gskernel.delete_GsUniqueValueRenderer

    def DefaultSymbol(self, *args) -> "GsSymbol *":
        r"""
        *Overload 1:*
        设置默认符号

        |

        *Overload 2:*
        获取默认符号
        """
        return _gskernel.GsUniqueValueRenderer_DefaultSymbol(self, *args)

    def FieldName(self, *args) -> "GsString":
        r"""
        *Overload 1:*
        设置过滤字段名

        |

        *Overload 2:*
        获取过滤字段
        """
        return _gskernel.GsUniqueValueRenderer_FieldName(self, *args)

    def Symbol(self, *args) -> "GsSymbol *":
        r"""
        *Overload 1:*
        根据双精度型属性值设置符号

        |

        *Overload 2:*
        根据单精度型属性值设置符号

        |

        *Overload 3:*
        根据整型属性值设置符号

        |

        *Overload 4:*
        根据字符串型属性值设置符号

        |

        *Overload 5:*
        根据双精度型属性值获取符号

        |

        *Overload 6:*
        根据单精度型属性值获取符号

        |

        *Overload 7:*
        根据整型属性值获取符号

        |

        *Overload 8:*
        根据字符串型属性值获取符号
        """
        return _gskernel.GsUniqueValueRenderer_Symbol(self, *args)

    def IsUseDefaultSymbol(self, *args) -> "bool":
        r"""
        *Overload 1:*
        设置是否使用默认符号进行绘制

        |

        *Overload 2:*
        返回是否使用默认符号进行绘制
        """
        return _gskernel.GsUniqueValueRenderer_IsUseDefaultSymbol(self, *args)

# Register GsUniqueValueRenderer in _gskernel:
_gskernel.GsUniqueValueRenderer_swigregister(GsUniqueValueRenderer)

class GsTextFeatureRenderer(GsFeatureRenderer):
    r""" 用于渲染注记地物"""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        r"""
        *Overload 1:*
        缺省构造

        |

        *Overload 2:*
        根据符号构造
        """
        _gskernel.GsTextFeatureRenderer_swiginit(self, _gskernel.new_GsTextFeatureRenderer(*args))
    __swig_destroy__ = _gskernel.delete_GsTextFeatureRenderer

    def Symbol(self, *args) -> "GsTextSymbol *":
        r"""
        *Overload 1:*
        设置渲染的符号

        |

        *Overload 2:*
        获取渲染的符号指针
        """
        return _gskernel.GsTextFeatureRenderer_Symbol(self, *args)

    def Unified(self, *args) -> "void":
        r"""
        *Overload 1:*
        是否统一使用一种符号渲染

        |

        *Overload 2:*
        是否统一使用一种符号渲染
        """
        return _gskernel.GsTextFeatureRenderer_Unified(self, *args)

# Register GsTextFeatureRenderer in _gskernel:
_gskernel.GsTextFeatureRenderer_swigregister(GsTextFeatureRenderer)

class GsGraduatedRenderer(GsFeatureRenderer):
    r""" 用于分级渲染"""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self):
        r""" 缺省构造"""
        _gskernel.GsGraduatedRenderer_swiginit(self, _gskernel.new_GsGraduatedRenderer())
    __swig_destroy__ = _gskernel.delete_GsGraduatedRenderer

    def Symbol(self, *args) -> "GsSymbol *":
        r"""
        *Overload 1:*
        设置符号

        |

        *Overload 2:*
        根据级别值获取符号
        """
        return _gskernel.GsGraduatedRenderer_Symbol(self, *args)

    def DefaultSymbol(self, *args) -> "GsSymbol *":
        r"""
        *Overload 1:*
        设置默认符号

        |

        *Overload 2:*
        获取默认符号
        """
        return _gskernel.GsGraduatedRenderer_DefaultSymbol(self, *args)

    def IsUseDefaultSymbol(self, *args) -> "bool":
        r"""
        *Overload 1:*
        设置是否使用默认符号

        |

        *Overload 2:*
        获取是否使用默认符号
        """
        return _gskernel.GsGraduatedRenderer_IsUseDefaultSymbol(self, *args)

    def GradeTypeColor(self, *args) -> "void":
        r"""
        *Overload 1:*
        判断是否分级颜色

        |

        *Overload 2:*
        设置是否分级颜色
        """
        return _gskernel.GsGraduatedRenderer_GradeTypeColor(self, *args)

    def FieldPos(self, *args) -> "int":
        r"""
        *Overload 1:*
        设置字段位置

        |

        *Overload 2:*
        返回字段位置
        """
        return _gskernel.GsGraduatedRenderer_FieldPos(self, *args)

    def FieldName(self, *args) -> "GsString":
        return _gskernel.GsGraduatedRenderer_FieldName(self, *args)

    def NormalFieldPos(self, *args) -> "int":
        r"""
        *Overload 1:*
        设置正规化字段位置

        |

        *Overload 2:*
        返回正规化字段位置
        """
        return _gskernel.GsGraduatedRenderer_NormalFieldPos(self, *args)

    def BreakValue(self, *args) -> "double":
        r"""
        *Overload 1:*
        设置分级值

        |

        *Overload 2:*
        返回分级值
        """
        return _gskernel.GsGraduatedRenderer_BreakValue(self, *args)

    def BreakCount(self, *args) -> "int":
        r"""
        *Overload 1:*
        设置分级数量

        |

        *Overload 2:*
        返回分级数量
        """
        return _gskernel.GsGraduatedRenderer_BreakCount(self, *args)

# Register GsGraduatedRenderer in _gskernel:
_gskernel.GsGraduatedRenderer_swigregister(GsGraduatedRenderer)

class GsDotDensityRenderer(GsFeatureRenderer):
    r""" 点值法"""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self):
        r""" 缺省构造"""
        _gskernel.GsDotDensityRenderer_swiginit(self, _gskernel.new_GsDotDensityRenderer())
    __swig_destroy__ = _gskernel.delete_GsDotDensityRenderer

    def FieldIndex(self, *args) -> "int":
        r"""
        *Overload 1:*
        设置字段位置

        |

        *Overload 2:*
        返回字段位置
        """
        return _gskernel.GsDotDensityRenderer_FieldIndex(self, *args)

    def DotSize(self, *args) -> "double":
        r"""
        *Overload 1:*
        设置点的尺寸

        |

        *Overload 2:*
        返回点尺寸
        """
        return _gskernel.GsDotDensityRenderer_DotSize(self, *args)

    def DotValue(self, *args) -> "double":
        r"""
        *Overload 1:*
        设置点值

        |

        *Overload 2:*
        返回点值
        """
        return _gskernel.GsDotDensityRenderer_DotValue(self, *args)

    def PointSymbol(self, *args) -> "GsPointSymbol *":
        r"""
        *Overload 1:*
        设置点符号

        |

        *Overload 2:*
        获取点符号
        """
        return _gskernel.GsDotDensityRenderer_PointSymbol(self, *args)

    def BackGroundSymbol(self, *args) -> "GsFillSymbol *":
        r"""
        *Overload 1:*
        设置背景面符号

        |

        *Overload 2:*
        获取背景面符号
        """
        return _gskernel.GsDotDensityRenderer_BackGroundSymbol(self, *args)

    def IsDrawBackGround(self, *args) -> "bool":
        r"""
        *Overload 1:*
        设置是否绘制背景

        |

        *Overload 2:*
        获取是否绘制背景
        """
        return _gskernel.GsDotDensityRenderer_IsDrawBackGround(self, *args)

# Register GsDotDensityRenderer in _gskernel:
_gskernel.GsDotDensityRenderer_swigregister(GsDotDensityRenderer)

eDoNotProjection = _gskernel.eDoNotProjection
r""" 不论什么情况下不做动态投影"""
eDoProjectionAuto = _gskernel.eDoProjectionAuto
r""" 自动动态投影 仅在当前图层和地图参考不一致的时候进行动态投影"""
eDoProjectionForce = _gskernel.eDoProjectionForce
r""" 强制动态投影 不论当前图层和地图空间参考是否一致都进行投影。"""
class GsFeatureLayer(GsLayer):
    r""" 地物类图层"""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        r"""
        *Overload 1:*
        从一个地物类构造

        |

        *Overload 2:*
        缺省构造
        """
        _gskernel.GsFeatureLayer_swiginit(self, _gskernel.new_GsFeatureLayer(*args))
    __swig_destroy__ = _gskernel.delete_GsFeatureLayer

    def Extent(self, pTargetSR: 'GsSpatialReference'=None) -> "GsBox":
        r""" 图层的地理范围"""
        return _gskernel.GsFeatureLayer_Extent(self, pTargetSR)

    def FeatureClass(self, *args) -> "void":
        r"""
        *Overload 1:*
        获取地物类对象指针

        |

        *Overload 2:*
        设置地物类
        """
        return _gskernel.GsFeatureLayer_FeatureClass(self, *args)

    def Renderer(self, *args) -> "void":
        r"""
        *Overload 1:*
        获取Renderer对象

        |

        *Overload 2:*
        设置Renderer对象
        """
        return _gskernel.GsFeatureLayer_Renderer(self, *args)

    def Select(self, pFilter: 'GsQueryFilter'=None) -> "GsSelectionSet *":
        r"""
         选择地物 :type pFilter: :py:class:`GsQueryFilter`
        :param pFilter: 查询条件 :rtype: :py:class:`GsSelectionSet`
        :return: 返回内部的选择集
        """
        return _gskernel.GsFeatureLayer_Select(self, pFilter)

    def SelectionSet(self) -> "GsSelectionSet *":
        r"""
         获取选择集 :rtype: :py:class:`GsSelectionSet`
        :return: 返回内部的选择集指针
        """
        return _gskernel.GsFeatureLayer_SelectionSet(self)

    def ClearSelection(self) -> "void":
        r""" 清空选择集"""
        return _gskernel.GsFeatureLayer_ClearSelection(self)

    def HasSelection(self) -> "bool":
        r""" 图层是否存在选择集"""
        return _gskernel.GsFeatureLayer_HasSelection(self)

    def ProjectionStyle(self, *args) -> "void":
        r"""
        *Overload 1:*
        获取投影变换类型

        |

        *Overload 2:*
        设置投影变换类型
        """
        return _gskernel.GsFeatureLayer_ProjectionStyle(self, *args)

    def SourceSpatialReference(self) -> "GsSpatialReference *":
        r""" 获取强制投影时源空间参考"""
        return _gskernel.GsFeatureLayer_SourceSpatialReference(self)

    def SpatialReference(self, *args) -> "void":
        r"""
        *Overload 1:*
        图层的空间参考

        |

        *Overload 2:*
        设置强制投影时源空间参考
        """
        return _gskernel.GsFeatureLayer_SpatialReference(self, *args)

    def IsValid(self) -> "bool":
        r""" 是否有效"""
        return _gskernel.GsFeatureLayer_IsValid(self)

    def DisplayFilter(self, *args) -> "GsQueryFilter *":
        return _gskernel.GsFeatureLayer_DisplayFilter(self, *args)

    @staticmethod
    def CanDowncast(b: 'GsLayer') -> "bool":
        return _gskernel.GsFeatureLayer_CanDowncast(b)

    @staticmethod
    def DowncastTo(b: 'GsLayer') -> "GsSmarterPtr< GsFeatureLayer >":
        return _gskernel.GsFeatureLayer_DowncastTo(b)

# Register GsFeatureLayer in _gskernel:
_gskernel.GsFeatureLayer_swigregister(GsFeatureLayer)

def GsFeatureLayer_CanDowncast(b: 'GsLayer') -> "bool":
    return _gskernel.GsFeatureLayer_CanDowncast(b)

def GsFeatureLayer_DowncastTo(b: 'GsLayer') -> "GsSmarterPtr< GsFeatureLayer >":
    return _gskernel.GsFeatureLayer_DowncastTo(b)

class GsRasterLayer(GsLayer):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, pRasterClass: 'GsRasterClass'):
        _gskernel.GsRasterLayer_swiginit(self, _gskernel.new_GsRasterLayer(pRasterClass))

    def ResampleAlg(self, *args) -> "void":
        r"""
        *Overload 1:*
        获取插值算法

        |

        *Overload 2:*
        设置插值算法
        """
        return _gskernel.GsRasterLayer_ResampleAlg(self, *args)

    def Extent(self, pTargetSR: 'GsSpatialReference'=None) -> "GsBox":
        r"""
         图层的地理范围 :type pTargetSR: :py:class:`GsSpatialReference`
        :param pTargetSR: 以该空间参考返回范围
        """
        return _gskernel.GsRasterLayer_Extent(self, pTargetSR)

    def RasterClass(self, *args) -> "void":
        r"""
        *Overload 1:*
        获取栅格类对象指针

        |

        *Overload 2:*
        设置栅格类
        """
        return _gskernel.GsRasterLayer_RasterClass(self, *args)

    def HasSelection(self) -> "bool":
        r""" 图层是否存在选择集"""
        return _gskernel.GsRasterLayer_HasSelection(self)

    def IsValid(self) -> "bool":
        r""" 是否有效"""
        return _gskernel.GsRasterLayer_IsValid(self)

    def SpatialReference(self) -> "GsSpatialReference *":
        r""" 图层的空间参考"""
        return _gskernel.GsRasterLayer_SpatialReference(self)

    def Renderer(self, *args) -> "void":
        r"""
        *Overload 1:*
        获取Renderer对象

        |

        *Overload 2:*
        设置Renderer对象
        """
        return _gskernel.GsRasterLayer_Renderer(self, *args)
    __swig_destroy__ = _gskernel.delete_GsRasterLayer

# Register GsRasterLayer in _gskernel:
_gskernel.GsRasterLayer_swigregister(GsRasterLayer)

class GsTileLayer(GsLayer):
    r""" 瓦片类图层"""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, pTileClass: 'GsTileClass'):
        _gskernel.GsTileLayer_swiginit(self, _gskernel.new_GsTileLayer(pTileClass))

    def Extent(self, pTargetSR: 'GsSpatialReference'=None) -> "GsBox":
        r"""
         图层的地理范围 :type pTargetSR: :py:class:`GsSpatialReference`
        :param pTargetSR: 以该空间参考返回范围
        """
        return _gskernel.GsTileLayer_Extent(self, pTargetSR)

    def TileClass(self, *args) -> "void":
        r"""
        *Overload 1:*
        获取瓦片类对象指针

        |

        *Overload 2:*
        设置瓦片类
        """
        return _gskernel.GsTileLayer_TileClass(self, *args)

    def HasSelection(self) -> "bool":
        r""" 图层是否存在选择集"""
        return _gskernel.GsTileLayer_HasSelection(self)

    def IsValid(self) -> "bool":
        r""" 是否有效"""
        return _gskernel.GsTileLayer_IsValid(self)

    def Synchronization(self, *args) -> "void":
        r"""
        *Overload 1:*
        是否进行同步绘制

        |

        *Overload 2:*
        是否进行同步绘制
        """
        return _gskernel.GsTileLayer_Synchronization(self, *args)

    def SpatialReference(self) -> "GsSpatialReference *":
        r""" 图层的空间参考"""
        return _gskernel.GsTileLayer_SpatialReference(self)

    @staticmethod
    def DowncastTo(b: 'GsLayer') -> "GsSmarterPtr< GsTileLayer >":
        return _gskernel.GsTileLayer_DowncastTo(b)
    __swig_destroy__ = _gskernel.delete_GsTileLayer

# Register GsTileLayer in _gskernel:
_gskernel.GsTileLayer_swigregister(GsTileLayer)

def GsTileLayer_DowncastTo(b: 'GsLayer') -> "GsSmarterPtr< GsTileLayer >":
    return _gskernel.GsTileLayer_DowncastTo(b)

eNoneButton = _gskernel.eNoneButton
r""" 没有按下任何键"""
eLeftButton = _gskernel.eLeftButton
r""" 鼠标左键"""
eRightButton = _gskernel.eRightButton
r""" 鼠标右键"""
eMiddleButton = _gskernel.eMiddleButton
r""" 鼠标中键"""
class GsSymbolTracker_OnGeometryTracked(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    __swig_destroy__ = _gskernel.delete_GsSymbolTracker_OnGeometryTracked

    def OnGeometryTracked(self, arg0: 'GsGeometry') -> "GsSymbolTracker::GsTrackerFeedBack":
        return _gskernel.GsSymbolTracker_OnGeometryTracked_OnGeometryTracked(self, arg0)

    def __init__(self):
        if self.__class__ == GsSymbolTracker_OnGeometryTracked:
            _self = None
        else:
            _self = self
        _gskernel.GsSymbolTracker_OnGeometryTracked_swiginit(self, _gskernel.new_GsSymbolTracker_OnGeometryTracked(_self, ))
    def __disown__(self):
        self.this.disown()
        _gskernel.disown_GsSymbolTracker_OnGeometryTracked(self)
        return weakref.proxy(self)

# Register GsSymbolTracker_OnGeometryTracked in _gskernel:
_gskernel.GsSymbolTracker_OnGeometryTracked_swigregister(GsSymbolTracker_OnGeometryTracked)

class GsSymbolTracker(GsRefObject):
    r""" 屏幕绘制"""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, pMap: 'GsMap'):
        _gskernel.GsSymbolTracker_swiginit(self, _gskernel.new_GsSymbolTracker(pMap))
    __swig_destroy__ = _gskernel.delete_GsSymbolTracker

    def OnMouseDown(self, eButton: 'GsButton', nKeyboard: 'int', pt: 'GsPT') -> "void":
        r""" 接收鼠标按下消息"""
        return _gskernel.GsSymbolTracker_OnMouseDown(self, eButton, nKeyboard, pt)

    def OnMouseUp(self, eButton: 'GsButton', nKeyboard: 'int', pt: 'GsPT') -> "void":
        r""" 接收鼠标弹起消息"""
        return _gskernel.GsSymbolTracker_OnMouseUp(self, eButton, nKeyboard, pt)

    def OnMouseMove(self, eButton: 'GsButton', nKeyboard: 'int', pt: 'GsPT') -> "void":
        r""" 接收鼠标移动消息"""
        return _gskernel.GsSymbolTracker_OnMouseMove(self, eButton, nKeyboard, pt)

    def OnMouseWheel(self, eButton: 'GsButton', nDelta: 'int', nKeyboard: 'int', pt: 'GsPT') -> "void":
        r""" 接收鼠标滚轮消息"""
        return _gskernel.GsSymbolTracker_OnMouseWheel(self, eButton, nDelta, nKeyboard, pt)
    eDoNothing = _gskernel.GsSymbolTracker_eDoNothing
    r""" 通知Tracker什么也不做，相当于结束Tracker"""
    eRestartTracker = _gskernel.GsSymbolTracker_eRestartTracker
    r""" 通知Tracker重新启动"""

    def OnGeometryTrackedAdd(self, call: 'GsSymbolTracker_OnGeometryTracked') -> "void":
        r""" Geometry绘制完成"""
        return _gskernel.GsSymbolTracker_OnGeometryTrackedAdd(self, call)

    def OnGeometryTrackedRemove(self, call: 'GsSymbolTracker_OnGeometryTracked') -> "void":
        return _gskernel.GsSymbolTracker_OnGeometryTrackedRemove(self, call)

# Register GsSymbolTracker in _gskernel:
_gskernel.GsSymbolTracker_swigregister(GsSymbolTracker)

class GsNewEnvelopeTracker(GsSymbolTracker):
    r""" 屏幕绘制"""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, pMap: 'GsMap'):
        _gskernel.GsNewEnvelopeTracker_swiginit(self, _gskernel.new_GsNewEnvelopeTracker(pMap))
    __swig_destroy__ = _gskernel.delete_GsNewEnvelopeTracker

# Register GsNewEnvelopeTracker in _gskernel:
_gskernel.GsNewEnvelopeTracker_swigregister(GsNewEnvelopeTracker)

class GsMemoryImageCanvas(GsImageCanvas):
    r""" 基于内存的影像画布"""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, w: 'int', h: 'int', dpi: 'float'=96):
        r""" 根据宽和高构建RGBA32位色的画布"""
        _gskernel.GsMemoryImageCanvas_swiginit(self, _gskernel.new_GsMemoryImageCanvas(w, h, dpi))
    __swig_destroy__ = _gskernel.delete_GsMemoryImageCanvas

# Register GsMemoryImageCanvas in _gskernel:
_gskernel.GsMemoryImageCanvas_swigregister(GsMemoryImageCanvas)

class GsFileImageCanvas(GsMemoryImageCanvas):
    r""" 基于文件的影像画布 基于文件的影像画布可以实现超过内存存储限制的画布，画布通过和文件直接IO实现超大画布的绘制能力。性能上到低于基于内存的画布。"""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, strFile: 'char const *', w: 'int', h: 'int', nMaxMemoryCache: 'int'=0x100000, dpi: 'double'=0):
        r""" 根据文件名和宽高构建RGBA32位色的画布"""
        _gskernel.GsFileImageCanvas_swiginit(self, _gskernel.new_GsFileImageCanvas(strFile, w, h, nMaxMemoryCache, dpi))
    __swig_destroy__ = _gskernel.delete_GsFileImageCanvas

# Register GsFileImageCanvas in _gskernel:
_gskernel.GsFileImageCanvas_swigregister(GsFileImageCanvas)

class GsStyleTable(GsRefObject):
    r""" 样式表"""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __swig_destroy__ = _gskernel.delete_GsStyleTable

    def GenerateRasterGlyph(self, fontFamily: 'char const *', style: 'char const *', size: 'float', nStartCode: 'int', nEndCode: 'int', buff: 'GsByteBuffer') -> "bool":
        r""" 指定范围内的字体产生为Protobuffer格式的栅格。"""
        return _gskernel.GsStyleTable_GenerateRasterGlyph(self, fontFamily, style, size, nStartCode, nEndCode, buff)

    def Content(self, *args) -> "bool":
        r""" 设置式样的内容"""
        return _gskernel.GsStyleTable_Content(self, *args)

    def Name(self) -> "GsString":
        r"""
         获得样式表名字 :rtype: :py:class:`GsString`
        :return: 返回样式表名字
        """
        return _gskernel.GsStyleTable_Name(self)

    def Version(self) -> "GsString":
        r"""
         获得样式表版本 :rtype: :py:class:`GsString`
        :return: 返回样式表版本
        """
        return _gskernel.GsStyleTable_Version(self)

    def SaveJson(self, strPath: 'char const *') -> "void":
        r""" 保存样式表为本地json文件"""
        return _gskernel.GsStyleTable_SaveJson(self, strPath)

    def SaveXml(self, strPath: 'char const *') -> "void":
        r""" 保存样式表为本地xml文件"""
        return _gskernel.GsStyleTable_SaveXml(self, strPath)

    def SaveMapDefine(self, strPath: 'char const *') -> "void":
        r""" 保存样式表为本地地图定义文件"""
        return _gskernel.GsStyleTable_SaveMapDefine(self, strPath)

# Register GsStyleTable in _gskernel:
_gskernel.GsStyleTable_swigregister(GsStyleTable)

class GsStyleTableFactory(GsRefObject):
    r""" 样式表类厂 通过载入各种格式的文件创建样式表对象实例。"""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self):
        _gskernel.GsStyleTableFactory_swiginit(self, _gskernel.new_GsStyleTableFactory())
    __swig_destroy__ = _gskernel.delete_GsStyleTableFactory

    def OpenFromZip(self, *args) -> "GsSmarterPtr< GsStyleTable >":
        r"""
        *Overload 1:*
        从Zip包二进制文件打开

        |

        *Overload 2:*
        从Zip包二进制文件打开
        """
        return _gskernel.GsStyleTableFactory_OpenFromZip(self, *args)

    def OpenFromJson(self, strJson: 'char const *', bIsFile: 'bool') -> "GsSmarterPtr< GsStyleTable >":
        r""" 从json文件构造样式表实例"""
        return _gskernel.GsStyleTableFactory_OpenFromJson(self, strJson, bIsFile)

    def OpenFromXml(self, strXML: 'char const *', bIsXml: 'bool') -> "GsSmarterPtr< GsStyleTable >":
        r""" 从xml构造样式表实例"""
        return _gskernel.GsStyleTableFactory_OpenFromXml(self, strXML, bIsXml)

    def OpenFromMapDefine(self, strFilePath: 'char const *') -> "GsSmarterPtr< GsStyleTable >":
        r""" 从地图定义文件构造样式表实例"""
        return _gskernel.GsStyleTableFactory_OpenFromMapDefine(self, strFilePath)

    def CreateEmptyStyleTable(self) -> "GsSmarterPtr< GsStyleTable >":
        r""" 构建一个空的样式表实例"""
        return _gskernel.GsStyleTableFactory_CreateEmptyStyleTable(self)

# Register GsStyleTableFactory in _gskernel:
_gskernel.GsStyleTableFactory_swigregister(GsStyleTableFactory)

class GsVectorTileRenderer(GsRefObject):
    r""" 绘制矢量瓦片数据Renderer的抽象基类"""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __swig_destroy__ = _gskernel.delete_GsVectorTileRenderer

    def ClearCanvas(self, *args) -> "void":
        r""" 清空画布。"""
        return _gskernel.GsVectorTileRenderer_ClearCanvas(self, *args)

    def ImageCanvas(self) -> "GsImageCanvas *":
        r""" 返回画布指针"""
        return _gskernel.GsVectorTileRenderer_ImageCanvas(self)

    def DrawVectorTile(self, *args) -> "bool":
        r"""
        *Overload 1:*
        绘制瓦片类型矢量数据。

        |

        *Overload 2:*
        绘制瓦片类型矢量数据。
        """
        return _gskernel.GsVectorTileRenderer_DrawVectorTile(self, *args)

    def FilterDrawLayerNames(self) -> "GsVector< GsString > *":
        r"""
         得到过滤绘制图层 显示时只绘制容器GsVector记录的图层，当GsVector未记录时，表示全绘制不进行过滤 :rtype: GsVector< GsString >
        :return: 
        """
        return _gskernel.GsVectorTileRenderer_FilterDrawLayerNames(self)

    def FilterDrawStyleNames(self) -> "GsVector< GsString > *":
        r"""
         得到过滤绘制的style 显示时只绘制容器GsVector记录的style图层，当GsVector未记录时，表示全绘制不进行过滤 :rtype: GsVector< GsString >
        :return: 
        """
        return _gskernel.GsVectorTileRenderer_FilterDrawStyleNames(self)

# Register GsVectorTileRenderer in _gskernel:
_gskernel.GsVectorTileRenderer_swigregister(GsVectorTileRenderer)

class GsStyledVectorTileRenderer(GsVectorTileRenderer):
    r""" 基于样式表绘制矢量数据的Renderer 样式表在本类中默认为json格式，但可扩展为其他多种格式。根据样式表创建符号，并用符号绘制传入的矢量数据，最终在内存中创建栅格图片。"""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    eDrawVectorData = _gskernel.GsStyledVectorTileRenderer_eDrawVectorData
    r""" 仅绘制矢量"""
    eDrawLabelData = _gskernel.GsStyledVectorTileRenderer_eDrawLabelData
    r""" 仅绘制标注"""
    eDrawVectorAndLabelData = _gskernel.GsStyledVectorTileRenderer_eDrawVectorAndLabelData
    r""" 绘制矢量和标注"""

    def __init__(self, *args):
        r"""
        *Overload 1:*
        通过画布和金字塔构造Renderer

        |

        *Overload 2:*
        通过画布长，宽和金字塔构造Renderer

        |

        *Overload 3:*
        通过画布长，宽和金字塔构造Renderer
        """
        _gskernel.GsStyledVectorTileRenderer_swiginit(self, _gskernel.new_GsStyledVectorTileRenderer(*args))
    __swig_destroy__ = _gskernel.delete_GsStyledVectorTileRenderer

    def StyleTable(self, *args) -> "GsStyleTable *":
        r"""
        *Overload 1:*
        设置样式表实例

        |

        *Overload 2:*
        获取样式表实例
        """
        return _gskernel.GsStyledVectorTileRenderer_StyleTable(self, *args)

    def DrawBehavior(self, *args) -> "GsStyledVectorTileRenderer::GsDrawBehavior":
        r"""
        *Overload 1:*
        绘制行为

        |

        *Overload 2:*
        绘制方式
        """
        return _gskernel.GsStyledVectorTileRenderer_DrawBehavior(self, *args)

    def GenerateLabels(self) -> "void":
        r""" 生成标注"""
        return _gskernel.GsStyledVectorTileRenderer_GenerateLabels(self)

    def LabelContainer(self, pLabelContainer: 'GsLabelContainer') -> "void":
        r""" 本地渲染设置标注参数容器"""
        return _gskernel.GsStyledVectorTileRenderer_LabelContainer(self, pLabelContainer)

    def ScreenDisplayTransformation(self, pDT: 'GsDisplayTransformation') -> "void":
        r""" 屏幕DT"""
        return _gskernel.GsStyledVectorTileRenderer_ScreenDisplayTransformation(self, pDT)

    @staticmethod
    def CanDowncast(b: 'GsVectorTileRenderer') -> "bool":
        return _gskernel.GsStyledVectorTileRenderer_CanDowncast(b)

    @staticmethod
    def DowncastTo(b: 'GsVectorTileRenderer') -> "GsSmarterPtr< GsVectorTileRenderer >":
        return _gskernel.GsStyledVectorTileRenderer_DowncastTo(b)

# Register GsStyledVectorTileRenderer in _gskernel:
_gskernel.GsStyledVectorTileRenderer_swigregister(GsStyledVectorTileRenderer)

def GsStyledVectorTileRenderer_CanDowncast(b: 'GsVectorTileRenderer') -> "bool":
    return _gskernel.GsStyledVectorTileRenderer_CanDowncast(b)

def GsStyledVectorTileRenderer_DowncastTo(b: 'GsVectorTileRenderer') -> "GsSmarterPtr< GsVectorTileRenderer >":
    return _gskernel.GsStyledVectorTileRenderer_DowncastTo(b)

class GsSimpleVectorTileRenderer(GsVectorTileRenderer):
    r""" 简单矢量瓦片Render 无样式配置的简单矢量瓦片渲染器，创建随机颜色样式的符号矢量数据"""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        r"""
        *Overload 1:*
        通过画布和金字塔构造Renderer

        |

        *Overload 2:*
        通过画布长，宽和金字塔构造Renderer
        """
        _gskernel.GsSimpleVectorTileRenderer_swiginit(self, _gskernel.new_GsSimpleVectorTileRenderer(*args))
    __swig_destroy__ = _gskernel.delete_GsSimpleVectorTileRenderer

    @staticmethod
    def CanDowncast(b: 'GsVectorTileRenderer') -> "bool":
        return _gskernel.GsSimpleVectorTileRenderer_CanDowncast(b)

    @staticmethod
    def DowncastTo(b: 'GsVectorTileRenderer') -> "GsSmarterPtr< GsSimpleVectorTileRenderer >":
        return _gskernel.GsSimpleVectorTileRenderer_DowncastTo(b)

# Register GsSimpleVectorTileRenderer in _gskernel:
_gskernel.GsSimpleVectorTileRenderer_swigregister(GsSimpleVectorTileRenderer)

def GsSimpleVectorTileRenderer_CanDowncast(b: 'GsVectorTileRenderer') -> "bool":
    return _gskernel.GsSimpleVectorTileRenderer_CanDowncast(b)

def GsSimpleVectorTileRenderer_DowncastTo(b: 'GsVectorTileRenderer') -> "GsSmarterPtr< GsSimpleVectorTileRenderer >":
    return _gskernel.GsSimpleVectorTileRenderer_DowncastTo(b)

class GsVectorTileLayer(GsTileLayer):
    r""" GsVectorTileLayer 矢量瓦片图层"""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, pTileClass: 'GsTileClass', nMaxTileCache: 'int'=100):
        _gskernel.GsVectorTileLayer_swiginit(self, _gskernel.new_GsVectorTileLayer(pTileClass, nMaxTileCache))
    __swig_destroy__ = _gskernel.delete_GsVectorTileLayer

    def Renderer(self, *args) -> "void":
        r"""
        *Overload 1:*
        获取Renderer对象

        |

        *Overload 2:*
        设置Renderer对象
        """
        return _gskernel.GsVectorTileLayer_Renderer(self, *args)

    def ClearCache(self) -> "void":
        r""" 清空"""
        return _gskernel.GsVectorTileLayer_ClearCache(self)

# Register GsVectorTileLayer in _gskernel:
_gskernel.GsVectorTileLayer_swigregister(GsVectorTileLayer)

class GsExpressionContext2(GsRefObject):
    r""" GeometryFunction 几何对象操作辅助类 GsExpressionContext2 表达式上下文"""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def Feature(self, *args) -> "GsFeature *":
        r"""
        *Overload 1:*
        设置表达式计算的要素

        |

        *Overload 2:*
        获取要素
        """
        return _gskernel.GsExpressionContext2_Feature(self, *args)

    def Symbol(self, *args) -> "GsSymbol *":
        r"""
        *Overload 1:*
        设置符号，可用于动态改变符号参数

        |

        *Overload 2:*
        获取符号
        """
        return _gskernel.GsExpressionContext2_Symbol(self, *args)

    def Layer(self, *args) -> "GsLayer *":
        r"""
        *Overload 1:*
        设置当前图层，可参与表达式计算

        |

        *Overload 2:*
        获取当前图层
        """
        return _gskernel.GsExpressionContext2_Layer(self, *args)

    def Display(self, *args) -> "GsDisplay *":
        r"""
        *Overload 1:*
        设置Display，可参与表达式计算

        |

        *Overload 2:*
        获取Display
        """
        return _gskernel.GsExpressionContext2_Display(self, *args)

    def __init__(self):
        _gskernel.GsExpressionContext2_swiginit(self, _gskernel.new_GsExpressionContext2())
    __swig_destroy__ = _gskernel.delete_GsExpressionContext2

# Register GsExpressionContext2 in _gskernel:
_gskernel.GsExpressionContext2_swigregister(GsExpressionContext2)

UnKonwn = _gskernel.UnKonwn
Lua = _gskernel.Lua
Python = _gskernel.Python
class GsExpressionExecute(GsRefObject):
    r""" GsExpressionExecute 表达式执行类"""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self):
        _gskernel.GsExpressionExecute_swiginit(self, _gskernel.new_GsExpressionExecute())
    __swig_destroy__ = _gskernel.delete_GsExpressionExecute

    def Type(self) -> "ExpressionType":
        r""" 表达式类型"""
        return _gskernel.GsExpressionExecute_Type(self)

    def Evaluate(self, *args) -> "GsString":
        return _gskernel.GsExpressionExecute_Evaluate(self, *args)

# Register GsExpressionExecute in _gskernel:
_gskernel.GsExpressionExecute_swigregister(GsExpressionExecute)

class GsExpressionScript(GsRefObject):
    r""" GsExpressionScript 表达式上下文"""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        r"""
        *Overload 1:*
        初始化 :param 表达式字符串:

        |

        *Overload 2:*
        初始化 :param 表达式字符串列表:
        """
        _gskernel.GsExpressionScript_swiginit(self, _gskernel.new_GsExpressionScript(*args))
    __swig_destroy__ = _gskernel.delete_GsExpressionScript

    def ExpressionString(self, *args) -> "GsVector< GsString > &":
        r"""
        *Overload 1:*
         设置表达式字符串列表 :param 表达式字符串列表:

        |

        *Overload 2:*
         获取表达式字符串列表 :rtype: GsVector< GsString >
        :return: 返回表达式字符串列表
        """
        return _gskernel.GsExpressionScript_ExpressionString(self, *args)

    def Execute(self, *args) -> "GsExpressionExecute *":
        r"""
        *Overload 1:*
         设置表达式字符串列表 :param 表达式字符串列表:

        |

        *Overload 2:*
         获取表达式执行对象指针 :rtype: :py:class:`GsExpressionExecute`
        :return: 
        """
        return _gskernel.GsExpressionScript_Execute(self, *args)

    def Prepare(self, pExpContext: 'GsExpressionContext2') -> "void":
        r""" 设置表达式上下文 :param 表达式上下文:"""
        return _gskernel.GsExpressionScript_Prepare(self, pExpContext)

    def ExpressionContext(self) -> "GsExpressionContext2 *":
        r"""
         获取表达式上下文 :rtype: :py:class:`GsExpressionContext2`
        :return: 
        """
        return _gskernel.GsExpressionScript_ExpressionContext(self)

    def Evaluate(self) -> "GsString":
        r"""
         计算表达式值 :rtype: :py:class:`GsString`
        :return: 返回结果字符串
        """
        return _gskernel.GsExpressionScript_Evaluate(self)

# Register GsExpressionScript in _gskernel:
_gskernel.GsExpressionScript_swigregister(GsExpressionScript)

class GsFieldVector(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self):
        _gskernel.GsFieldVector_swiginit(self, _gskernel.new_GsFieldVector())
    __swig_destroy__ = _gskernel.delete_GsFieldVector

    def add(self, obj: 'GsField') -> "void":
        return _gskernel.GsFieldVector_add(self, obj)

    def size(self) -> "size_t":
        return _gskernel.GsFieldVector_size(self)

    def clear(self) -> "void":
        return _gskernel.GsFieldVector_clear(self)

    def empty(self) -> "bool":
        return _gskernel.GsFieldVector_empty(self)

    def get(self, n: 'int') -> "GsField":
        return _gskernel.GsFieldVector_get(self, n)

    def set(self, n: 'int', val: 'GsField') -> "void":
        return _gskernel.GsFieldVector_set(self, n, val)

# Register GsFieldVector in _gskernel:
_gskernel.GsFieldVector_swigregister(GsFieldVector)

class GsIntVector(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self):
        _gskernel.GsIntVector_swiginit(self, _gskernel.new_GsIntVector())
    __swig_destroy__ = _gskernel.delete_GsIntVector

    def add(self, obj: 'int const &') -> "void":
        return _gskernel.GsIntVector_add(self, obj)

    def size(self) -> "size_t":
        return _gskernel.GsIntVector_size(self)

    def clear(self) -> "void":
        return _gskernel.GsIntVector_clear(self)

    def empty(self) -> "bool":
        return _gskernel.GsIntVector_empty(self)

    def get(self, n: 'int') -> "int":
        return _gskernel.GsIntVector_get(self, n)

    def set(self, n: 'int', val: 'int const &') -> "void":
        return _gskernel.GsIntVector_set(self, n, val)

# Register GsIntVector in _gskernel:
_gskernel.GsIntVector_swigregister(GsIntVector)

class GsUInt64Vector(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self):
        _gskernel.GsUInt64Vector_swiginit(self, _gskernel.new_GsUInt64Vector())
    __swig_destroy__ = _gskernel.delete_GsUInt64Vector

    def add(self, obj: 'unsigned long long const &') -> "void":
        return _gskernel.GsUInt64Vector_add(self, obj)

    def size(self) -> "size_t":
        return _gskernel.GsUInt64Vector_size(self)

    def clear(self) -> "void":
        return _gskernel.GsUInt64Vector_clear(self)

    def empty(self) -> "bool":
        return _gskernel.GsUInt64Vector_empty(self)

    def get(self, n: 'int') -> "unsigned long long":
        return _gskernel.GsUInt64Vector_get(self, n)

    def set(self, n: 'int', val: 'unsigned long long const &') -> "void":
        return _gskernel.GsUInt64Vector_set(self, n, val)

# Register GsUInt64Vector in _gskernel:
_gskernel.GsUInt64Vector_swigregister(GsUInt64Vector)

eUnknownDataSource = _gskernel.eUnknownDataSource
r""" 未知数据源类型"""
eSqliteFile = _gskernel.eSqliteFile
r""" Sqlite文件数据源"""
eShapeFile = _gskernel.eShapeFile
r""" ESRI Shape文件数据源"""
eGeoPackage = _gskernel.eGeoPackage
r""" OGC GeoPakcage数据源"""
eOracleSpatial = _gskernel.eOracleSpatial
r""" OracleSpatial数据源"""
eOracleSpatial2 = _gskernel.eOracleSpatial2
r""" 标准OracleSpatial数据源"""
eMySQL = _gskernel.eMySQL
r""" MySQL数据源"""
ePostgreSQL = _gskernel.ePostgreSQL
r""" PostgreSQL数据源"""
eFile = _gskernel.eFile
r""" 所有文件类型的数据源"""
eDameng = _gskernel.eDameng
r""" 达梦数据源"""
eWeb = _gskernel.eWeb
r""" web数据源"""
eSupportTransaction = _gskernel.eSupportTransaction
r""" 数据库是否支持事务"""
eSupportStoreFeatureClass = _gskernel.eSupportStoreFeatureClass
r""" 数据库是否支持矢量地物类的存储"""
eSupportStoreRowClass = _gskernel.eSupportStoreRowClass
r""" 数据库是否支持普通二维表的存储"""
eSupportStoreTileClass = _gskernel.eSupportStoreTileClass
r""" 数据库是否支持瓦片类的存储"""
eSupportDataRoomFolder = _gskernel.eSupportDataRoomFolder
r""" 数据库是数据集目录"""
eSupportRecursiveDataRoomFolder = _gskernel.eSupportRecursiveDataRoomFolder
r""" 数据库是数据集目录多级递归 数据集目录下是否还可以支持数据集目录。"""
eSupportStoreRasterClass = _gskernel.eSupportStoreRasterClass
r""" 数据源是否支持栅格数据存储"""
eSupportStoreMosaicRasterClass = _gskernel.eSupportStoreMosaicRasterClass
r""" 数据源是否支持镶嵌栅格数据存储"""
class GsConnectProperty(object):
    r"""数据库连接信息定义数据库连接的各类信息以及数据库类型等"""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    Version = property(_gskernel.GsConnectProperty_Version_get, _gskernel.GsConnectProperty_Version_set, doc=r"""数据库连接信息版本。""")
    Server = property(_gskernel.GsConnectProperty_Server_get, _gskernel.GsConnectProperty_Server_set, doc=r"""数据服务地址或者文件路径""")
    Database = property(_gskernel.GsConnectProperty_Database_get, _gskernel.GsConnectProperty_Database_set, doc=r"""数据库名称""")
    User = property(_gskernel.GsConnectProperty_User_get, _gskernel.GsConnectProperty_User_set, doc=r"""用户名""")
    Password = property(_gskernel.GsConnectProperty_Password_get, _gskernel.GsConnectProperty_Password_set, doc=r"""密码""")
    Port = property(_gskernel.GsConnectProperty_Port_get, _gskernel.GsConnectProperty_Port_set, doc=r"""端口号""")
    DataSourceType = property(_gskernel.GsConnectProperty_DataSourceType_get, _gskernel.GsConnectProperty_DataSourceType_set, doc=r"""数据源类型""")

    def __init__(self, *args):
        r"""
        *Overload 1:*
        缺省构造函数.

        |

        *Overload 2:*
         拷贝构造函数:type other: :py:class:`GsConnectProperty`
        :param other: 需要拷贝的对象

        |

        *Overload 3:*
         根据服务地址、文件路径、url地址构造:type strServer: string
        :param strServer: 服务、文件、url地址

        |

        *Overload 4:*
         根据服务地址、文件路径、url地址和数据库名称构造:type strServer: string
        :param strServer: 服务、文件、url地址:type strDatabase: string
        :param strDatabase: 数据库名称

        |

        *Overload 5:*
         根据服务器地址、数据库和用户名密码构造:type strServer: string
        :param strServer: 服务、文件、url地址:type strDatabase: string
        :param strDatabase: 数据库名称:type strUser: string
        :param strUser: 用户名:type strPwd: string
        :param strPwd: 密码

        |

        *Overload 6:*
         根据服务器地址、数据库和用户名密码、端口构造:type strServer: string
        :param strServer: 服务、文件、url地址:type strDatabase: string
        :param strDatabase: 数据库名称:type strUser: string
        :param strUser: 用户名:type strPwd: string
        :param strPwd: 密码:type nPort: int
        :param nPort: 端口

        |

        *Overload 7:*
         根据服务器地址、数据库和用户名密码、端口、数据源类型构造:type strServer: string
        :param strServer: 服务、文件、url地址:type strDatabase: string
        :param strDatabase: 数据库名称:type strUser: string
        :param strUser: 用户名:type strPwd: string
        :param strPwd: 密码:type nPort: int
        :param nPort: 端口:type sourceType: int
        :param sourceType: 数据源类型
        """
        _gskernel.GsConnectProperty_swiginit(self, _gskernel.new_GsConnectProperty(*args))
    __swig_destroy__ = _gskernel.delete_GsConnectProperty

# Register GsConnectProperty in _gskernel:
_gskernel.GsConnectProperty_swigregister(GsConnectProperty)

eSimpleFeature = _gskernel.eSimpleFeature
eAnnotationFeature = _gskernel.eAnnotationFeature
eImageTileFeature = _gskernel.eImageTileFeature
r""" 影像瓦片"""
eTerrainTileFeature = _gskernel.eTerrainTileFeature
r""" 地形瓦片"""
eModelTileFeature = _gskernel.eModelTileFeature
r""" 模型"""
ePrevectorTileFeature = _gskernel.ePrevectorTileFeature
r""" 静态矢量"""
eDynvectorTileFeature = _gskernel.eDynvectorTileFeature
r""" 动态矢量"""
ePlaceNameTileFeature = _gskernel.ePlaceNameTileFeature
r""" 地名"""
eHypsographyTileFeature = _gskernel.eHypsographyTileFeature
r""" 地势"""
eDlgTileFeature = _gskernel.eDlgTileFeature
r""" 矢量"""
eTemporalImageTileFeature = _gskernel.eTemporalImageTileFeature
r""" 实现多时相瓦片数据集将级扩充的"""
eTemporalTerrainTileFeature = _gskernel.eTemporalTerrainTileFeature
eTemporalModleDsTileFeature = _gskernel.eTemporalModleDsTileFeature
eTemporalPreRaserVectorTileFeature = _gskernel.eTemporalPreRaserVectorTileFeature
eTemporalDynRaserVectorTileFeature = _gskernel.eTemporalDynRaserVectorTileFeature
eTemporalPlaceNameDsTileFeature = _gskernel.eTemporalPlaceNameDsTileFeature
eTemporalColourHypsographyMapTileFeature = _gskernel.eTemporalColourHypsographyMapTileFeature
eJpgType = _gskernel.eJpgType
r""" jpg"""
eZ7Type = _gskernel.eZ7Type
r""" 地形压缩文件"""
eX3dType = _gskernel.eX3dType
r""" 自定义三维模型打包文件"""
ePngType = _gskernel.ePngType
r""" png"""
ePlnType = _gskernel.ePlnType
r""" 自定义地名打包文件"""
eBmpType = _gskernel.eBmpType
r""" bmp"""
eDdsType = _gskernel.eDdsType
r""" dds"""
eGifType = _gskernel.eGifType
r""" gif"""
eTiffType = _gskernel.eTiffType
r""" tiff"""
eZLibType = _gskernel.eZLibType
r""" zlib地形压缩文件"""
eKmzType = _gskernel.eKmzType
r""" Kmz格式"""
eProtobuffType = _gskernel.eProtobuffType
r""" protobuf格式"""
eGZipProtobuffType = _gskernel.eGZipProtobuffType
r""" 以GZip格式压缩后protobuf格式"""
eQuantizedMeshType = _gskernel.eQuantizedMeshType
r""" 量化Mesh的地形瓦片格式"""
eModTexType = _gskernel.eModTexType
r""" texture of model"""
eUnKnownType = _gskernel.eUnKnownType
r""" 未知类型"""
eFeatureClass = _gskernel.eFeatureClass
r""" 矢量地物类"""
eTileClass = _gskernel.eTileClass
r""" 瓦片类"""
eRowClass = _gskernel.eRowClass
r""" 二维表"""
eDataRoomFolder = _gskernel.eDataRoomFolder
r""" 数据集的集合"""
eRasterClass = _gskernel.eRasterClass
r""" 栅格类"""
eSelectionSetUnion = _gskernel.eSelectionSetUnion
r""" 选择集求并"""
eSelectionSetIntersection = _gskernel.eSelectionSetIntersection
r""" 选择集求交"""
eSelectionSetDifference = _gskernel.eSelectionSetDifference
r""" 选择集求差"""
eSelectionSetSymDifference = _gskernel.eSelectionSetSymDifference
r""" 选择集求对称差"""
class GsTransaction(GsRefObject):
    r""" 事务对象"""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _gskernel.delete_GsTransaction

    def IsTransaction(self) -> "bool":
        r"""
         是否处于事务中:rtype: boolean
        :return: 返回是否处于事务中
        """
        return _gskernel.GsTransaction_IsTransaction(self)

    def StartTransaction(self) -> "bool":
        r"""
         启动事务:rtype: boolean
        :return: 返回是否成功启动
        """
        return _gskernel.GsTransaction_StartTransaction(self)

    def CommitTransaction(self) -> "bool":
        r"""
         提交事务:rtype: boolean
        :return: 返回是否提交成功
        """
        return _gskernel.GsTransaction_CommitTransaction(self)

    def RollbackTransaction(self) -> "bool":
        r"""
         取消事务:rtype: boolean
        :return: 返回是否取消成功
        """
        return _gskernel.GsTransaction_RollbackTransaction(self)

# Register GsTransaction in _gskernel:
_gskernel.GsTransaction_swigregister(GsTransaction)

class GsDataRoom(GsRefObject):
    r""" 数据集对象基类"""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __swig_destroy__ = _gskernel.delete_GsDataRoom

    def Interrupt(self) -> "bool":
        r"""
         打断正在运行中的操作 :rtype: boolean
        :return: 不支持打断操作的能力则返回false，成功打断或者无须打断都返回true
        """
        return _gskernel.GsDataRoom_Interrupt(self)

    def Transaction(self) -> "GsTransaction *":
        r""" 获取事务对象，如果不支持事务则返回NULL"""
        return _gskernel.GsDataRoom_Transaction(self)

    def Folder(self) -> "GsDataRoomFolder *":
        r"""
         数据集所在的目录:rtype: :py:class:`GsDataRoomFolder`
        :return: 返回数据集所在的目录，如果为空则标识数据集在GeoDatabase下
        """
        return _gskernel.GsDataRoom_Folder(self)

    def Name(self) -> "GsString":
        r"""
         数据集名称:rtype: :py:class:`GsString`
        :return: 返回数据集对象的名称
        """
        return _gskernel.GsDataRoom_Name(self)

    def Type(self) -> "GsDataRoomType":
        r"""
         数据集类型:rtype: int
        :return: 返回数据集对象的类型
        """
        return _gskernel.GsDataRoom_Type(self)

    def GeoDatabase(self) -> "GsGeoDatabase *":
        r"""
         数据集所在的数据库对象:rtype: :py:class:`GsGeoDatabase`
        :return: 返回数据库对象指针
        """
        return _gskernel.GsDataRoom_GeoDatabase(self)

    def Delete(self) -> "bool":
        r"""
         删除:rtype: boolean
        :return: 返回是否删除成功
        """
        return _gskernel.GsDataRoom_Delete(self)

    def MetadataDomain(self) -> "GsVector< GsString >":
        r""" 元数据的分类名称"""
        return _gskernel.GsDataRoom_MetadataDomain(self)

    def MetadataName(self, strDomainName: 'char const *') -> "GsVector< GsString >":
        r""" 获取元数据分类下的元数据名称"""
        return _gskernel.GsDataRoom_MetadataName(self, strDomainName)

    def MetadataItem(self, *args) -> "void":
        r"""
        *Overload 1:*
        获取某个分类下的元数据值

        |

        *Overload 2:*
        设置某个分类下的元数据值
        """
        return _gskernel.GsDataRoom_MetadataItem(self, *args)

    def ReName(self, name: 'char const *') -> "bool":
        r"""
         修改数据集名称 :type name: string
        :param name: 需要设置的名称字符串 :rtype: boolean
        :return: 返回是否修改成功
        """
        return _gskernel.GsDataRoom_ReName(self, name)

    def AliasName(self, *args) -> "bool":
        r"""
        *Overload 1:*
         获取数据集别名 :rtype: :py:class:`GsString`
        :return: 返回数据集别名

        |

        *Overload 2:*
         修改数据集别名 :type name: string
        :param name: 需要设置的名称字符串 :rtype: boolean
        :return: 返回是否修改成功
        """
        return _gskernel.GsDataRoom_AliasName(self, *args)

# Register GsDataRoom in _gskernel:
_gskernel.GsDataRoom_swigregister(GsDataRoom)

class GsGeoDataRoom(GsDataRoom):
    r""" 具备地理特性的数据集对象抽象基类"""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __swig_destroy__ = _gskernel.delete_GsGeoDataRoom

    def Extent(self, bForce: 'bool'=False) -> "GsBox":
        r"""
         获取最大外接矩形范围:type bForce: boolean
        :param bForce: 是否强制获取，强制获取将会从数据表中统计最大范围:rtype: :py:class:`GsBox`
        :return: 返回矩形对象
        """
        return _gskernel.GsGeoDataRoom_Extent(self, bForce)

    def SpatialReference(self) -> "GsSpatialReference *":
        r"""
         获取数据集的空间参考:rtype: :py:class:`GsSpatialReference`
        :return: 返回空间参考对象的指针
        """
        return _gskernel.GsGeoDataRoom_SpatialReference(self)

    def ChangeSpatialReference(self, pSR: 'GsSpatialReference') -> "bool":
        r"""
         修改数据集的空间参考:rtype: boolean
        :return: 返回修改是否成功
        """
        return _gskernel.GsGeoDataRoom_ChangeSpatialReference(self, pSR)

    @staticmethod
    def CanDowncast(b: 'GsDataRoom') -> "bool":
        return _gskernel.GsGeoDataRoom_CanDowncast(b)

    @staticmethod
    def DowncastTo(b: 'GsDataRoom') -> "GsSmarterPtr< GsGeoDataRoom >":
        return _gskernel.GsGeoDataRoom_DowncastTo(b)

# Register GsGeoDataRoom in _gskernel:
_gskernel.GsGeoDataRoom_swigregister(GsGeoDataRoom)

def GsGeoDataRoom_CanDowncast(b: 'GsDataRoom') -> "bool":
    return _gskernel.GsGeoDataRoom_CanDowncast(b)

def GsGeoDataRoom_DowncastTo(b: 'GsDataRoom') -> "GsSmarterPtr< GsGeoDataRoom >":
    return _gskernel.GsGeoDataRoom_DowncastTo(b)

class GsQueryFilter(GsRefObject):
    r""" 属性条件查询"""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, strWhere: 'char const *'=None):
        r"""
         从where子句构造:type strWhere: string
        :param strWhere: SQL查询的where子句
        """
        _gskernel.GsQueryFilter_swiginit(self, _gskernel.new_GsQueryFilter(strWhere))
    __swig_destroy__ = _gskernel.delete_GsQueryFilter

    def WhereClause(self, *args) -> "void":
        r"""
        *Overload 1:*
         获取where子句:rtype: :py:class:`GsString`
        :return: 返回where子句字符串

        |

        *Overload 2:*
         设置where子句查询条件:type strWhere: string
        :param strWhere: SQL查询的where子句
        """
        return _gskernel.GsQueryFilter_WhereClause(self, *args)

    def And(self, pOther: 'GsQueryFilter') -> "bool":
        r"""
         以And合并两个过滤条件:type pOther: :py:class:`GsQueryFilter`
        :param pOther: 另外一个合并的条件:rtype: boolean
        :return: 返回合并是否成功
        """
        return _gskernel.GsQueryFilter_And(self, pOther)

    def Or(self, pOther: 'GsQueryFilter') -> "bool":
        r"""
         以Or合并两个过滤条件:type pOther: :py:class:`GsQueryFilter`
        :param pOther: 另外一个合并的条件:rtype: boolean
        :return: 返回合并是否成功
        """
        return _gskernel.GsQueryFilter_Or(self, pOther)

    def Clone(self) -> "GsSmarterPtr< GsQueryFilter >":
        r""" 复制过滤条件对象"""
        return _gskernel.GsQueryFilter_Clone(self)

# Register GsQueryFilter in _gskernel:
_gskernel.GsQueryFilter_swigregister(GsQueryFilter)

class GsSpatialQueryFilter(GsQueryFilter):
    r""" 空间属性查询条件"""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        r"""
        *Overload 1:*
         从几何对象构造:type pGeo: :py:class:`GsGeometry`
        :param pGeo: 查询的几何对象指针

        |

        *Overload 2:*
         从几何对象和where子句构造:type pGeo: :py:class:`GsGeometry`
        :param pGeo: 查询的几何对象指针:type strWhere: string
        :param strWhere: 查询SQL语句where子句

        |

        *Overload 3:*
         从几何对象,where子句和查询方式字符串构造:type pGeo: :py:class:`GsGeometry`
        :param pGeo: 查询的几何对象指针:type strWhere: string
        :param strWhere: 查询SQL语句where子句:type strFilterType: string
        :param strFilterType: 查询方式
        """
        _gskernel.GsSpatialQueryFilter_swiginit(self, _gskernel.new_GsSpatialQueryFilter(*args))
    __swig_destroy__ = _gskernel.delete_GsSpatialQueryFilter

    def Geometry(self, *args) -> "void":
        r"""
        *Overload 1:*
         获取空间查询几何对象:rtype: :py:class:`GsGeometry`
        :return: 返回查询的几何对象指针

        |

        *Overload 2:*
         设置空间查询几何对象:param pGeo: 查询的几何对象指针
        """
        return _gskernel.GsSpatialQueryFilter_Geometry(self, *args)

    def FilterType(self, *args) -> "void":
        r"""
        *Overload 1:*
         获取查询方式:rtype: :py:class:`GsString`
        :return: 返回查询方式字符串

        |

        *Overload 2:*
         设置查询方式:type strFilterType: string
        :param strFilterType: 查询方式字符串表达式
        """
        return _gskernel.GsSpatialQueryFilter_FilterType(self, *args)

    def IsMatch(self, *args) -> "bool":
        r"""
        *Overload 1:*
         判断一个传入的Geometry是否符合几何过滤条件。:type pGeo: :py:class:`GsGeometry`
        :param pGeo: 要判断的几何对象:rtype: boolean
        :return: 返回是否匹配几何过滤条件。

        |

        *Overload 2:*
         判断一个传入的Geometry是否符合几何过滤条件。:param pGeo: 要判断的几何对象:rtype: boolean
        :return: 返回是否匹配几何过滤条件。
        """
        return _gskernel.GsSpatialQueryFilter_IsMatch(self, *args)

    def And(self, pOther: 'GsQueryFilter') -> "bool":
        r"""
         以And合并两个过滤条件:type pOther: :py:class:`GsQueryFilter`
        :param pOther: 另外一个合并的条件:rtype: boolean
        :return: 返回合并是否成功
        """
        return _gskernel.GsSpatialQueryFilter_And(self, pOther)

    def Or(self, pOther: 'GsQueryFilter') -> "bool":
        r"""
         以Or合并两个过滤条件:type pOther: :py:class:`GsQueryFilter`
        :param pOther: 另外一个合并的条件:rtype: boolean
        :return: 返回合并是否成功
        """
        return _gskernel.GsSpatialQueryFilter_Or(self, pOther)

    def Clone(self) -> "GsSmarterPtr< GsQueryFilter >":
        r""" 复制过滤条件对象"""
        return _gskernel.GsSpatialQueryFilter_Clone(self)

    @staticmethod
    def CanDowncast(b: 'GsQueryFilter') -> "bool":
        return _gskernel.GsSpatialQueryFilter_CanDowncast(b)

    @staticmethod
    def DowncastTo(b: 'GsQueryFilter') -> "GsSmarterPtr< GsSpatialQueryFilter >":
        return _gskernel.GsSpatialQueryFilter_DowncastTo(b)

# Register GsSpatialQueryFilter in _gskernel:
_gskernel.GsSpatialQueryFilter_swigregister(GsSpatialQueryFilter)

def GsSpatialQueryFilter_CanDowncast(b: 'GsQueryFilter') -> "bool":
    return _gskernel.GsSpatialQueryFilter_CanDowncast(b)

def GsSpatialQueryFilter_DowncastTo(b: 'GsQueryFilter') -> "GsSmarterPtr< GsSpatialQueryFilter >":
    return _gskernel.GsSpatialQueryFilter_DowncastTo(b)

class GsField(object):
    r"""字段"""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    Name = property(_gskernel.GsField_Name_get, _gskernel.GsField_Name_set, doc=r"""字段名称""")
    AliasName = property(_gskernel.GsField_AliasName_get, _gskernel.GsField_AliasName_set, doc=r"""字段别名""")
    Type = property(_gskernel.GsField_Type_get, _gskernel.GsField_Type_set, doc=r"""字段类型""")
    Precision = property(_gskernel.GsField_Precision_get, _gskernel.GsField_Precision_set, doc=r"""字段精度""")
    Scale = property(_gskernel.GsField_Scale_get, _gskernel.GsField_Scale_set, doc=r"""小数位""")
    IsNullable = property(_gskernel.GsField_IsNullable_get, _gskernel.GsField_IsNullable_set, doc=r"""是否允许为空""")
    DefaultValue = property(_gskernel.GsField_DefaultValue_get, _gskernel.GsField_DefaultValue_set, doc=r"""字段默认值""")

    def __init__(self, *args):
        r"""
        *Overload 1:*
        拷贝构造函数

        |

        *Overload 2:*
        从名称和类型构造:type strName: string
        :param strName: 字段名称:type eType: int
        :param eType: 字段类型:type strAliasName: string
        :param strAliasName: 字段别名:type defaultVal: :py:class:`GsAny`
        :param defaultVal: 字段默认值

        |

        *Overload 3:*
        从名称和类型构造:type strName: string
        :param strName: 字段名称:type eType: int
        :param eType: 字段类型:type strAliasName: string
        :param strAliasName: 字段别名:param defaultVal: 字段默认值

        |

        *Overload 4:*
        从名称和类型构造:type strName: string
        :param strName: 字段名称:type eType: int
        :param eType: 字段类型:param strAliasName: 字段别名:param defaultVal: 字段默认值

        |

        *Overload 5:*
        从名称和类型、精度和小数L位构造:type strName: string
        :param strName: 字段名称:type eType: int
        :param eType: 字段类型:type nPrecision: int
        :param nPrecision: 字段精度:type nScale: int
        :param nScale: 字段小数位长度:type strAliasName: string
        :param strAliasName: 字段别名:type defaultVal: :py:class:`GsAny`
        :param defaultVal: 字段默认值，类型需要与字段类型匹配

        |

        *Overload 6:*
        从名称和类型、精度和小数L位构造:type strName: string
        :param strName: 字段名称:type eType: int
        :param eType: 字段类型:type nPrecision: int
        :param nPrecision: 字段精度:type nScale: int
        :param nScale: 字段小数位长度:type strAliasName: string
        :param strAliasName: 字段别名:param defaultVal: 字段默认值，类型需要与字段类型匹配

        |

        *Overload 7:*
        从名称和类型、精度和小数L位构造:type strName: string
        :param strName: 字段名称:type eType: int
        :param eType: 字段类型:type nPrecision: int
        :param nPrecision: 字段精度:type nScale: int
        :param nScale: 字段小数位长度:param strAliasName: 字段别名:param defaultVal: 字段默认值，类型需要与字段类型匹配

        |

        *Overload 8:*
        从名称和类型、精度和小数L位构造:type strName: string
        :param strName: 字段名称:type eType: int
        :param eType: 字段类型:type nPrecision: int
        :param nPrecision: 字段精度:param nScale: 字段小数位长度:param strAliasName: 字段别名:param defaultVal: 字段默认值，类型需要与字段类型匹配
        """
        _gskernel.GsField_swiginit(self, _gskernel.new_GsField(*args))

    def ToXml(self) -> "GsString":
        r"""将字段信息序列化为xml字符串"""
        return _gskernel.GsField_ToXml(self)
    __swig_destroy__ = _gskernel.delete_GsField

# Register GsField in _gskernel:
_gskernel.GsField_swigregister(GsField)

class GsFields(object):
    r"""字段集合"""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    Fields = property(_gskernel.GsFields_Fields_get, _gskernel.GsFields_Fields_set)

    def FindField(self, strFieldName: 'char const *') -> "int":
        r"""寻找字段的索引"""
        return _gskernel.GsFields_FindField(self, strFieldName)

    def ToXml(self) -> "GsString":
        r"""将字段信息序列化为xml字符串"""
        return _gskernel.GsFields_ToXml(self)

    def __init__(self):
        _gskernel.GsFields_swiginit(self, _gskernel.new_GsFields())
    __swig_destroy__ = _gskernel.delete_GsFields

# Register GsFields in _gskernel:
_gskernel.GsFields_swigregister(GsFields)

class GsGeometryColumnInfo(object):
    r"""几何字段信息"""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    HasZ = property(_gskernel.GsGeometryColumnInfo_HasZ_get, _gskernel.GsGeometryColumnInfo_HasZ_set, doc=r"""是否存在Z维度""")
    GeometryType = property(_gskernel.GsGeometryColumnInfo_GeometryType_get, _gskernel.GsGeometryColumnInfo_GeometryType_set, doc=r"""几何类型""")
    FeatureType = property(_gskernel.GsGeometryColumnInfo_FeatureType_get, _gskernel.GsGeometryColumnInfo_FeatureType_set, doc=r"""地物类型""")
    MapScale = property(_gskernel.GsGeometryColumnInfo_MapScale_get, _gskernel.GsGeometryColumnInfo_MapScale_set, doc=r"""比例尺""")
    XYDomain = property(_gskernel.GsGeometryColumnInfo_XYDomain_get, _gskernel.GsGeometryColumnInfo_XYDomain_set, doc=r"""X，Y维度范围""")
    ZMin = property(_gskernel.GsGeometryColumnInfo_ZMin_get, _gskernel.GsGeometryColumnInfo_ZMin_set, doc=r"""Z维度范围""")
    ZMax = property(_gskernel.GsGeometryColumnInfo_ZMax_get, _gskernel.GsGeometryColumnInfo_ZMax_set)

    def __init__(self, *args):
        r"""
        *Overload 1:*
        缺省构造

        |

        *Overload 2:*
        拷贝构造

        |

        *Overload 3:*
        从几何类型，地物类型和xy维度范围构造

        |

        *Overload 4:*
        从几何类型，地物类型和xy维度范围，z维度范围构造
        """
        _gskernel.GsGeometryColumnInfo_swiginit(self, _gskernel.new_GsGeometryColumnInfo(*args))
    __swig_destroy__ = _gskernel.delete_GsGeometryColumnInfo

# Register GsGeometryColumnInfo in _gskernel:
_gskernel.GsGeometryColumnInfo_swigregister(GsGeometryColumnInfo)

class GsTileColumnInfo(object):
    r"""瓦片类基本信息"""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    FeatureType = property(_gskernel.GsTileColumnInfo_FeatureType_get, _gskernel.GsTileColumnInfo_FeatureType_set, doc=r"""地物类型""")
    XYDomain = property(_gskernel.GsTileColumnInfo_XYDomain_get, _gskernel.GsTileColumnInfo_XYDomain_set, doc=r"""X，Y维度范围""")
    ValidTopLevel = property(_gskernel.GsTileColumnInfo_ValidTopLevel_get, _gskernel.GsTileColumnInfo_ValidTopLevel_set, doc=r"""有效的顶层级别""")
    ValidBottomLevel = property(_gskernel.GsTileColumnInfo_ValidBottomLevel_get, _gskernel.GsTileColumnInfo_ValidBottomLevel_set, doc=r"""有效的底层级别""")

    def __init__(self, *args):
        r"""
        *Overload 1:*
        缺省构造

        |

        *Overload 2:*
        拷贝构造

        |

        *Overload 3:*
        从地物类型和范围构造
        """
        _gskernel.GsTileColumnInfo_swiginit(self, _gskernel.new_GsTileColumnInfo(*args))
    __swig_destroy__ = _gskernel.delete_GsTileColumnInfo

# Register GsTileColumnInfo in _gskernel:
_gskernel.GsTileColumnInfo_swigregister(GsTileColumnInfo)

class GsRow(GsRefObject):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __swig_destroy__ = _gskernel.delete_GsRow

    def OID(self, *args) -> "void":
        r"""
        *Overload 1:*
         获取对象唯一ID:rtype: int
        :return: 返回唯一ID，如果ID小于0则表示对象为新的未存储对象

        |

        *Overload 2:*
         设置对象的id 通过设置地物的id为-1改变对象为新对象:type oid: int
        :param oid: 对象唯一ID
        """
        return _gskernel.GsRow_OID(self, *args)

    def ValueInt(self, nColumn: 'int') -> "int":
        r"""
         获取整形值:type nColumn: int
        :param nColumn: 列索引:rtype: int
        :return: 返回32位整数值
        """
        return _gskernel.GsRow_ValueInt(self, nColumn)

    def ValueInt64(self, nColumn: 'int') -> "long long":
        r"""
         获取64位整数值:type nColumn: int
        :param nColumn: 列索引:rtype: int
        :return: 返回64位整数值
        """
        return _gskernel.GsRow_ValueInt64(self, nColumn)

    def ValueFloat(self, nColumn: 'int') -> "float":
        r"""
         获取单精度浮点值:type nColumn: int
        :param nColumn: 列索引:rtype: float
        :return: 返回单精度浮点值
        """
        return _gskernel.GsRow_ValueFloat(self, nColumn)

    def ValueDouble(self, nColumn: 'int') -> "double":
        r"""
         获取双精度浮点值:type nColumn: int
        :param nColumn: 列索引:rtype: float
        :return: 返回双精度浮点值
        """
        return _gskernel.GsRow_ValueDouble(self, nColumn)

    def ValueString(self, nColumn: 'int') -> "GsString":
        r"""
         获取字符串值:type nColumn: int
        :param nColumn: 列索引:rtype: :py:class:`GsString`
        :return: 返回字符串值
        """
        return _gskernel.GsRow_ValueString(self, nColumn)

    def ValueBlob(self, nColumn: 'int') -> "GsAny":
        r"""
         获取二进制块:type nColumn: int
        :param nColumn: 列索引:rtype: :py:class:`GsAny`
        :return: 返回二进制块
        """
        return _gskernel.GsRow_ValueBlob(self, nColumn)

    def ValueDateTime(self, nColumn: 'int') -> "GsDateTime":
        r"""
         获取日期:type nColumn: int
        :param nColumn: 列索引:rtype: :py:class:`GsDateTime`
        :return: 返回日期
        """
        return _gskernel.GsRow_ValueDateTime(self, nColumn)

    def ValueSize(self, nColumn: 'int') -> "unsigned int":
        r"""
         获取值的指针:type nColumn: int
        :param nColumn: 列索引:rtype: int
        :return: 返回值的指针 获取值的字节长度:type nColumn: int
        :param nColumn: 列索引:rtype: int
        :return: 返回值的字节长度
        """
        return _gskernel.GsRow_ValueSize(self, nColumn)

    def ValueType(self, nColumn: 'int') -> "GsFieldType":
        r"""
         获取列的数据类型:type nColumn: int
        :param nColumn: 列索引:rtype: int
        :return: 返回列的数据类型枚举
        """
        return _gskernel.GsRow_ValueType(self, nColumn)

    def ValueUInt(self, nColumn: 'int') -> "unsigned int":
        r"""
         获取无符号整形值:type nColumn: int
        :param nColumn: 列索引:rtype: int
        :return: 返回32位无符号整数值
        """
        return _gskernel.GsRow_ValueUInt(self, nColumn)

    def ValueUInt64(self, nColumn: 'int') -> "unsigned long long":
        r"""
         获取64位无符号整数值:type nColumn: int
        :param nColumn: 列索引:rtype: int
        :return: 返回64位无符号整数值
        """
        return _gskernel.GsRow_ValueUInt64(self, nColumn)

    def Value(self, *args) -> "void":
        r"""
        *Overload 1:*
         设置Bool值:type nColumn: int
        :param nColumn: 列索引:type nValue: boolean
        :param nValue: 布尔值

        |

        *Overload 2:*
         设置32位整数值:type nColumn: int
        :param nColumn: 列索引:type nValue: int
        :param nValue: 整数值

        |

        *Overload 3:*
         设置字符串值:type nColumn: int
        :param nColumn: 列索引:type value: string
        :param value: 字符串值

        |

        *Overload 4:*
         设置单精度浮点值:type nColumn: int
        :param nColumn: 列索引:type value: float
        :param value: 单精度浮点值

        |

        *Overload 5:*
         设置双精度浮点值:type nColumn: int
        :param nColumn: 列索引:type value: float
        :param value: 双精度浮点值

        |

        *Overload 6:*
         设置二进制值:type nColumn: int
        :param nColumn: 列索引:type value: signed char
        :param value: 二进制值:type nSize: int
        :param nSize: 二进制值长度

        |

        *Overload 7:*
         设置无符号64位整数:type nColumn: int
        :param nColumn: 列索引:type value: int
        :param value: 无符号64位整数值

        |

        *Overload 8:*
         设置无符号32位整数值:type nColumn: int
        :param nColumn: 列索引:type value: int
        :param value: 整数值

        |

        *Overload 9:*
         设置64位整数:type nColumn: int
        :param nColumn: 列索引:type value: int
        :param value: 64位整数值

        |

        *Overload 10:*
         设置日期:type nColumn: int
        :param nColumn: 列索引:type value: :py:class:`GsDateTime`
        :param value: 设置日期

        |

        *Overload 11:*
         设置属性值为空:type nColumn: int
        :param nColumn: 列索引

        |

        *Overload 12:*
         根据字段类型设置任意值:type nColumn: int
        :param nColumn: 列索引:type value: signed char
        :param value: 无符号64位整数值:type nSize: int
        :param nSize: 值长度:type eType: int
        :param eType: 字段类型
        """
        return _gskernel.GsRow_Value(self, *args)

    def Store(self) -> "bool":
        r"""
         保存对象到数据库或文件:rtype: boolean
        :return: 返回保存是否成功
        """
        return _gskernel.GsRow_Store(self)

    def Delete(self) -> "bool":
        r"""
         从数据库或者文件删除对象:rtype: boolean
        :return: 返回删除是否成功
        """
        return _gskernel.GsRow_Delete(self)

# Register GsRow in _gskernel:
_gskernel.GsRow_swigregister(GsRow)

class GsTile(GsRow):
    r""" 瓦片对象"""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _gskernel.delete_GsTile

    @staticmethod
    def ToKey(nLevel: 'int', nRow: 'int', nCol: 'int') -> "long long":
        r""" 层行列转化为64位Key值，Level占6位，Row占24位，Col占24位"""
        return _gskernel.GsTile_ToKey(nLevel, nRow, nCol)

    @staticmethod
    def KeyToLevel(nKey: 'long long') -> "int":
        r""" 64位key值获取Level值"""
        return _gskernel.GsTile_KeyToLevel(nKey)

    @staticmethod
    def KeyToRow(nKey: 'long long') -> "int":
        r""" 64位key值获取Row值"""
        return _gskernel.GsTile_KeyToRow(nKey)

    @staticmethod
    def KeyToCol(nKey: 'long long') -> "int":
        r""" 64位key值获取Col值"""
        return _gskernel.GsTile_KeyToCol(nKey)

    def Level(self, *args) -> "void":
        r"""
        *Overload 1:*
        获取级别

        |

        *Overload 2:*
        设置级别
        """
        return _gskernel.GsTile_Level(self, *args)

    def Row(self, *args) -> "void":
        r"""
        *Overload 1:*
        获取行

        |

        *Overload 2:*
        设置行
        """
        return _gskernel.GsTile_Row(self, *args)

    def Col(self, *args) -> "void":
        r"""
        *Overload 1:*
        获取列

        |

        *Overload 2:*
        设置列
        """
        return _gskernel.GsTile_Col(self, *args)

    def TileType(self, *args) -> "void":
        r"""
        *Overload 1:*
        获取瓦片类型

        |

        *Overload 2:*
        设置瓦片类型
        """
        return _gskernel.GsTile_TileType(self, *args)

    def TileData(self, pData: 'signed char const *', nLen: 'int') -> "void":
        r""" 设置瓦片数据"""
        return _gskernel.GsTile_TileData(self, pData, nLen)

    def TileDataPtr(self, pData: 'signed char *') -> "void":
        r""" 获取瓦片数据指针"""
        return _gskernel.GsTile_TileDataPtr(self, pData)

    def TileDataLength(self) -> "int":
        r""" 获取瓦片数据长度。"""
        return _gskernel.GsTile_TileDataLength(self)

    @staticmethod
    def CanDowncast(b: 'GsRow') -> "bool":
        return _gskernel.GsTile_CanDowncast(b)

    @staticmethod
    def DowncastTo(b: 'GsRow') -> "GsSmarterPtr< GsTile >":
        return _gskernel.GsTile_DowncastTo(b)

# Register GsTile in _gskernel:
_gskernel.GsTile_swigregister(GsTile)

def GsTile_ToKey(nLevel: 'int', nRow: 'int', nCol: 'int') -> "long long":
    r""" 层行列转化为64位Key值，Level占6位，Row占24位，Col占24位"""
    return _gskernel.GsTile_ToKey(nLevel, nRow, nCol)

def GsTile_KeyToLevel(nKey: 'long long') -> "int":
    r""" 64位key值获取Level值"""
    return _gskernel.GsTile_KeyToLevel(nKey)

def GsTile_KeyToRow(nKey: 'long long') -> "int":
    r""" 64位key值获取Row值"""
    return _gskernel.GsTile_KeyToRow(nKey)

def GsTile_KeyToCol(nKey: 'long long') -> "int":
    r""" 64位key值获取Col值"""
    return _gskernel.GsTile_KeyToCol(nKey)

def GsTile_CanDowncast(b: 'GsRow') -> "bool":
    return _gskernel.GsTile_CanDowncast(b)

def GsTile_DowncastTo(b: 'GsRow') -> "GsSmarterPtr< GsTile >":
    return _gskernel.GsTile_DowncastTo(b)

class GsFeature(GsRow):
    r""" 矢量地物对象"""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __swig_destroy__ = _gskernel.delete_GsFeature

    def Geometry(self, *args) -> "void":
        r"""
        *Overload 1:*
         获取几何数据:rtype: :py:class:`GsGeometry`
        :return: 返回几何对象的指针

        |

        *Overload 2:*
         设置几何数据:type Geo: :py:class:`GsGeometry`
        :param Geo: 几何对象指针，内部不会拷贝

        |

        *Overload 3:*
         设置几何数据:type Geo: :py:class:`GsGeometryBlob`
        :param Geo: 几何Blob数据
        """
        return _gskernel.GsFeature_Geometry(self, *args)

    def GeometryBlob(self) -> "GsGeometryBlob *":
        r""" 获得Geometry的Blob数据指针"""
        return _gskernel.GsFeature_GeometryBlob(self)

    def FeatureClass(self) -> "GsFeatureClass *":
        r"""
         获取地物所在的地物类:rtype: :py:class:`GsFeatureClass`
        :return: 返回所在的地物类指针
        """
        return _gskernel.GsFeature_FeatureClass(self)

    def AssignAttribute(self, pOther: 'GsFeature') -> "bool":
        r"""
         复制其他地物的属性数据到当前地物中 仅仅当其他的属性结构和当前地物保持完全一致才能正常工作 :type pOther: :py:class:`GsFeature`
        :param pOther: 参照的地物 :rtype: boolean
        :return: 返回是否成功
        """
        return _gskernel.GsFeature_AssignAttribute(self, pOther)

    def FindFieldIndex(self, strName: 'GsString') -> "int":
        r"""
         获得字段名对应索引 :type strName: :py:class:`GsString`
        :param strName: 字段名 :rtype: int
        :return: 返回索引值，如果没有，则返回-1
        """
        return _gskernel.GsFeature_FindFieldIndex(self, strName)

    @staticmethod
    def CanDowncast(b: 'GsRow') -> "bool":
        return _gskernel.GsFeature_CanDowncast(b)

    @staticmethod
    def DowncastTo(b: 'GsRow') -> "GsSmarterPtr< GsFeature >":
        return _gskernel.GsFeature_DowncastTo(b)

# Register GsFeature in _gskernel:
_gskernel.GsFeature_swigregister(GsFeature)

def GsFeature_CanDowncast(b: 'GsRow') -> "bool":
    return _gskernel.GsFeature_CanDowncast(b)

def GsFeature_DowncastTo(b: 'GsRow') -> "GsSmarterPtr< GsFeature >":
    return _gskernel.GsFeature_DowncastTo(b)

class GsFeatureBuffer(object):
    r""" 分析数据封装。"""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self):
        _gskernel.GsFeatureBuffer_swiginit(self, _gskernel.new_GsFeatureBuffer())
    __swig_destroy__ = _gskernel.delete_GsFeatureBuffer

    def ReadFromFeature(self, pFea: 'GsFeature') -> "bool":
        r""" 从地物读取数据"""
        return _gskernel.GsFeatureBuffer_ReadFromFeature(self, pFea)

    def WriteToFeature(self, pFea: 'GsFeature') -> "bool":
        r""" 写入数据到地物"""
        return _gskernel.GsFeatureBuffer_WriteToFeature(self, pFea)

    def ID(self, *args) -> "void":
        r"""
        *Overload 1:*
        数据的唯一ID

        |

        *Overload 2:*
        数据的唯一ID
        """
        return _gskernel.GsFeatureBuffer_ID(self, *args)

    def GeometryPtr(self) -> "GsSmarterPtr< GsGeometry >":
        return _gskernel.GsFeatureBuffer_GeometryPtr(self)

    def SetGeometry(self, *args) -> "void":
        r"""
        *Overload 1:*
         直接设置坐标内容 :type nInterCount: int
        :param nInterCount: 解释串长度 :param pInter: 解释串数组 :type nDim: int
        :param nDim: 几何维度，0=点，1=线，2=面 :type nCDim: int
        :param nCDim: 坐标维度，2,3 :type nCoordLen: int
        :param nCoordLen: 坐标长度 :param pCoord: 坐标数组

        |

        *Overload 2:*
         设置Geometry对象

        |

        *Overload 3:*
         用Geometry数据设置Geometry对象
        """
        return _gskernel.GsFeatureBuffer_SetGeometry(self, *args)

    def InterpretLength(self) -> "int":
        r""" 解释串长度"""
        return _gskernel.GsFeatureBuffer_InterpretLength(self)

    def Interpret(self, pInter: 'int *', nBuffLen: 'int') -> "int":
        r""" 拷贝解释串到输入的数组中"""
        return _gskernel.GsFeatureBuffer_Interpret(self, pInter, nBuffLen)

    def CoordinateLength(self) -> "int":
        r""" 解释串指针 坐标串长度"""
        return _gskernel.GsFeatureBuffer_CoordinateLength(self)

    def Coordinate(self, pCoord: 'double *', nBuffLen: 'int') -> "int":
        r""" 坐标串 拷贝坐标串到输入的数组中"""
        return _gskernel.GsFeatureBuffer_Coordinate(self, pCoord, nBuffLen)

    def GeometrySubCount(self) -> "int":
        r""" 几何对象的子对象数量，如果几何对象为简单对象则返回1"""
        return _gskernel.GsFeatureBuffer_GeometrySubCount(self)

    def SubInterpret(self, n: 'int', pInter: 'int *', nBuffLen: 'int') -> "int":
        r""" 获取子Geometry的解释串"""
        return _gskernel.GsFeatureBuffer_SubInterpret(self, n, pInter, nBuffLen)

    def SubInterpretLength(self, n: 'int') -> "int":
        return _gskernel.GsFeatureBuffer_SubInterpretLength(self, n)

    def SubCoordinate(self, n: 'int', pCoord: 'double *', nBuffLen: 'int') -> "int":
        r""" 获取子Geometry的解释串"""
        return _gskernel.GsFeatureBuffer_SubCoordinate(self, n, pCoord, nBuffLen)

    def SubCoordinateLength(self, n: 'int') -> "int":
        return _gskernel.GsFeatureBuffer_SubCoordinateLength(self, n)

    def CoordinateDimension(self) -> "int":
        r""" 坐标维度"""
        return _gskernel.GsFeatureBuffer_CoordinateDimension(self)

    def GeometryDimension(self) -> "int":
        r""" 几何维度，0=点，1=线，2=面"""
        return _gskernel.GsFeatureBuffer_GeometryDimension(self)

    def AttributeLength(self) -> "int":
        r""" 属性值的长度"""
        return _gskernel.GsFeatureBuffer_AttributeLength(self)

    def ResetAttribute(self) -> "void":
        r""" 重置属性"""
        return _gskernel.GsFeatureBuffer_ResetAttribute(self)

    def ValueType(self, nColIndex: 'int') -> "GsFieldType":
        r""" 根据列索引获得列类型。"""
        return _gskernel.GsFeatureBuffer_ValueType(self, nColIndex)

    def IntValue(self, nColIndex: 'int') -> "int":
        r""" 获取整数值"""
        return _gskernel.GsFeatureBuffer_IntValue(self, nColIndex)

    def Int64Value(self, nColIndex: 'int') -> "long long":
        r""" 获取整数值"""
        return _gskernel.GsFeatureBuffer_Int64Value(self, nColIndex)

    def StringValue(self, nColIndex: 'int') -> "char const *":
        r""" 获取字符串值"""
        return _gskernel.GsFeatureBuffer_StringValue(self, nColIndex)

    def DoubleValue(self, nColIndex: 'int') -> "double":
        r""" 获取浮点值"""
        return _gskernel.GsFeatureBuffer_DoubleValue(self, nColIndex)

    def BlobValue(self, nColIndex: 'int', buff: 'unsigned char *', nLen: 'int') -> "int":
        return _gskernel.GsFeatureBuffer_BlobValue(self, nColIndex, buff, nLen)

    def BlobValueLength(self, nColIndex: 'int') -> "int":
        r""" 获取Blob值长度"""
        return _gskernel.GsFeatureBuffer_BlobValueLength(self, nColIndex)

    def SetValue(self, *args) -> "void":
        r"""
        *Overload 1:*
        设置整数值

        |

        *Overload 2:*
        设置64位整数值

        |

        *Overload 3:*
        设置字符串

        |

        *Overload 4:*
        设置浮点值

        |

        *Overload 5:*
        设置空值
        """
        return _gskernel.GsFeatureBuffer_SetValue(self, *args)

# Register GsFeatureBuffer in _gskernel:
_gskernel.GsFeatureBuffer_swigregister(GsFeatureBuffer)

class GsFeatureDataIO(object):
    r""" 分析数据读写，通过继承此类以实现"""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    __swig_destroy__ = _gskernel.delete_GsFeatureDataIO

    def GeometryDimension(self) -> "int":
        r""" 获取数据源的几何维度，0=点，1=线，2=面"""
        return _gskernel.GsFeatureDataIO_GeometryDimension(self)

    def OnData(self, pData: 'GsFeatureBuffer') -> "int":
        r""" 获取数据源的几何维度，0=点，1=线，2=面"""
        return _gskernel.GsFeatureDataIO_OnData(self, pData)

    def __init__(self):
        if self.__class__ == GsFeatureDataIO:
            _self = None
        else:
            _self = self
        _gskernel.GsFeatureDataIO_swiginit(self, _gskernel.new_GsFeatureDataIO(_self, ))
    def __disown__(self):
        self.this.disown()
        _gskernel.disown_GsFeatureDataIO(self)
        return weakref.proxy(self)

# Register GsFeatureDataIO in _gskernel:
_gskernel.GsFeatureDataIO_swigregister(GsFeatureDataIO)

class GsFeatureCursor(GsRefObject):
    r""" 地物游标 code{.cpp}  GsFeaturePtr ptrFea = ptrCursor->Next();  do{     DoSomeThing(ptrFea);	  }while(ptrCursor->Next(ptrFea.p); endcode"""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def Next(self, *args) -> "bool":
        r"""
        *Overload 1:*
         获取下一个地物对象 每次回生成一个新的地物对象:rtype: GsSmarterPtr< GsFeature >
        :return: 返回下一个地物对象的实例或者空

        |

        *Overload 2:*
         获取下一个地物对象数据而不用产生新的对象 性能更高的方法，以访问者模式将下一个地物的数据设置到传入的地物对象内部。:type pFea: :py:class:`GsFeature`
        :param pFea: 一个非空地物对象的指针:rtype: boolean
        :return: 返回是否存在下一个地物，如果传入地物对象为空则一定范围false
        """
        return _gskernel.GsFeatureCursor_Next(self, *args)
    __swig_destroy__ = _gskernel.delete_GsFeatureCursor

# Register GsFeatureCursor in _gskernel:
_gskernel.GsFeatureCursor_swigregister(GsFeatureCursor)

class GsRowCursor(GsRefObject):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def Next(self, *args) -> "bool":
        r"""
        *Overload 1:*
         获取下一个行对象 每次回生成一个新的行对象:rtype: GsSmarterPtr< GsRow >
        :return: 返回下一个行对象的实例或者空

        |

        *Overload 2:*
         获取下一个行对象数据而不用产生新的对象 性能更高的方法，以访问者模式将下一个地物的数据设置到传入的行对象内部。:param pFea: 一个非空行对象的指针:rtype: boolean
        :return: 返回是否存在下一个行，如果传入行对象为空则一定范围false
        """
        return _gskernel.GsRowCursor_Next(self, *args)
    __swig_destroy__ = _gskernel.delete_GsRowCursor

# Register GsRowCursor in _gskernel:
_gskernel.GsRowCursor_swigregister(GsRowCursor)

class GsTileBuffer(object):
    r""" 分析瓦片数据封装"""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self):
        _gskernel.GsTileBuffer_swiginit(self, _gskernel.new_GsTileBuffer())
    __swig_destroy__ = _gskernel.delete_GsTileBuffer

    def ReadFromTile(self, pTile: 'GsTile') -> "bool":
        r""" 从瓦片读取数据"""
        return _gskernel.GsTileBuffer_ReadFromTile(self, pTile)

    def WriteToTile(self, pTile: 'GsTile') -> "bool":
        r""" 写入数据到瓦片"""
        return _gskernel.GsTileBuffer_WriteToTile(self, pTile)

    def ID(self, *args) -> "void":
        r"""
        *Overload 1:*
        数据的唯一ID

        |

        *Overload 2:*
        数据的唯一ID
        """
        return _gskernel.GsTileBuffer_ID(self, *args)

    def Level(self, *args) -> "void":
        r"""
        *Overload 1:*
        获取级别

        |

        *Overload 2:*
        设置级别
        """
        return _gskernel.GsTileBuffer_Level(self, *args)

    def Row(self, *args) -> "void":
        r"""
        *Overload 1:*
        获取行

        |

        *Overload 2:*
        设置行
        """
        return _gskernel.GsTileBuffer_Row(self, *args)

    def Col(self, *args) -> "void":
        r"""
        *Overload 1:*
        获取列

        |

        *Overload 2:*
        设置列
        """
        return _gskernel.GsTileBuffer_Col(self, *args)

    def TileType(self, *args) -> "void":
        r"""
        *Overload 1:*
        获取瓦片类型

        |

        *Overload 2:*
        设置瓦片类型
        """
        return _gskernel.GsTileBuffer_TileType(self, *args)

    def TileDataPtr(self, pData: 'signed char *') -> "void":
        r""" 获取瓦片数据指针"""
        return _gskernel.GsTileBuffer_TileDataPtr(self, pData)

    def TileDataLength(self) -> "int":
        r""" 获取瓦片数据长度"""
        return _gskernel.GsTileBuffer_TileDataLength(self)

    def TileData(self, pData: 'signed char const *', nLen: 'int') -> "void":
        r""" 设置瓦片数据"""
        return _gskernel.GsTileBuffer_TileData(self, pData, nLen)

# Register GsTileBuffer in _gskernel:
_gskernel.GsTileBuffer_swigregister(GsTileBuffer)

class GsTileDataIO(object):
    r""" 瓦片数据IO"""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    __swig_destroy__ = _gskernel.delete_GsTileDataIO

    def TileType(self) -> "GsTileEncodingType":
        r""" 获取瓦片类型"""
        return _gskernel.GsTileDataIO_TileType(self)

    def OnData(self, pData: 'GsTileBuffer') -> "int":
        r"""
         输入或者输出数据 :rtype: int
        :return: ,当输入空间数据时返回0标示正常输入一条数据，否则为错误或者输入完成。
        """
        return _gskernel.GsTileDataIO_OnData(self, pData)

    def __init__(self):
        if self.__class__ == GsTileDataIO:
            _self = None
        else:
            _self = self
        _gskernel.GsTileDataIO_swiginit(self, _gskernel.new_GsTileDataIO(_self, ))
    def __disown__(self):
        self.this.disown()
        _gskernel.disown_GsTileDataIO(self)
        return weakref.proxy(self)

# Register GsTileDataIO in _gskernel:
_gskernel.GsTileDataIO_swigregister(GsTileDataIO)

class GsTileCursor(GsRefObject):
    r""" 瓦片游标 code{.cpp}  GsTilePtr ptrTile = ptrCursor->Next();  do{     DoSomeThing(ptrTile);	  }while(ptrCursor->Next(ptrTile.p); endcode"""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def Next(self, *args) -> "bool":
        r"""
        *Overload 1:*
         获取下一个瓦片对象 每次回生成一个新的瓦片对象:rtype: GsSmarterPtr< GsTile >
        :return: 返回下一个瓦片对象的实例或者空

        |

        *Overload 2:*
         获取下一个瓦片对象数据而不用产生新的对象 性能更高的方法，以访问者模式将下一个地物的数据设置到传入的瓦片对象内部。:param pFea: 一个非空瓦片对象的指针:rtype: boolean
        :return: 返回是否存在下一个行，如果传入行对象为空则一定返回false
        """
        return _gskernel.GsTileCursor_Next(self, *args)
    __swig_destroy__ = _gskernel.delete_GsTileCursor

# Register GsTileCursor in _gskernel:
_gskernel.GsTileCursor_swigregister(GsTileCursor)

class GsEnumIDs(GsRefObject):
    r""" 地物类OID枚举器"""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def Next(self) -> "long long":
        r"""
         获取下一个地物的OID 每次得到下一个地物的OID:rtype: int
        :return: 返回下一个地物的OID
        """
        return _gskernel.GsEnumIDs_Next(self)

    def Reset(self) -> "void":
        r""" 重置枚举器 调用Reset后，下次调用Next会得到第一个OID"""
        return _gskernel.GsEnumIDs_Reset(self)
    __swig_destroy__ = _gskernel.delete_GsEnumIDs

# Register GsEnumIDs in _gskernel:
_gskernel.GsEnumIDs_swigregister(GsEnumIDs)

class GsSelectionSet(GsRefObject):
    r""" 选择集"""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def Count(self) -> "unsigned int":
        r"""
         获得选择集中地物的数量 获得选择集中地物的数量:rtype: int
        :return: 返回包含的地物数量
        """
        return _gskernel.GsSelectionSet_Count(self)

    def EnumIDs(self) -> "GsSmarterPtr< GsEnumIDs >":
        r"""
         获取地物OID枚举器 获取选择集中地物OID的集合:rtype: GsSmarterPtr< GsEnumIDs >
        :return: 返回地物OID枚举器
        """
        return _gskernel.GsSelectionSet_EnumIDs(self)

    def Add(self, *args) -> "void":
        r"""
        *Overload 1:*
         往选择集中添加一个OID:type OID: int
        :param OID: 要添加的OID值

        |

        *Overload 2:*
         往选择集中添加多个OID:type pOID: int
        :param pOID: 要添加的多个OID的首地址:type nOIDCount: int
        :param nOIDCount: 要添加的OID的数量
        """
        return _gskernel.GsSelectionSet_Add(self, *args)

    def Clear(self) -> "void":
        r""" 清除所有的OID"""
        return _gskernel.GsSelectionSet_Clear(self)

    def Remove(self, pOID: 'long long *', nOIDCount: 'unsigned int') -> "void":
        r"""
         在选择集中删除多个OID:type pOID: int
        :param pOID: 要删除的多个OID的首地址:type nOIDCount: int
        :param nOIDCount: 要删除的OID的数量
        """
        return _gskernel.GsSelectionSet_Remove(self, pOID, nOIDCount)

    def Search(self, pFilter: 'GsQueryFilter'=None) -> "GsSmarterPtr< GsFeatureCursor >":
        r"""
         在选择集中查询地物:type pFilter: :py:class:`GsQueryFilter`
        :param pFilter: 检索过滤条件:rtype: GsSmarterPtr< GsFeatureCursor >
        :return: 返回地物游标
        """
        return _gskernel.GsSelectionSet_Search(self, pFilter)

    def Target(self) -> "GsFeatureClass *":
        r"""
         获得选择集所属的地物类:rtype: :py:class:`GsFeatureClass`
        :return: 返回地物类
        """
        return _gskernel.GsSelectionSet_Target(self)

    def Select(self, pFilter: 'GsQueryFilter') -> "GsSmarterPtr< GsSelectionSet >":
        r"""
         根据过滤条件并且在当前选择集范围里查询选择集对应的地物类,得到一个新的选择集:type pFilter: :py:class:`GsQueryFilter`
        :param pFilter: 检索过滤条件:rtype: GsSmarterPtr< GsSelectionSet >
        :return: 返回新的选择集
        """
        return _gskernel.GsSelectionSet_Select(self, pFilter)

    def Combine(self, pSrcSet: 'GsSelectionSet', eOperation: 'GsSelectionSetOperation') -> "GsSmarterPtr< GsSelectionSet >":
        r"""
         根据条件将当前 OID 选择集和另一个 OID 选择集进行集合操作，并得到新的 OID 选择集对象:type pSrcSet: :py:class:`GsSelectionSet`
        :param pSrcSet: 需要合并操作的选择集:type eOperation: int
        :param eOperation: 合并操作类型 :rtype: GsSmarterPtr< GsSelectionSet >
        :return: 返回新的选择集
        """
        return _gskernel.GsSelectionSet_Combine(self, pSrcSet, eOperation)
    __swig_destroy__ = _gskernel.delete_GsSelectionSet

# Register GsSelectionSet in _gskernel:
_gskernel.GsSelectionSet_swigregister(GsSelectionSet)

class GsTileClass(GsGeoDataRoom):
    r""" 瓦片数据集 code{.cpp}  GsTilePtr ptrTile = ptrTileClass->CreateTile();  ptrTile->Row(r);	 ptrTile->Level(l);	 ptrTile->Col(c);  ptrTile->Store();  GsTileCursorPtr ptrCursor=ptrTileClass->Search();  GsTilePtr ptrTile = ptrCursor->Next();  do{     DoSomeThing(ptrTile);	  }while(ptrCursor->Next(ptrTile.p); endcode"""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __swig_destroy__ = _gskernel.delete_GsTileClass

    def CreateTile(self) -> "GsSmarterPtr< GsTile >":
        r"""
         创建一个新的Tile对象 :rtype: GsSmarterPtr< GsTile >
        :return: 返回Tile对象的指针
        """
        return _gskernel.GsTileClass_CreateTile(self)

    def Search(self, *args) -> "GsSmarterPtr< GsTileCursor >":
        r"""
        *Overload 1:*
         检索所有的瓦片 :rtype: GsSmarterPtr< GsTileCursor >
        :return: 返回瓦片游标

        |

        *Overload 2:*
         检索某个级别到某个级别的瓦片 :type nStartLevel: int
        :param nStartLevel: 开始的级别 :type nEndLevel: int
        :param nEndLevel: 结束的级别 :rtype: GsSmarterPtr< GsTileCursor >
        :return: 返回瓦片游标

        |

        *Overload 3:*
         检索某个级别某个行列范围的瓦片 :type nLevel: int
        :param nLevel: 检索的级别 :type nStartRow: int
        :param nStartRow: 开始行 :type nStartCol: int
        :param nStartCol: 开始列 :type nEndRow: int
        :param nEndRow: 结束行 :type nEndCol: int
        :param nEndCol: 开始列 :rtype: GsSmarterPtr< GsTileCursor >
        :return: 返回瓦片游标
        """
        return _gskernel.GsTileClass_Search(self, *args)

    def Pyramid(self) -> "GsPyramid *":
        r"""
         获取瓦片类的金字塔。 :rtype: :py:class:`GsPyramid`
        :return: 返回金字塔对象指针
        """
        return _gskernel.GsTileClass_Pyramid(self)

    def ChangePyramid(self, pPyramid: 'GsPyramid') -> "bool":
        r"""
         修改瓦片类的金字塔 :type pPyramid: :py:class:`GsPyramid`
        :param pPyramid: 要修改的金字塔对象 :rtype: boolean
        :return: 返回修改是否成功
        """
        return _gskernel.GsTileClass_ChangePyramid(self, pPyramid)

    def TileColumnInfo(self) -> "GsTileColumnInfo":
        r"""
         获取瓦片基本元信息:rtype: :py:class:`GsTileColumnInfo`
        :return: 返回原信息对象
        """
        return _gskernel.GsTileClass_TileColumnInfo(self)

    def TileCount(self, *args) -> "long long":
        r"""
        *Overload 1:*
         获取所有瓦片的数量:rtype: int
        :return: 返回瓦片总数

        |

        *Overload 2:*
         获取某个级别瓦片的数量 :type nStartLevel: int
        :param nStartLevel: 开始级别 :type nEndLevel: int
        :param nEndLevel: 结束级别:rtype: int
        :return: 返回该级别瓦片总数

        |

        *Overload 3:*
         检索某个级别某个行列范围的瓦片 :type nLevel: int
        :param nLevel: 检索的级别 :type nStartRow: int
        :param nStartRow: 开始行 :type nStartCol: int
        :param nStartCol: 开始列 :type nEndRow: int
        :param nEndRow: 结束行 :type nEndCol: int
        :param nEndCol: 开始列:rtype: int
        :return: 返回该级别瓦片总数
        """
        return _gskernel.GsTileClass_TileCount(self, *args)

    def Tile(self, *args) -> "bool":
        r"""
        *Overload 1:*
         根据瓦片行列号检索一个瓦片 :type nLevel: int
        :param nLevel: 瓦片的级别 :type nRow: int
        :param nRow: 瓦片的行 :type nCol: int
        :param nCol: 瓦片的列:rtype: GsSmarterPtr< GsTile >
        :return: 返回该瓦片或者空

        |

        *Overload 2:*
         根据瓦片行列号检索一个瓦片 :type nLevel: int
        :param nLevel: 瓦片的级别 :type nRow: int
        :param nRow: 瓦片的行 :type nCol: int
        :param nCol: 瓦片的列 :type pTile: :py:class:`GsTile`
        :param pTile: 瓦片:rtype: boolean
        :return: 返回瓦片是否存在
        """
        return _gskernel.GsTileClass_Tile(self, *args)

    @staticmethod
    def CanDowncast(b: 'GsGeoDataRoom') -> "bool":
        return _gskernel.GsTileClass_CanDowncast(b)

    @staticmethod
    def DowncastTo(b: 'GsGeoDataRoom') -> "GsSmarterPtr< GsTileClass >":
        return _gskernel.GsTileClass_DowncastTo(b)

# Register GsTileClass in _gskernel:
_gskernel.GsTileClass_swigregister(GsTileClass)

def GsTileClass_CanDowncast(b: 'GsGeoDataRoom') -> "bool":
    return _gskernel.GsTileClass_CanDowncast(b)

def GsTileClass_DowncastTo(b: 'GsGeoDataRoom') -> "GsSmarterPtr< GsTileClass >":
    return _gskernel.GsTileClass_DowncastTo(b)

class GsTMSTileClass(GsTileClass):
    r""" 基于瓦片化的地图服务的瓦片数据集封装。"""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __swig_destroy__ = _gskernel.delete_GsTMSTileClass

    def TileType(self, *args) -> "void":
        r"""
        *Overload 1:*
        获取瓦片类型

        |

        *Overload 2:*
        设置瓦片类型
        """
        return _gskernel.GsTMSTileClass_TileType(self, *args)

    def UrlTemplate(self, *args) -> "void":
        r"""
        *Overload 1:*
        获取TMS的url地址模板

        |

        *Overload 2:*
        设置TMS的url地址模板 地址模板如http://xxx.server.com/${Level}/${Row}/${Col} ${Level}代表瓦片级别 ${Row}代表瓦片行 ${Col}代表瓦片列
        """
        return _gskernel.GsTMSTileClass_UrlTemplate(self, *args)

    def Cache(self, *args) -> "void":
        r"""
        *Overload 1:*
        获取缓存瓦片数据的TileClass对象

        |

        *Overload 2:*
        设置缓存瓦片数据的TileClass
        """
        return _gskernel.GsTMSTileClass_Cache(self, *args)

    @staticmethod
    def CanDowncast(b: 'GsTileClass') -> "bool":
        return _gskernel.GsTMSTileClass_CanDowncast(b)

    @staticmethod
    def DowncastTo(b: 'GsTileClass') -> "GsSmarterPtr< GsTMSTileClass >":
        return _gskernel.GsTMSTileClass_DowncastTo(b)

# Register GsTMSTileClass in _gskernel:
_gskernel.GsTMSTileClass_swigregister(GsTMSTileClass)

def GsTMSTileClass_CanDowncast(b: 'GsTileClass') -> "bool":
    return _gskernel.GsTMSTileClass_CanDowncast(b)

def GsTMSTileClass_DowncastTo(b: 'GsTileClass') -> "GsSmarterPtr< GsTMSTileClass >":
    return _gskernel.GsTMSTileClass_DowncastTo(b)

class GsRowClass(GsDataRoom):
    r""" 二维表数据集"""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __swig_destroy__ = _gskernel.delete_GsRowClass

    def Search(self, *args) -> "GsSmarterPtr< GsRowCursor >":
        r"""
        *Overload 1:*
         根据查询过滤条件查询:type pFilter: :py:class:`GsQueryFilter`
        :param pFilter: 检索过滤条件:rtype: GsSmarterPtr< GsRowCursor >
        :return: 返回检索结果的行游标对象

        |

        *Overload 2:*
         根据Where子句进行查询:type strWhere: string
        :param strWhere: 要检索的where子句:rtype: GsSmarterPtr< GsRowCursor >
        :return: 返回检索结果的行游标对象
        """
        return _gskernel.GsRowClass_Search(self, *args)

    def Fields(self) -> "GsFields":
        r"""
         获取二维表的字段信息:rtype: :py:class:`GsFields`
        :return: 字段信息
        """
        return _gskernel.GsRowClass_Fields(self)

    def CreateRow(self) -> "GsSmarterPtr< GsRow >":
        r"""
         创建的一个新的属性对象:rtype: GsSmarterPtr< GsRow >
        :return: 返回新建的属性对象指针
        """
        return _gskernel.GsRowClass_CreateRow(self)

    def Row(self, *args) -> "bool":
        r"""
        *Overload 1:*
         根据输入的oid获取属性对象:rtype: GsSmarterPtr< GsRow >
        :return: 返回属性对象

        |

        *Overload 2:*
         根据输入的oid获取属性对象 :type nOID: int
        :param nOID: 输入的OID :type pRow: :py:class:`GsRow`
        :param pRow: 传入属性对象指针，用于接收属性数据，不能为空:rtype: boolean
        :return: 返回是否成功获取属性对象。
        """
        return _gskernel.GsRowClass_Row(self, *args)

    def RowCount(self, pFilter: 'GsQueryFilter'=None) -> "long long":
        r"""
         根据查询条件获取属性的数量 :type pFilter: :py:class:`GsQueryFilter`
        :param pFilter: 空间或者属性的查询条件:rtype: int
        :return: 返回满足查询条件的属性的数量
        """
        return _gskernel.GsRowClass_RowCount(self, pFilter)

    @staticmethod
    def CanDowncast(b: 'GsDataRoom') -> "bool":
        return _gskernel.GsRowClass_CanDowncast(b)

    @staticmethod
    def DowncastTo(b: 'GsDataRoom') -> "GsSmarterPtr< GsRowClass >":
        return _gskernel.GsRowClass_DowncastTo(b)

# Register GsRowClass in _gskernel:
_gskernel.GsRowClass_swigregister(GsRowClass)

def GsRowClass_CanDowncast(b: 'GsDataRoom') -> "bool":
    return _gskernel.GsRowClass_CanDowncast(b)

def GsRowClass_DowncastTo(b: 'GsDataRoom') -> "GsSmarterPtr< GsRowClass >":
    return _gskernel.GsRowClass_DowncastTo(b)

class GsFeatureClass(GsGeoDataRoom):
    r""" 矢量地物类 GIS点、线、面、注记类型的矢量数据读写对象"""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __swig_destroy__ = _gskernel.delete_GsFeatureClass

    def Fields(self) -> "GsFields":
        r"""
         获取地物类的字段信息:rtype: :py:class:`GsFields`
        :return: 字段信息
        """
        return _gskernel.GsFeatureClass_Fields(self)

    def CreateFeature(self) -> "GsSmarterPtr< GsFeature >":
        r"""
         创建的一个新的地物对象:rtype: GsSmarterPtr< GsFeature >
        :return: 返回新建的地物对象指针
        """
        return _gskernel.GsFeatureClass_CreateFeature(self)

    def Feature(self, *args) -> "bool":
        r"""
        *Overload 1:*
         根据输入的oid获取地物对象:rtype: GsSmarterPtr< GsFeature >
        :return: 返回地物对象

        |

        *Overload 2:*
         根据输入的oid获取地物对象 :type nOID: int
        :param nOID: 输入的OID :type pFea: :py:class:`GsFeature`
        :param pFea: 传入地物对象指针，用于接收地物数据，不能为空:rtype: boolean
        :return: 返回是否成功获取地物对象。
        """
        return _gskernel.GsFeatureClass_Feature(self, *args)

    def Search(self, *args) -> "GsSmarterPtr< GsFeatureCursor >":
        r"""
        *Overload 1:*
         根据查询过滤条件粗查:type pFilter: :py:class:`GsQueryFilter`
        :param pFilter: 检索过滤条件可以是GsSpatialQueryFilter或者GsQueryFilter类型:rtype: GsSmarterPtr< GsFeatureCursor >
        :return: 返回检索结果的地物游标对象

        |

        *Overload 2:*
         根据几何空间范围进行粗查:type pGeo: :py:class:`GsGeometry`
        :param pGeo: 要检索的几何空间范围:rtype: GsSmarterPtr< GsFeatureCursor >
        :return: 返回检索结果的地物游标对象

        |

        *Overload 3:*
         根据Where子句进行粗查:type strWhere: string
        :param strWhere: 要检索的where子句:rtype: GsSmarterPtr< GsFeatureCursor >
        :return: 返回检索结果的地物游标对象

        |

        *Overload 4:*
         根据where子句和几何空间范围进行粗查:type pGeo: :py:class:`GsGeometry`
        :param pGeo: 要检索的空间范围:type strWhere: string
        :param strWhere: 要检索的where子句:rtype: GsSmarterPtr< GsFeatureCursor >
        :return: 返回检索结果的地物游标对象
        """
        return _gskernel.GsFeatureClass_Search(self, *args)

    def GeometryType(self) -> "GsGeometryType":
        r"""
         地物类的几何类型:rtype: int
        :return: 返回地物类的几何类型
        """
        return _gskernel.GsFeatureClass_GeometryType(self)

    def CreateSpatialIndex(self) -> "bool":
        r"""
         创建空间索引:rtype: boolean
        :return: 返回创建索引是否成功
        """
        return _gskernel.GsFeatureClass_CreateSpatialIndex(self)

    def DeleteSpatialIndex(self) -> "bool":
        r"""
         删除空间索引:rtype: boolean
        :return: 返回删除索引是否成功
        """
        return _gskernel.GsFeatureClass_DeleteSpatialIndex(self)

    def HasSpatialIndex(self) -> "bool":
        r"""
         是否存在空间索引:rtype: boolean
        :return: 返回空间索引是否存在
        """
        return _gskernel.GsFeatureClass_HasSpatialIndex(self)

    def Select(self, pFilter: 'GsQueryFilter'=None) -> "GsSmarterPtr< GsSelectionSet >":
        r"""
         根据根据where子句和几何空间范围进行选择:rtype: GsSmarterPtr< GsSelectionSet >
        :return: 返回删除索引是否成功
        """
        return _gskernel.GsFeatureClass_Select(self, pFilter)

    def GeometryColumnInfo(self) -> "GsGeometryColumnInfo":
        r"""
         获取基本几何信息:rtype: :py:class:`GsGeometryColumnInfo`
        :return: 返回基本几何信息对象
        """
        return _gskernel.GsFeatureClass_GeometryColumnInfo(self)

    def FeatureCount(self, pFilter: 'GsQueryFilter'=None) -> "long long":
        r"""
         根据查询条件获取地物的数量 :type pFilter: :py:class:`GsQueryFilter`
        :param pFilter: 空间或者属性的查询条件:rtype: int
        :return: 返回满足查询条件的地物的数量
        """
        return _gskernel.GsFeatureClass_FeatureCount(self, pFilter)

    @staticmethod
    def CanDowncast(b: 'GsGeoDataRoom') -> "bool":
        return _gskernel.GsFeatureClass_CanDowncast(b)

    @staticmethod
    def DowncastTo(b: 'GsGeoDataRoom') -> "GsSmarterPtr< GsFeatureClass >":
        return _gskernel.GsFeatureClass_DowncastTo(b)

# Register GsFeatureClass in _gskernel:
_gskernel.GsFeatureClass_swigregister(GsFeatureClass)

def GsFeatureClass_CanDowncast(b: 'GsGeoDataRoom') -> "bool":
    return _gskernel.GsFeatureClass_CanDowncast(b)

def GsFeatureClass_DowncastTo(b: 'GsGeoDataRoom') -> "GsSmarterPtr< GsFeatureClass >":
    return _gskernel.GsFeatureClass_DowncastTo(b)

class GsProxyFeatureClassIO(GsRefObject):
    r""" 代理地物类回调"""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self):
        if self.__class__ == GsProxyFeatureClassIO:
            _self = None
        else:
            _self = self
        _gskernel.GsProxyFeatureClassIO_swiginit(self, _gskernel.new_GsProxyFeatureClassIO(_self, ))
    __swig_destroy__ = _gskernel.delete_GsProxyFeatureClassIO

    def Search(self, pFilter: 'GsQueryFilter') -> "GsFeatureDataIO *":
        r""" 搜索一个地物类返回数据IO"""
        return _gskernel.GsProxyFeatureClassIO_Search(self, pFilter)
    def __disown__(self):
        self.this.disown()
        _gskernel.disown_GsProxyFeatureClassIO(self)
        return weakref.proxy(self)

# Register GsProxyFeatureClassIO in _gskernel:
_gskernel.GsProxyFeatureClassIO_swigregister(GsProxyFeatureClassIO)

class GsProxyFeatureClass(GsFeatureClass):
    r""" 用于用户实现将任意数据源实现为地物类 通过用户实现简单的回调接口实现读取任意数据的能力"""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, name: 'char const *'):
        _gskernel.GsProxyFeatureClass_swiginit(self, _gskernel.new_GsProxyFeatureClass(name))
    __swig_destroy__ = _gskernel.delete_GsProxyFeatureClass

    def DataIO(self, *args) -> "GsProxyFeatureClassIO *":
        r"""
        *Overload 1:*
        设置数据回调IO对象

        |

        *Overload 2:*
        获取数据回调IO对象
        """
        return _gskernel.GsProxyFeatureClass_DataIO(self, *args)

    def Fields(self, *args) -> "GsFields":
        r"""
        *Overload 1:*
         获取地物类的字段信息:rtype: void
        :return: 字段信息

        |

        *Overload 2:*
         获取地物类的字段信息:rtype: :py:class:`GsFields`
        :return: 字段信息
        """
        return _gskernel.GsProxyFeatureClass_Fields(self, *args)

    def CreateFeature(self) -> "GsSmarterPtr< GsFeature >":
        r"""
         创建的一个新的地物对象:rtype: GsSmarterPtr< GsFeature >
        :return: 返回新建的地物对象指针
        """
        return _gskernel.GsProxyFeatureClass_CreateFeature(self)

    def Feature(self, *args) -> "bool":
        r"""
        *Overload 1:*
         根据输入的oid获取地物对象:rtype: GsSmarterPtr< GsFeature >
        :return: 返回地物对象

        |

        *Overload 2:*
         根据输入的oid获取地物对象 :type nOID: int
        :param nOID: 输入的OID :type pFea: :py:class:`GsFeature`
        :param pFea: 传入地物对象指针，用于接收地物数据，不能为空:rtype: boolean
        :return: 返回是否成功获取地物对象
        """
        return _gskernel.GsProxyFeatureClass_Feature(self, *args)

    def Search(self, pFilter: 'GsQueryFilter'=None) -> "GsSmarterPtr< GsFeatureCursor >":
        r"""
         根据查询过滤条件粗查:type pFilter: :py:class:`GsQueryFilter`
        :param pFilter: 检索过滤条件可以是GsSpatialQueryFilter或者GsQueryFilter类型:rtype: GsSmarterPtr< GsFeatureCursor >
        :return: 返回检索结果的地物游标对象
        """
        return _gskernel.GsProxyFeatureClass_Search(self, pFilter)

    def GeometryType(self) -> "GsGeometryType":
        r"""
         地物类的几何类型:rtype: int
        :return: 返回地物类的几何类型
        """
        return _gskernel.GsProxyFeatureClass_GeometryType(self)

    def CreateSpatialIndex(self) -> "bool":
        r"""
         创建空间索引:rtype: boolean
        :return: 返回创建索引是否成功
        """
        return _gskernel.GsProxyFeatureClass_CreateSpatialIndex(self)

    def DeleteSpatialIndex(self) -> "bool":
        r"""
         删除空间索引:rtype: boolean
        :return: 返回删除索引是否成功
        """
        return _gskernel.GsProxyFeatureClass_DeleteSpatialIndex(self)

    def HasSpatialIndex(self) -> "bool":
        r"""
         是否存在空间索引:rtype: boolean
        :return: 返回空间索引是否存在
        """
        return _gskernel.GsProxyFeatureClass_HasSpatialIndex(self)

    def Select(self, pFilter: 'GsQueryFilter'=None) -> "GsSmarterPtr< GsSelectionSet >":
        r"""
         根据根据where子句和几何空间范围进行选择:rtype: GsSmarterPtr< GsSelectionSet >
        :return: 返回删除索引是否成功
        """
        return _gskernel.GsProxyFeatureClass_Select(self, pFilter)

    def FeatureCount(self, pFilter: 'GsQueryFilter'=None) -> "long long":
        r"""
         根据查询条件获取地物的数量 :type pFilter: :py:class:`GsQueryFilter`
        :param pFilter: 空间或者属性的查询条件:rtype: int
        :return: 返回满足查询条件的地物的数量
        """
        return _gskernel.GsProxyFeatureClass_FeatureCount(self, pFilter)

    def GeometryColumnInfo(self, *args) -> "bool":
        r"""
        *Overload 1:*
         获取基本几何信息:rtype: :py:class:`GsGeometryColumnInfo`
        :return: 返回基本几何信息对象

        |

        *Overload 2:*
         设置基本几何信息 :type geoInfo: :py:class:`GsGeometryColumnInfo`
        :param geoInfo: 几何信息:rtype: boolean
        :return: 返回是否设置成功
        """
        return _gskernel.GsProxyFeatureClass_GeometryColumnInfo(self, *args)

    def Extent(self, *args) -> "bool":
        r"""
        *Overload 1:*
         获取最大外接矩形范围:type bForce: boolean
        :param bForce: 是否强制获取，强制获取将会从数据表中统计最大范围:rtype: :py:class:`GsBox`
        :return: 返回矩形对象

        |

        *Overload 2:*
         设置最大外接矩形范围:type box: :py:class:`GsBox`
        :param box: 要设置的外接矩形box:rtype: boolean
        :return: 返回矩形对象
        """
        return _gskernel.GsProxyFeatureClass_Extent(self, *args)

    def SpatialReference(self, *args) -> "void":
        r"""
        *Overload 1:*
         获取数据集的空间参考:rtype: :py:class:`GsSpatialReference`
        :return: 返回空间参考对象的指针

        |

        *Overload 2:*
         设置空间参考
        """
        return _gskernel.GsProxyFeatureClass_SpatialReference(self, *args)

# Register GsProxyFeatureClass in _gskernel:
_gskernel.GsProxyFeatureClass_swigregister(GsProxyFeatureClass)

class GsProxyTileClassIO(GsRefObject):
    r""" 代理瓦片类回调"""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    __swig_destroy__ = _gskernel.delete_GsProxyTileClassIO

    def Search(self, *args) -> "GsTileDataIO *":
        r"""
        *Overload 1:*
        搜索一个瓦片类返回数据IO

        |

        *Overload 2:*
        搜索一个瓦片类返回数据IO

        |

        *Overload 3:*
        搜索一个瓦片类返回数据IO
        """
        return _gskernel.GsProxyTileClassIO_Search(self, *args)

    def __init__(self):
        if self.__class__ == GsProxyTileClassIO:
            _self = None
        else:
            _self = self
        _gskernel.GsProxyTileClassIO_swiginit(self, _gskernel.new_GsProxyTileClassIO(_self, ))
    def __disown__(self):
        self.this.disown()
        _gskernel.disown_GsProxyTileClassIO(self)
        return weakref.proxy(self)

# Register GsProxyTileClassIO in _gskernel:
_gskernel.GsProxyTileClassIO_swigregister(GsProxyTileClassIO)

class GsProxyTileClass(GsTileClass):
    r""" 用于用户实现将任意数据源实现为瓦片数据 通过用户实现简单的回调接口实现读取任意数据的能力"""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, name: 'char const *'):
        _gskernel.GsProxyTileClass_swiginit(self, _gskernel.new_GsProxyTileClass(name))
    __swig_destroy__ = _gskernel.delete_GsProxyTileClass

    def DataIO(self, *args) -> "GsProxyTileClassIO *":
        r"""
        *Overload 1:*
        设置数据回调IO对象

        |

        *Overload 2:*
        获取数据回调IO对象
        """
        return _gskernel.GsProxyTileClass_DataIO(self, *args)

    def CreateTile(self) -> "GsSmarterPtr< GsTile >":
        r"""
         创建一个新的Tile对象 :rtype: GsSmarterPtr< GsTile >
        :return: 返回Tile对象的指针
        """
        return _gskernel.GsProxyTileClass_CreateTile(self)

    def Search(self, *args) -> "GsSmarterPtr< GsTileCursor >":
        r"""
        *Overload 1:*
         检索所有的瓦片 :rtype: GsSmarterPtr< GsTileCursor >
        :return: 返回瓦片游标

        |

        *Overload 2:*
         检索某个级别到某个级别的瓦片 :type nStartLevel: int
        :param nStartLevel: 开始的级别 :type nEndLevel: int
        :param nEndLevel: 结束的级别 :rtype: GsSmarterPtr< GsTileCursor >
        :return: 返回瓦片游标

        |

        *Overload 3:*
         检索某个级别某个行列范围的瓦片 :type nLevel: int
        :param nLevel: 检索的级别 :type nStartRow: int
        :param nStartRow: 开始行 :type nStartCol: int
        :param nStartCol: 开始列 :type nEndRow: int
        :param nEndRow: 结束行 :type nEndCol: int
        :param nEndCol: 开始列 :rtype: GsSmarterPtr< GsTileCursor >
        :return: 返回瓦片游标
        """
        return _gskernel.GsProxyTileClass_Search(self, *args)

    def Pyramid(self) -> "GsPyramid *":
        r"""
         获取瓦片类的金字塔 :rtype: :py:class:`GsPyramid`
        :return: 返回金字塔对象指针
        """
        return _gskernel.GsProxyTileClass_Pyramid(self)

    def ChangePyramid(self, pPyramid: 'GsPyramid') -> "bool":
        r"""
         修改瓦片类的金字塔 :type pPyramid: :py:class:`GsPyramid`
        :param pPyramid: 要修改的金字塔对象 :rtype: boolean
        :return: 返回修改是否成功
        """
        return _gskernel.GsProxyTileClass_ChangePyramid(self, pPyramid)

    def TileColumnInfo(self, *args) -> "bool":
        r"""
        *Overload 1:*
         获取瓦片基本元信息 :rtype: :py:class:`GsTileColumnInfo`
        :return: 返回原信息对象

        |

        *Overload 2:*
         设置瓦片基本元信息 :type tileinfo: :py:class:`GsTileColumnInfo`
        :param tileinfo: 要修改的瓦片元信息对象 :rtype: boolean
        :return: 返回是否设置成功
        """
        return _gskernel.GsProxyTileClass_TileColumnInfo(self, *args)

    def TileCount(self, *args) -> "long long":
        r"""
        *Overload 1:*
         获取所有瓦片的数量:rtype: int
        :return: 返回瓦片总数

        |

        *Overload 2:*
         获取某个级别瓦片的数量 :type nStartLevel: int
        :param nStartLevel: 开始级别 :type nEndLevel: int
        :param nEndLevel: 结束级别 :rtype: int
        :return: 返回该级别瓦片总数

        |

        *Overload 3:*
         检索某个级别某个行列范围的瓦片 :type nLevel: int
        :param nLevel: 检索的级别 :type nStartRow: int
        :param nStartRow: 开始行 :type nStartCol: int
        :param nStartCol: 开始列 :type nEndRow: int
        :param nEndRow: 结束行 :type nEndCol: int
        :param nEndCol: 开始列 :rtype: int
        :return: 返回该级别瓦片总数
        """
        return _gskernel.GsProxyTileClass_TileCount(self, *args)

    def Extent(self, *args) -> "bool":
        r"""
        *Overload 1:*
         获取最大外接矩形范围 :type bForce: boolean
        :param bForce: 是否强制获取，强制获取将会从数据表中统计最大范围 :rtype: :py:class:`GsBox`
        :return: 返回矩形对象

        |

        *Overload 2:*
         设置最大外接矩形范围 :type box: :py:class:`GsBox`
        :param box: 要设置的外接矩形box :rtype: boolean
        :return: 返回矩形对象
        """
        return _gskernel.GsProxyTileClass_Extent(self, *args)

    def SpatialReference(self, *args) -> "void":
        r"""
        *Overload 1:*
         获取数据集的空间参考 :rtype: :py:class:`GsSpatialReference`
        :return: 返回空间参考对象的指针

        |

        *Overload 2:*
         设置空间参考
        """
        return _gskernel.GsProxyTileClass_SpatialReference(self, *args)

    def Type(self) -> "GsDataRoomType":
        r"""
         数据集类型 :rtype: int
        :return: 返回数据集对象的类型
        """
        return _gskernel.GsProxyTileClass_Type(self)

    def Delete(self) -> "bool":
        r"""
         删除 :rtype: boolean
        :return: 返回是否删除成功
        """
        return _gskernel.GsProxyTileClass_Delete(self)

# Register GsProxyTileClass in _gskernel:
_gskernel.GsProxyTileClass_swigregister(GsProxyTileClass)

eUndefinedBand = _gskernel.eUndefinedBand
r""" 未定义波段"""
eGrayIndexBand = _gskernel.eGrayIndexBand
r""" Greyscale灰度索引"""
ePaletteIndexBand = _gskernel.ePaletteIndexBand
r""" Paletted 调色板索引波段"""
eRedBand = _gskernel.eRedBand
r""" RGBA 红色波段"""
eGreenBand = _gskernel.eGreenBand
r""" RGBA 绿色波段"""
eBlueBand = _gskernel.eBlueBand
r""" RGBA 蓝色波段"""
eAlphaBand = _gskernel.eAlphaBand
r""" RGBA 透明波段，0标示透明，255标示不透明"""
eHueBand = _gskernel.eHueBand
r""" HLS Hue波段"""
eSaturationBand = _gskernel.eSaturationBand
r""" HLS Saturation波段"""
eLightnessBand = _gskernel.eLightnessBand
r""" HLS Lightness波段"""
eCyanBand = _gskernel.eCyanBand
r""" CMYK Cyan波段"""
eMagentaBand = _gskernel.eMagentaBand
r""" CMYK Magenta波段"""
eYellowBand = _gskernel.eYellowBand
r""" CMYK Yellow波段"""
eBlackBand = _gskernel.eBlackBand
r""" CMLY Magenta波段"""
eYCbCr_YBand = _gskernel.eYCbCr_YBand
r""" YCbCr Y亮度波段"""
eYCbCr_CbBand = _gskernel.eYCbCr_CbBand
r""" YCbCr Cb蓝色偏移量波段"""
eYCbCr_CrBand = _gskernel.eYCbCr_CrBand
r""" YCbCr Cr红色偏移量波段"""
eNSDTF_DOM = _gskernel.eNSDTF_DOM
eGTiff = _gskernel.eGTiff
eUnknownRDT = _gskernel.eUnknownRDT
eByteRDT = _gskernel.eByteRDT
eUInt16RDT = _gskernel.eUInt16RDT
eInt16RDT = _gskernel.eInt16RDT
eUInt32RDT = _gskernel.eUInt32RDT
eInt32RDT = _gskernel.eInt32RDT
eFloat32RDT = _gskernel.eFloat32RDT
eFloat64RDT = _gskernel.eFloat64RDT
eCInt16RDT = _gskernel.eCInt16RDT
eCInt32RDT = _gskernel.eCInt32RDT
eCFloat32RDT = _gskernel.eCFloat32RDT
eCFloat64RDT = _gskernel.eCFloat64RDT
eGrayColorType = _gskernel.eGrayColorType
eRGBColorType = _gskernel.eRGBColorType
eCMYKColorType = _gskernel.eCMYKColorType
eHLSColorType = _gskernel.eHLSColorType
eNearestNeighbour = _gskernel.eNearestNeighbour
eBilinear = _gskernel.eBilinear
eCubic = _gskernel.eCubic
eCubicSpline = _gskernel.eCubicSpline
eLanczos = _gskernel.eLanczos
eAverage = _gskernel.eAverage
eMode = _gskernel.eMode
eGauss = _gskernel.eGauss
class GsColorTable(object):
    r""" 调色板 调色板颜色每2个字节(short)标识一个颜色波段"""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    ColorType = property(_gskernel.GsColorTable_ColorType_get, _gskernel.GsColorTable_ColorType_set, doc=r""" 调色板的颜色类型""")
    ColorTable = property(_gskernel.GsColorTable_ColorTable_get, _gskernel.GsColorTable_ColorTable_set, doc=r""" 调色板颜色""")

    def IsValid(self) -> "bool":
        r""" 是否是有效的颜色表"""
        return _gskernel.GsColorTable_IsValid(self)

    def __init__(self):
        _gskernel.GsColorTable_swiginit(self, _gskernel.new_GsColorTable())
    __swig_destroy__ = _gskernel.delete_GsColorTable

# Register GsColorTable in _gskernel:
_gskernel.GsColorTable_swigregister(GsColorTable)

class GsRasterColumnInfo(object):
    r"""栅格类基本信息"""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    XYDomain = property(_gskernel.GsRasterColumnInfo_XYDomain_get, _gskernel.GsRasterColumnInfo_XYDomain_set, doc=r"""X，Y维度范围""")
    Width = property(_gskernel.GsRasterColumnInfo_Width_get, _gskernel.GsRasterColumnInfo_Width_set, doc=r"""像素宽度""")
    Height = property(_gskernel.GsRasterColumnInfo_Height_get, _gskernel.GsRasterColumnInfo_Height_set, doc=r"""像素高度""")
    BlockWidth = property(_gskernel.GsRasterColumnInfo_BlockWidth_get, _gskernel.GsRasterColumnInfo_BlockWidth_set, doc=r"""数据存储块宽度大小""")
    BlockHeight = property(_gskernel.GsRasterColumnInfo_BlockHeight_get, _gskernel.GsRasterColumnInfo_BlockHeight_set, doc=r"""数据存储块高度大小""")
    GeoTransform = property(_gskernel.GsRasterColumnInfo_GeoTransform_get, _gskernel.GsRasterColumnInfo_GeoTransform_set, doc=r"""数据分辨率和起始点信息""")
    DataType = property(_gskernel.GsRasterColumnInfo_DataType_get, _gskernel.GsRasterColumnInfo_DataType_set, doc=r"""波段数据类型""")

    def BandTypes(self, *args) -> "void":
        return _gskernel.GsRasterColumnInfo_BandTypes(self, *args)

    def __init__(self, *args):
        r"""
        *Overload 1:*
        缺省构造函数

        |

        *Overload 2:*
        拷贝构造函数

        |

        *Overload 3:*
        全部构造
        """
        _gskernel.GsRasterColumnInfo_swiginit(self, _gskernel.new_GsRasterColumnInfo(*args))

    def IsValid(self) -> "bool":
        r"""是否有效"""
        return _gskernel.GsRasterColumnInfo_IsValid(self)
    __swig_destroy__ = _gskernel.delete_GsRasterColumnInfo

# Register GsRasterColumnInfo in _gskernel:
_gskernel.GsRasterColumnInfo_swigregister(GsRasterColumnInfo)

class GsRasterBand(GsRefObject):
    r""" 栅格波段"""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _gskernel.delete_GsRasterBand

    def RasterClass(self) -> "GsRasterClass *":
        r""" 波段所属的栅格类"""
        return _gskernel.GsRasterBand_RasterClass(self)

    def BandType(self) -> "GsRasterBandType":
        r""" 波段的名称、类型或者为用途"""
        return _gskernel.GsRasterBand_BandType(self)

    def Minimum(self) -> "double":
        r""" 最小值"""
        return _gskernel.GsRasterBand_Minimum(self)

    def Maximum(self) -> "double":
        r""" 最大值"""
        return _gskernel.GsRasterBand_Maximum(self)

    def NoDataValue(self) -> "double":
        r""" 无效值"""
        return _gskernel.GsRasterBand_NoDataValue(self)

    def Index(self) -> "int":
        r""" 波段的的索引号"""
        return _gskernel.GsRasterBand_Index(self)

    def BandDataType(self) -> "GsRasterDataType":
        r""" 波段的数据类型"""
        return _gskernel.GsRasterBand_BandDataType(self)

    @staticmethod
    def RasterDataTypeBitSize(t: 'GsRasterDataType') -> "int":
        r""" 波段的数类型bit位大小"""
        return _gskernel.GsRasterBand_RasterDataTypeBitSize(t)

    def ColorTable(self) -> "GsColorTable":
        r""" 获取调色板、颜色表"""
        return _gskernel.GsRasterBand_ColorTable(self)

# Register GsRasterBand in _gskernel:
_gskernel.GsRasterBand_swigregister(GsRasterBand)

def GsRasterBand_RasterDataTypeBitSize(t: 'GsRasterDataType') -> "int":
    r""" 波段的数类型bit位大小"""
    return _gskernel.GsRasterBand_RasterDataTypeBitSize(t)

class GsRaster(GsRefObject):
    r""" 栅格数据块"""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self):
        _gskernel.GsRaster_swiginit(self, _gskernel.new_GsRaster())
    __swig_destroy__ = _gskernel.delete_GsRaster

    def CopyDataToArray(self, data: 'signed char *') -> "void":
        r""" 获取栅格数据指针"""
        return _gskernel.GsRaster_CopyDataToArray(self, data)

    def DataPtr(self, data: 'signed char *', nLen: 'int') -> "void":
        return _gskernel.GsRaster_DataPtr(self, data, nLen)

    def DataLength(self) -> "int":
        r""" 设置栅格数据指针 根据栅格类属性计算的栅格数据长度"""
        return _gskernel.GsRaster_DataLength(self)

    def Width(self, *args) -> "void":
        r"""
        *Overload 1:*
        获取栅格数据宽度

        |

        *Overload 2:*
        设置栅格数据宽度
        """
        return _gskernel.GsRaster_Width(self, *args)

    def Height(self, *args) -> "void":
        r"""
        *Overload 1:*
        获取栅格数据高度

        |

        *Overload 2:*
        设置栅格数据高度
        """
        return _gskernel.GsRaster_Height(self, *args)

    def OffsetX(self, *args) -> "void":
        r"""
        *Overload 1:*
        获取栅格数据X偏移

        |

        *Overload 2:*
        设置栅格数据X偏移
        """
        return _gskernel.GsRaster_OffsetX(self, *args)

    def OffsetY(self, *args) -> "void":
        r"""
        *Overload 1:*
        获取栅格数据Y偏移

        |

        *Overload 2:*
        设置栅格数据Y偏移
        """
        return _gskernel.GsRaster_OffsetY(self, *args)

    def RasterClass(self, *args) -> "void":
        r"""
        *Overload 1:*
        获取关联的栅格类

        |

        *Overload 2:*
        关联栅格类
        """
        return _gskernel.GsRaster_RasterClass(self, *args)

# Register GsRaster in _gskernel:
_gskernel.GsRaster_swigregister(GsRaster)

class GsRasterCursor(GsRefObject):
    r""" 栅格查询游标"""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def Width(self) -> "int":
        r""" 游标的数据宽度"""
        return _gskernel.GsRasterCursor_Width(self)

    def Height(self) -> "int":
        r""" 游标的数据高度"""
        return _gskernel.GsRasterCursor_Height(self)

    def X(self) -> "int":
        r""" 游标数据开始数据X偏移"""
        return _gskernel.GsRasterCursor_X(self)

    def Y(self) -> "int":
        r""" 游标数据开始数据Y偏移"""
        return _gskernel.GsRasterCursor_Y(self)

    def Reset(self) -> "void":
        r""" 重置游标位置"""
        return _gskernel.GsRasterCursor_Reset(self)

    def Next(self, raster: 'GsRaster') -> "bool":
        r""" 获取下一块栅格对象"""
        return _gskernel.GsRasterCursor_Next(self, raster)

    def RasterClass(self) -> "GsRasterClass *":
        r""" 获取关联的栅格类"""
        return _gskernel.GsRasterCursor_RasterClass(self)
    __swig_destroy__ = _gskernel.delete_GsRasterCursor

# Register GsRasterCursor in _gskernel:
_gskernel.GsRasterCursor_swigregister(GsRasterCursor)

class GsRasterClass_OnProgress(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    __swig_destroy__ = _gskernel.delete_GsRasterClass_OnProgress

    def OnProgress(self, desc: 'char const *', val: 'double') -> "bool":
        return _gskernel.GsRasterClass_OnProgress_OnProgress(self, desc, val)

    def __init__(self):
        if self.__class__ == GsRasterClass_OnProgress:
            _self = None
        else:
            _self = self
        _gskernel.GsRasterClass_OnProgress_swiginit(self, _gskernel.new_GsRasterClass_OnProgress(_self, ))
    def __disown__(self):
        self.this.disown()
        _gskernel.disown_GsRasterClass_OnProgress(self)
        return weakref.proxy(self)

# Register GsRasterClass_OnProgress in _gskernel:
_gskernel.GsRasterClass_OnProgress_swigregister(GsRasterClass_OnProgress)

class GsRasterClass(GsGeoDataRoom):
    r""" 栅格类，存储影像、地形等网格数据"""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _gskernel.delete_GsRasterClass

    def Width(self) -> "int":
        r""" 像素宽度"""
        return _gskernel.GsRasterClass_Width(self)

    def Height(self) -> "int":
        r""" 像素高度"""
        return _gskernel.GsRasterClass_Height(self)

    def Format(self) -> "GsString":
        r""" 栅格的编码格式"""
        return _gskernel.GsRasterClass_Format(self)

    def BandCount(self) -> "int":
        r""" 获取波段的数量"""
        return _gskernel.GsRasterClass_BandCount(self)

    def RasterBand(self, n: 'int') -> "GsRasterBand *":
        r""" 根据索引获得波段，索引从0开始"""
        return _gskernel.GsRasterClass_RasterBand(self, n)

    def ExtentToRange(self, extent: 'GsBox') -> "GsRect":
        r""" 计算地理范围在栅格中的像素范围"""
        return _gskernel.GsRasterClass_ExtentToRange(self, extent)

    def RangeToExtent(self, range: 'GsRect') -> "GsBox":
        r""" 计算地理范围对应的像素范围"""
        return _gskernel.GsRasterClass_RangeToExtent(self, range)

    def Search(self, *args) -> "GsSmarterPtr< GsRasterCursor >":
        r"""
        *Overload 1:*
         查询一块原始数据。

        |

        *Overload 2:*
         采样一块数据。 :type range: :py:class:`GsRect`
        :param range: 要采样的原始数据 :type s: :py:class:`GsSize`
        :param s: 采样后的大小 :type alg: int
        :param alg: 采样算法
        """
        return _gskernel.GsRasterClass_Search(self, *args)

    def WriteRaster(self, pRaster: 'GsRaster') -> "bool":
        r""" 将一块栅格数据写入到数据集中"""
        return _gskernel.GsRasterClass_WriteRaster(self, pRaster)

    def ExistsPyramid(self) -> "bool":
        r""" 是否存在金字塔"""
        return _gskernel.GsRasterClass_ExistsPyramid(self)

    def CreatePyramid(self, *args) -> "bool":
        r"""
        *Overload 1:*
         创建金字塔 :type alg: int
        :param alg: 采样算法 :type nLevel: int
        :param nLevel: 创建金字塔的级别，金字塔级别以1/2,1/4,1/8 ...递增

        |

        *Overload 2:*
         创建金字塔 :type alg: int
        :param alg: 采样算法 :type nCount: int
        :param nCount: :type pLevels: int
        :param pLevels:
        """
        return _gskernel.GsRasterClass_CreatePyramid(self, *args)

    def MetadataDomain(self) -> "GsVector< GsString >":
        r""" 元数据的分类名称"""
        return _gskernel.GsRasterClass_MetadataDomain(self)

    def MetadataName(self, strDomainName: 'char const *') -> "GsVector< GsString >":
        r""" 获取元数据分类下的元数据名称"""
        return _gskernel.GsRasterClass_MetadataName(self, strDomainName)

    def MetadataItem(self, *args) -> "void":
        r"""
        *Overload 1:*
        获取某个分类下的元数据值

        |

        *Overload 2:*
        设置某个分类下的元数据值
        """
        return _gskernel.GsRasterClass_MetadataItem(self, *args)

    def RasterColumnInfo(self) -> "GsRasterColumnInfo":
        r"""
         获取基本几何信息:rtype: :py:class:`GsRasterColumnInfo`
        :return: 返回基本几何信息对象
        """
        return _gskernel.GsRasterClass_RasterColumnInfo(self)

    def OnProgressAdd(self, call: 'GsRasterClass_OnProgress') -> "void":
        r""" 发生长事务执行的时候进度信息，例如创建金字塔"""
        return _gskernel.GsRasterClass_OnProgressAdd(self, call)

    def OnProgressRemove(self, call: 'GsRasterClass_OnProgress') -> "void":
        return _gskernel.GsRasterClass_OnProgressRemove(self, call)

    @staticmethod
    def CanDowncast(b: 'GsGeoDataRoom') -> "bool":
        return _gskernel.GsRasterClass_CanDowncast(b)

    @staticmethod
    def DowncastTo(b: 'GsGeoDataRoom') -> "GsSmarterPtr< GsRasterClass >":
        return _gskernel.GsRasterClass_DowncastTo(b)

# Register GsRasterClass in _gskernel:
_gskernel.GsRasterClass_swigregister(GsRasterClass)

def GsRasterClass_CanDowncast(b: 'GsGeoDataRoom') -> "bool":
    return _gskernel.GsRasterClass_CanDowncast(b)

def GsRasterClass_DowncastTo(b: 'GsGeoDataRoom') -> "GsSmarterPtr< GsRasterClass >":
    return _gskernel.GsRasterClass_DowncastTo(b)

class GsDataRoomHouseDataRoom(GsDataRoom):
    r""" 支持数据集存储、打开的抽象基类"""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _gskernel.delete_GsDataRoomHouseDataRoom

    def DataRoomNames(self, eDRType: 'GsDataRoomType', vecName: 'GsStringVector') -> "void":
        r"""
         枚举数据库数据集的名称 :type eDRType: int
        :param eDRType: 要枚举的数据集的类型:type vecName: GsVector< GsString >
        :param vecName: 要枚举类型数据集的名称
        """
        return _gskernel.GsDataRoomHouseDataRoom_DataRoomNames(self, eDRType, vecName)

    def OpenFeatureClass(self, strName: 'char const *') -> "GsSmarterPtr< GsFeatureClass >":
        r"""
         打开矢量地物类对象:type strName: string
        :param strName: 矢量地物的名称:rtype: GsSmarterPtr< GsFeatureClass >
        :return: 返回矢量地物类的指针或者NULL
        """
        return _gskernel.GsDataRoomHouseDataRoom_OpenFeatureClass(self, strName)

    def CreateFeatureClass(self, strName: 'char const *', fs: 'GsFields', oColumnInfo: 'GsGeometryColumnInfo', pSR: 'GsSpatialReference') -> "GsSmarterPtr< GsFeatureClass >":
        r"""
         创建一个地物类:type strName: string
        :param strName: 地物类的名称:type fs: :py:class:`GsFields`
        :param fs: 地物类的字段:type oColumnInfo: :py:class:`GsGeometryColumnInfo`
        :param oColumnInfo: 地物类的基本信息:type pSR: :py:class:`GsSpatialReference`
        :param pSR: 地物类的空间参考:rtype: GsSmarterPtr< GsFeatureClass >
        :return: 如果名称存在则返回已经存在的地物类，否则返回新建的地物类对象或者为空
        """
        return _gskernel.GsDataRoomHouseDataRoom_CreateFeatureClass(self, strName, fs, oColumnInfo, pSR)

    def OpenTileClass(self, strName: 'char const *') -> "GsSmarterPtr< GsTileClass >":
        r"""
         打开瓦片类对象:type strName: string
        :param strName: 瓦片类的名称:rtype: GsSmarterPtr< GsTileClass >
        :return: 返回瓦片类的指针或者NULL
        """
        return _gskernel.GsDataRoomHouseDataRoom_OpenTileClass(self, strName)

    def CreateTileClass(self, strName: 'char const *', pSR: 'GsSpatialReference', pPyramid: 'GsPyramid', oColumnInfo: 'GsTileColumnInfo') -> "GsSmarterPtr< GsTileClass >":
        r"""
         创建一个瓦片类:type strName: string
        :param strName: 瓦片类的名称:type pSR: :py:class:`GsSpatialReference`
        :param pSR: 瓦片类的空间参考:type pPyramid: :py:class:`GsPyramid`
        :param pPyramid: 瓦片类的金字塔:rtype: GsSmarterPtr< GsTileClass >
        :return: 如果名称存在则返回已经存在的瓦片类，否则返回新建的瓦片类对象或者为空
        """
        return _gskernel.GsDataRoomHouseDataRoom_CreateTileClass(self, strName, pSR, pPyramid, oColumnInfo)

    def OpenRasterClass(self, strName: 'char const *') -> "GsSmarterPtr< GsRasterClass >":
        r"""
         打开栅格类对象:type strName: string
        :param strName: 栅格类的名称:rtype: GsSmarterPtr< GsRasterClass >
        :return: 返回栅格类的指针或者NULL
        """
        return _gskernel.GsDataRoomHouseDataRoom_OpenRasterClass(self, strName)

    def CreateRasterClass(self, strName: 'char const *', eFormat: 'GsRasterCreateableFormat', oColumnInfo: 'GsRasterColumnInfo', pSR: 'GsSpatialReference', strOptions: 'char const *'=None) -> "GsSmarterPtr< GsRasterClass >":
        r"""
         打开栅格类对象:type strName: string
        :param strName: 栅格类的名称:type oColumnInfo: :py:class:`GsRasterColumnInfo`
        :param oColumnInfo: 栅格类基本信息:type pSR: :py:class:`GsSpatialReference`
        :param pSR: 空间参考:type strOptions: string
        :param strOptions: 参数选项:rtype: GsSmarterPtr< GsRasterClass >
        :return: 返回栅格类的指针或者NULL
        """
        return _gskernel.GsDataRoomHouseDataRoom_CreateRasterClass(self, strName, eFormat, oColumnInfo, pSR, strOptions)

    def OpenRowClass(self, strName: 'char const *') -> "GsSmarterPtr< GsRowClass >":
        r"""
         打开二维表对象:type strName: string
        :param strName: 二维表的名称:rtype: GsSmarterPtr< GsRowClass >
        :return: 返回二维表的指针或者NULL
        """
        return _gskernel.GsDataRoomHouseDataRoom_OpenRowClass(self, strName)

    def CreateRowClass(self, strName: 'char const *', fs: 'GsFields') -> "GsSmarterPtr< GsRowClass >":
        r"""
         创建一个二维表:type strName: string
        :param strName: 二维表的名称:type fs: :py:class:`GsFields`
        :param fs: 二维表的字段:rtype: GsSmarterPtr< GsRowClass >
        :return: 如果名称存在则返回已经存在的二维表，否则返回新建的二维表对象或者为空
        """
        return _gskernel.GsDataRoomHouseDataRoom_CreateRowClass(self, strName, fs)

    def OpenDataRoom(self, strName: 'char const *', eDRType: 'GsDataRoomType') -> "GsSmarterPtr< GsDataRoom >":
        r"""
         打开已经存在的数据集:type strName: string
        :param strName: 地物类的名称:type eDRType: int
        :param eDRType: 数据集的类型:rtype: GsSmarterPtr< GsDataRoom >
        :return: 返回数据集对象
        """
        return _gskernel.GsDataRoomHouseDataRoom_OpenDataRoom(self, strName, eDRType)

# Register GsDataRoomHouseDataRoom in _gskernel:
_gskernel.GsDataRoomHouseDataRoom_swigregister(GsDataRoomHouseDataRoom)

class GsDataRoomFolder(GsDataRoomHouseDataRoom):
    r""" 数据集目录"""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _gskernel.delete_GsDataRoomFolder

    def Type(self) -> "GsDataRoomType":
        r"""
         数据集类型:rtype: int
        :return: 返回数据集对象的类型
        """
        return _gskernel.GsDataRoomFolder_Type(self)

    @staticmethod
    def CanDowncast(b: 'GsDataRoomHouseDataRoom') -> "bool":
        return _gskernel.GsDataRoomFolder_CanDowncast(b)

    @staticmethod
    def DowncastTo(b: 'GsDataRoomHouseDataRoom') -> "GsSmarterPtr< GsDataRoomFolder >":
        return _gskernel.GsDataRoomFolder_DowncastTo(b)

# Register GsDataRoomFolder in _gskernel:
_gskernel.GsDataRoomFolder_swigregister(GsDataRoomFolder)

def GsDataRoomFolder_CanDowncast(b: 'GsDataRoomHouseDataRoom') -> "bool":
    return _gskernel.GsDataRoomFolder_CanDowncast(b)

def GsDataRoomFolder_DowncastTo(b: 'GsDataRoomHouseDataRoom') -> "GsSmarterPtr< GsDataRoomFolder >":
    return _gskernel.GsDataRoomFolder_DowncastTo(b)

class GsDataRoomHouseObject(GsRefObject):
    r""" 支持数据集存储、打开的抽象基类"""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _gskernel.delete_GsDataRoomHouseObject

    def DataRoomNames(self, eDRType: 'GsDataRoomType', vecName: 'GsStringVector') -> "void":
        r"""
         枚举数据库数据集的名称 :type eDRType: int
        :param eDRType: 要枚举的数据集的类型:type vecName: GsVector< GsString >
        :param vecName: 要枚举类型数据集的名称
        """
        return _gskernel.GsDataRoomHouseObject_DataRoomNames(self, eDRType, vecName)

    def OpenFeatureClass(self, strName: 'char const *') -> "GsSmarterPtr< GsFeatureClass >":
        r"""
         打开矢量地物类对象:type strName: string
        :param strName: 矢量地物的名称:rtype: GsSmarterPtr< GsFeatureClass >
        :return: 返回矢量地物类的指针或者NULL
        """
        return _gskernel.GsDataRoomHouseObject_OpenFeatureClass(self, strName)

    def CreateFeatureClass(self, strName: 'char const *', fs: 'GsFields', oColumnInfo: 'GsGeometryColumnInfo', pSR: 'GsSpatialReference') -> "GsSmarterPtr< GsFeatureClass >":
        r"""
         创建一个地物类:type strName: string
        :param strName: 地物类的名称:type fs: :py:class:`GsFields`
        :param fs: 地物类的字段:type oColumnInfo: :py:class:`GsGeometryColumnInfo`
        :param oColumnInfo: 地物类的基本信息:type pSR: :py:class:`GsSpatialReference`
        :param pSR: 地物类的空间参考:rtype: GsSmarterPtr< GsFeatureClass >
        :return: 如果名称存在则返回已经存在的地物类，否则返回新建的地物类对象或者为空
        """
        return _gskernel.GsDataRoomHouseObject_CreateFeatureClass(self, strName, fs, oColumnInfo, pSR)

    def OpenTileClass(self, strName: 'char const *') -> "GsSmarterPtr< GsTileClass >":
        r"""
         打开瓦片类对象:type strName: string
        :param strName: 瓦片类的名称:rtype: GsSmarterPtr< GsTileClass >
        :return: 返回瓦片类的指针或者NULL
        """
        return _gskernel.GsDataRoomHouseObject_OpenTileClass(self, strName)

    def CreateTileClass(self, strName: 'char const *', pSR: 'GsSpatialReference', pPyramid: 'GsPyramid', oColumnInfo: 'GsTileColumnInfo') -> "GsSmarterPtr< GsTileClass >":
        r"""
         创建一个瓦片类:type strName: string
        :param strName: 瓦片类的名称:type pSR: :py:class:`GsSpatialReference`
        :param pSR: 瓦片类的空间参考:type pPyramid: :py:class:`GsPyramid`
        :param pPyramid: 瓦片类的金字塔:rtype: GsSmarterPtr< GsTileClass >
        :return: 如果名称存在则返回已经存在的瓦片类，否则返回新建的瓦片类对象或者为空
        """
        return _gskernel.GsDataRoomHouseObject_CreateTileClass(self, strName, pSR, pPyramid, oColumnInfo)

    def OpenRasterClass(self, strName: 'char const *') -> "GsSmarterPtr< GsRasterClass >":
        r"""
         打开栅格类对象:type strName: string
        :param strName: 栅格类的名称:rtype: GsSmarterPtr< GsRasterClass >
        :return: 返回栅格类的指针或者NULL
        """
        return _gskernel.GsDataRoomHouseObject_OpenRasterClass(self, strName)

    def CreateRasterClass(self, strName: 'char const *', eFormat: 'GsRasterCreateableFormat', oColumnInfo: 'GsRasterColumnInfo', pSR: 'GsSpatialReference', strOptions: 'char const *'=None) -> "GsSmarterPtr< GsRasterClass >":
        r"""
         打开栅格类对象:type strName: string
        :param strName: 栅格类的名称:type oColumnInfo: :py:class:`GsRasterColumnInfo`
        :param oColumnInfo: 栅格类基本信息:type pSR: :py:class:`GsSpatialReference`
        :param pSR: 空间参考:type strOptions: string
        :param strOptions: 参数选项:rtype: GsSmarterPtr< GsRasterClass >
        :return: 返回栅格类的指针或者NULL
        """
        return _gskernel.GsDataRoomHouseObject_CreateRasterClass(self, strName, eFormat, oColumnInfo, pSR, strOptions)

    def OpenRowClass(self, strName: 'char const *') -> "GsSmarterPtr< GsRowClass >":
        r"""
         打开二维表对象:type strName: string
        :param strName: 二维表的名称:rtype: GsSmarterPtr< GsRowClass >
        :return: 返回二维表的指针或者NULL
        """
        return _gskernel.GsDataRoomHouseObject_OpenRowClass(self, strName)

    def CreateRowClass(self, strName: 'char const *', fs: 'GsFields') -> "GsSmarterPtr< GsRowClass >":
        r"""
         创建一个二维表:type strName: string
        :param strName: 二维表的名称:type fs: :py:class:`GsFields`
        :param fs: 二维表的字段:rtype: GsSmarterPtr< GsRowClass >
        :return: 如果名称存在则返回已经存在的二维表，否则返回新建的二维表对象或者为空
        """
        return _gskernel.GsDataRoomHouseObject_CreateRowClass(self, strName, fs)

    def OpenDataRoom(self, strName: 'char const *', eDRType: 'GsDataRoomType') -> "GsSmarterPtr< GsDataRoom >":
        r"""
         打开已经存在的数据集:type strName: string
        :param strName: 地物类的名称:type eDRType: int
        :param eDRType: 数据集的类型:rtype: GsSmarterPtr< GsDataRoom >
        :return: 返回数据集对象
        """
        return _gskernel.GsDataRoomHouseObject_OpenDataRoom(self, strName, eDRType)

# Register GsDataRoomHouseObject in _gskernel:
_gskernel.GsDataRoomHouseObject_swigregister(GsDataRoomHouseObject)

class GsGeoDatabase(GsDataRoomHouseObject):
    r""" 空间数据库对象 代表一个能够存储GIS空间数据的数据库、文件（数据源）实体。"""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _gskernel.delete_GsGeoDatabase

    def Transaction(self) -> "GsTransaction *":
        r""" 获取事务对象，如果不支持事务则返回NULL"""
        return _gskernel.GsGeoDatabase_Transaction(self)

    def ConnectProperty(self) -> "GsConnectProperty":
        r"""
         数据库连接属性 :rtype: :py:class:`GsConnectProperty`
        :return: 返回数据库连接属性
        """
        return _gskernel.GsGeoDatabase_ConnectProperty(self)

    def TestCapbility(self, eCap: 'GsGeoDatabaseCapbility') -> "long long":
        r"""
         测试数据库能力:type eCap: int
        :param eCap: 数据库能力类型:rtype: int
        :return: 能力类型的值，通常情况下1为支持能力，0为不支持。
        """
        return _gskernel.GsGeoDatabase_TestCapbility(self, eCap)

# Register GsGeoDatabase in _gskernel:
_gskernel.GsGeoDatabase_swigregister(GsGeoDatabase)

class GsGeoDatabaseFactory(GsRefObject):
    r""" 空间数据库类厂 通过空间数据库类厂创建空间数据库对象实例。 code{.cpp} GsOracleSpatialGeoDatabaseFactory fac; GsGeoDatabasePtr ptrGDB = fac.Open(connProperty); endcode"""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __swig_destroy__ = _gskernel.delete_GsGeoDatabaseFactory

    def Open(self, connProperty: 'GsConnectProperty') -> "GsSmarterPtr< GsGeoDatabase >":
        r"""
         根据数据库连接信息打开一个空间数据库:type connProperty: :py:class:`GsConnectProperty`
        :param connProperty: 数据库连接信息:rtype: GsSmarterPtr< GsGeoDatabase >
        :return: 返回空间数据库对象实例或者空
        """
        return _gskernel.GsGeoDatabaseFactory_Open(self, connProperty)

    @staticmethod
    def CanDowncast(b: 'GsRefObject') -> "bool":
        return _gskernel.GsGeoDatabaseFactory_CanDowncast(b)

    @staticmethod
    def DowncastTo(b: 'GsRefObject') -> "GsSmarterPtr< GsGeoDatabaseFactory >":
        return _gskernel.GsGeoDatabaseFactory_DowncastTo(b)

# Register GsGeoDatabaseFactory in _gskernel:
_gskernel.GsGeoDatabaseFactory_swigregister(GsGeoDatabaseFactory)

def GsGeoDatabaseFactory_CanDowncast(b: 'GsRefObject') -> "bool":
    return _gskernel.GsGeoDatabaseFactory_CanDowncast(b)

def GsGeoDatabaseFactory_DowncastTo(b: 'GsRefObject') -> "GsSmarterPtr< GsGeoDatabaseFactory >":
    return _gskernel.GsGeoDatabaseFactory_DowncastTo(b)

class GsSqliteGeoDatabaseFactory(GsGeoDatabaseFactory):
    r""" Sqlite数据库工厂 GeoStar文件格式"""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self):
        _gskernel.GsSqliteGeoDatabaseFactory_swiginit(self, _gskernel.new_GsSqliteGeoDatabaseFactory())
    __swig_destroy__ = _gskernel.delete_GsSqliteGeoDatabaseFactory

    @staticmethod
    def CanDowncast(b: 'GsGeoDatabaseFactory') -> "bool":
        return _gskernel.GsSqliteGeoDatabaseFactory_CanDowncast(b)

    @staticmethod
    def DowncastTo(b: 'GsGeoDatabaseFactory') -> "GsSmarterPtr< GsSqliteGeoDatabaseFactory >":
        return _gskernel.GsSqliteGeoDatabaseFactory_DowncastTo(b)

# Register GsSqliteGeoDatabaseFactory in _gskernel:
_gskernel.GsSqliteGeoDatabaseFactory_swigregister(GsSqliteGeoDatabaseFactory)

def GsSqliteGeoDatabaseFactory_CanDowncast(b: 'GsGeoDatabaseFactory') -> "bool":
    return _gskernel.GsSqliteGeoDatabaseFactory_CanDowncast(b)

def GsSqliteGeoDatabaseFactory_DowncastTo(b: 'GsGeoDatabaseFactory') -> "GsSmarterPtr< GsSqliteGeoDatabaseFactory >":
    return _gskernel.GsSqliteGeoDatabaseFactory_DowncastTo(b)

class GsShpGeoDatabaseFactory(GsGeoDatabaseFactory):
    r""" ShapeFile数据库工厂 ESRI ShapeFile文件格式"""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self):
        _gskernel.GsShpGeoDatabaseFactory_swiginit(self, _gskernel.new_GsShpGeoDatabaseFactory())
    __swig_destroy__ = _gskernel.delete_GsShpGeoDatabaseFactory

    @staticmethod
    def CanDowncast(b: 'GsGeoDatabaseFactory') -> "bool":
        return _gskernel.GsShpGeoDatabaseFactory_CanDowncast(b)

    @staticmethod
    def DowncastTo(b: 'GsGeoDatabaseFactory') -> "GsSmarterPtr< GsShpGeoDatabaseFactory >":
        return _gskernel.GsShpGeoDatabaseFactory_DowncastTo(b)

# Register GsShpGeoDatabaseFactory in _gskernel:
_gskernel.GsShpGeoDatabaseFactory_swigregister(GsShpGeoDatabaseFactory)

def GsShpGeoDatabaseFactory_CanDowncast(b: 'GsGeoDatabaseFactory') -> "bool":
    return _gskernel.GsShpGeoDatabaseFactory_CanDowncast(b)

def GsShpGeoDatabaseFactory_DowncastTo(b: 'GsGeoDatabaseFactory') -> "GsSmarterPtr< GsShpGeoDatabaseFactory >":
    return _gskernel.GsShpGeoDatabaseFactory_DowncastTo(b)

class GsFileGeoDatabaseFactory(GsGeoDatabaseFactory):
    r""" 文件类型数据库工厂 包含Sqlite，SHP，GeoPackage以及文件栅格数据的类型识别。"""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self):
        _gskernel.GsFileGeoDatabaseFactory_swiginit(self, _gskernel.new_GsFileGeoDatabaseFactory())
    __swig_destroy__ = _gskernel.delete_GsFileGeoDatabaseFactory

    @staticmethod
    def CanDowncast(b: 'GsGeoDatabaseFactory') -> "bool":
        return _gskernel.GsFileGeoDatabaseFactory_CanDowncast(b)

    @staticmethod
    def DowncastTo(b: 'GsGeoDatabaseFactory') -> "GsSmarterPtr< GsFileGeoDatabaseFactory >":
        return _gskernel.GsFileGeoDatabaseFactory_DowncastTo(b)

# Register GsFileGeoDatabaseFactory in _gskernel:
_gskernel.GsFileGeoDatabaseFactory_swigregister(GsFileGeoDatabaseFactory)

def GsFileGeoDatabaseFactory_CanDowncast(b: 'GsGeoDatabaseFactory') -> "bool":
    return _gskernel.GsFileGeoDatabaseFactory_CanDowncast(b)

def GsFileGeoDatabaseFactory_DowncastTo(b: 'GsGeoDatabaseFactory') -> "GsSmarterPtr< GsFileGeoDatabaseFactory >":
    return _gskernel.GsFileGeoDatabaseFactory_DowncastTo(b)

class GsGeoPackageGeoDatabaseFactory(GsGeoDatabaseFactory):
    r""" OGC GeoPackage标准数据库工厂 基于OGC GeoPackage标准文件格式http://www.geopackage.org/"""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self):
        _gskernel.GsGeoPackageGeoDatabaseFactory_swiginit(self, _gskernel.new_GsGeoPackageGeoDatabaseFactory())
    __swig_destroy__ = _gskernel.delete_GsGeoPackageGeoDatabaseFactory

    @staticmethod
    def CanDowncast(b: 'GsGeoDatabaseFactory') -> "bool":
        return _gskernel.GsGeoPackageGeoDatabaseFactory_CanDowncast(b)

    @staticmethod
    def DowncastTo(b: 'GsGeoDatabaseFactory') -> "GsSmarterPtr< GsGeoPackageGeoDatabaseFactory >":
        return _gskernel.GsGeoPackageGeoDatabaseFactory_DowncastTo(b)

# Register GsGeoPackageGeoDatabaseFactory in _gskernel:
_gskernel.GsGeoPackageGeoDatabaseFactory_swigregister(GsGeoPackageGeoDatabaseFactory)

def GsGeoPackageGeoDatabaseFactory_CanDowncast(b: 'GsGeoDatabaseFactory') -> "bool":
    return _gskernel.GsGeoPackageGeoDatabaseFactory_CanDowncast(b)

def GsGeoPackageGeoDatabaseFactory_DowncastTo(b: 'GsGeoDatabaseFactory') -> "GsSmarterPtr< GsGeoPackageGeoDatabaseFactory >":
    return _gskernel.GsGeoPackageGeoDatabaseFactory_DowncastTo(b)

class GsESRIFileGeoDatabaseFactory(GsGeoDatabaseFactory):
    r""" ArcGIS文件数据源类厂 ArcGIS文件数据源类厂 可打开瓦片数据"""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self):
        _gskernel.GsESRIFileGeoDatabaseFactory_swiginit(self, _gskernel.new_GsESRIFileGeoDatabaseFactory())
    __swig_destroy__ = _gskernel.delete_GsESRIFileGeoDatabaseFactory

    @staticmethod
    def CanDowncast(b: 'GsGeoDatabaseFactory') -> "bool":
        return _gskernel.GsESRIFileGeoDatabaseFactory_CanDowncast(b)

    @staticmethod
    def DowncastTo(b: 'GsGeoDatabaseFactory') -> "GsSmarterPtr< GsESRIFileGeoDatabaseFactory >":
        return _gskernel.GsESRIFileGeoDatabaseFactory_DowncastTo(b)

# Register GsESRIFileGeoDatabaseFactory in _gskernel:
_gskernel.GsESRIFileGeoDatabaseFactory_swigregister(GsESRIFileGeoDatabaseFactory)

def GsESRIFileGeoDatabaseFactory_CanDowncast(b: 'GsGeoDatabaseFactory') -> "bool":
    return _gskernel.GsESRIFileGeoDatabaseFactory_CanDowncast(b)

def GsESRIFileGeoDatabaseFactory_DowncastTo(b: 'GsGeoDatabaseFactory') -> "GsSmarterPtr< GsESRIFileGeoDatabaseFactory >":
    return _gskernel.GsESRIFileGeoDatabaseFactory_DowncastTo(b)

class GsWebGeoDatabaseFactory(GsGeoDatabaseFactory):
    r""" 以WebService为基础的数据库工厂"""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self):
        _gskernel.GsWebGeoDatabaseFactory_swiginit(self, _gskernel.new_GsWebGeoDatabaseFactory())
    __swig_destroy__ = _gskernel.delete_GsWebGeoDatabaseFactory

    @staticmethod
    def CanDowncast(b: 'GsGeoDatabaseFactory') -> "bool":
        r"""
         根据数据库连接信息打开一个空间数据库 :param connProperty: 数据库连接信息 :rtype: boolean
        :return: 返回空间数据库对象实例或者空
        """
        return _gskernel.GsWebGeoDatabaseFactory_CanDowncast(b)

    @staticmethod
    def DowncastTo(b: 'GsGeoDatabaseFactory') -> "GsSmarterPtr< GsWebGeoDatabaseFactory >":
        return _gskernel.GsWebGeoDatabaseFactory_DowncastTo(b)

# Register GsWebGeoDatabaseFactory in _gskernel:
_gskernel.GsWebGeoDatabaseFactory_swigregister(GsWebGeoDatabaseFactory)

def GsWebGeoDatabaseFactory_CanDowncast(b: 'GsGeoDatabaseFactory') -> "bool":
    r"""
     根据数据库连接信息打开一个空间数据库 :param connProperty: 数据库连接信息 :rtype: boolean
    :return: 返回空间数据库对象实例或者空
    """
    return _gskernel.GsWebGeoDatabaseFactory_CanDowncast(b)

def GsWebGeoDatabaseFactory_DowncastTo(b: 'GsGeoDatabaseFactory') -> "GsSmarterPtr< GsWebGeoDatabaseFactory >":
    return _gskernel.GsWebGeoDatabaseFactory_DowncastTo(b)

class TileSpliter_OnProgress(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    __swig_destroy__ = _gskernel.delete_TileSpliter_OnProgress

    def OnProgress(self, arg0: 'int', arg1: 'int', arg2: 'int', arg3: 'long long', arg4: 'long long') -> "bool":
        return _gskernel.TileSpliter_OnProgress_OnProgress(self, arg0, arg1, arg2, arg3, arg4)

    def __init__(self):
        if self.__class__ == TileSpliter_OnProgress:
            _self = None
        else:
            _self = self
        _gskernel.TileSpliter_OnProgress_swiginit(self, _gskernel.new_TileSpliter_OnProgress(_self, ))
    def __disown__(self):
        self.this.disown()
        _gskernel.disown_TileSpliter_OnProgress(self)
        return weakref.proxy(self)

# Register TileSpliter_OnProgress in _gskernel:
_gskernel.TileSpliter_OnProgress_swigregister(TileSpliter_OnProgress)

class GsFileVectorTileSpliter_OnCommit(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    __swig_destroy__ = _gskernel.delete_GsFileVectorTileSpliter_OnCommit

    def OnCommit(self, arg0: 'long long', arg1: 'long long') -> "void":
        r""" 当提交数据时显示进度。"""
        return _gskernel.GsFileVectorTileSpliter_OnCommit_OnCommit(self, arg0, arg1)

    def __init__(self):
        if self.__class__ == GsFileVectorTileSpliter_OnCommit:
            _self = None
        else:
            _self = self
        _gskernel.GsFileVectorTileSpliter_OnCommit_swiginit(self, _gskernel.new_GsFileVectorTileSpliter_OnCommit(_self, ))
    def __disown__(self):
        self.this.disown()
        _gskernel.disown_GsFileVectorTileSpliter_OnCommit(self)
        return weakref.proxy(self)

# Register GsFileVectorTileSpliter_OnCommit in _gskernel:
_gskernel.GsFileVectorTileSpliter_OnCommit_swigregister(GsFileVectorTileSpliter_OnCommit)

class GsSingleTileSplit_OnGeometrySplit(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    __swig_destroy__ = _gskernel.delete_GsSingleTileSplit_OnGeometrySplit

    def OnGeometrySplit(self, arg0: 'GsGeometry', arg1: 'int', arg2: 'int', arg3: 'int') -> "bool":
        r""" 存储瓦片的回调, 在存储瓦片到数据库前的时候发生 :param pGeo:, :param nLevel:, :param nRow:, :param nCol:,"""
        return _gskernel.GsSingleTileSplit_OnGeometrySplit_OnGeometrySplit(self, arg0, arg1, arg2, arg3)

    def __init__(self):
        if self.__class__ == GsSingleTileSplit_OnGeometrySplit:
            _self = None
        else:
            _self = self
        _gskernel.GsSingleTileSplit_OnGeometrySplit_swiginit(self, _gskernel.new_GsSingleTileSplit_OnGeometrySplit(_self, ))
    def __disown__(self):
        self.this.disown()
        _gskernel.disown_GsSingleTileSplit_OnGeometrySplit(self)
        return weakref.proxy(self)

# Register GsSingleTileSplit_OnGeometrySplit in _gskernel:
_gskernel.GsSingleTileSplit_OnGeometrySplit_swigregister(GsSingleTileSplit_OnGeometrySplit)

class GsRasterTileSpliter(object):
    r""" 栅格瓦片切片"""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, pRasterClass: 'GsRasterClass', pPyramid: 'GsPyramid', pTileClass: 'GsTileClass'):
        _gskernel.GsRasterTileSpliter_swiginit(self, _gskernel.new_GsRasterTileSpliter(pRasterClass, pPyramid, pTileClass))

    def MaxCommit(self, *args) -> "void":
        r"""
        *Overload 1:*
        最大提交数量，保存瓦片数量达到此数据量之后提交一次事务

        |

        *Overload 2:*
        最大提交数量，保存瓦片数量达到此数据量之后提交一次事务
        """
        return _gskernel.GsRasterTileSpliter_MaxCommit(self, *args)

    def MemoryCacheTileRows(self, *args) -> "void":
        r"""
        *Overload 1:*
        内存缓存瓦片行数量

        |

        *Overload 2:*
        内存缓存瓦片行数量
        """
        return _gskernel.GsRasterTileSpliter_MemoryCacheTileRows(self, *args)

    def MemoryCacheTileCols(self, *args) -> "void":
        r"""
        *Overload 1:*
        内存缓存瓦片列数量

        |

        *Overload 2:*
        内存缓存瓦片列数量
        """
        return _gskernel.GsRasterTileSpliter_MemoryCacheTileCols(self, *args)

    def FilterExtent(self, *args) -> "GsGeometry *":
        r"""
        *Overload 1:*
        设置过滤范围,过滤范围外的数据不会进入瓦片

        |

        *Overload 2:*
        设置过滤范围，过滤范围外的数据不会进入瓦片

        |

        *Overload 3:*
        获取过滤范围
        """
        return _gskernel.GsRasterTileSpliter_FilterExtent(self, *args)

    def Execute(self, nStartLevel: 'int', nEndLevel: 'int') -> "bool":
        r""" 执行切割过程。"""
        return _gskernel.GsRasterTileSpliter_Execute(self, nStartLevel, nEndLevel)

    def NoDataValue(self, *args) -> "double":
        r"""
        *Overload 1:*
         设置nodata的值，一般情况下可以认为小于nodata的像素值认为是无效的。 :type nodata: float
        :param nodata: nodata的值

        |

        *Overload 2:*
         获取nodata的值 :rtype: float
        :return: nodata的值
        """
        return _gskernel.GsRasterTileSpliter_NoDataValue(self, *args)

    def UseNoData(self, *args) -> "bool":
        r"""
        *Overload 1:*
         设置是否使用设置的nodata :type bUseNodata: boolean
        :param bUseNodata: 是否使用nodata

        |

        *Overload 2:*
         获取是否使用设置的nodata :rtype: boolean
        :return: 是否使用nodata
        """
        return _gskernel.GsRasterTileSpliter_UseNoData(self, *args)

    def OnProgressAdd(self, call: 'TileSpliter_OnProgress') -> "void":
        return _gskernel.GsRasterTileSpliter_OnProgressAdd(self, call)

    def OnProgressRemove(self, call: 'TileSpliter_OnProgress') -> "void":
        return _gskernel.GsRasterTileSpliter_OnProgressRemove(self, call)
    __swig_destroy__ = _gskernel.delete_GsRasterTileSpliter

# Register GsRasterTileSpliter in _gskernel:
_gskernel.GsRasterTileSpliter_swigregister(GsRasterTileSpliter)

class GsMapTileSpliter(object):
    r""" 基于地图的瓦片切片"""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, pMapDefinePath: 'char const *', pPyramid: 'GsPyramid', pTileClass: 'GsTileClass'):
        r"""
         基于地图的瓦片切片 :type pMapDefinePath: string
        :param pMapDefinePath: 地图自定义文件的路径 :type pPyramid: :py:class:`GsPyramid`
        :param pPyramid: 金字塔信息 :type pTileClass: :py:class:`GsTileClass`
        :param pTileClass: 瓦片数据集
        """
        _gskernel.GsMapTileSpliter_swiginit(self, _gskernel.new_GsMapTileSpliter(pMapDefinePath, pPyramid, pTileClass))

    def FilterExtent(self, *args) -> "GsGeometry *":
        r"""
        *Overload 1:*
         设置过滤范围 :type box: :py:class:`GsBox`
        :param box: 传入的过滤范围，会转换为Geometry存储

        |

        *Overload 2:*
         设置过滤范围，过滤范围外的数据不会进入瓦片 :type pGeo: :py:class:`GsGeometry`
        :param pGeo: 传入的过滤范围

        |

        *Overload 3:*
         获取过滤范围  :rtype: :py:class:`GsGeometry`
        :return: 返回过滤范围
        """
        return _gskernel.GsMapTileSpliter_FilterExtent(self, *args)

    def TransparencyColor(self, *args) -> "GsColor":
        r"""
        *Overload 1:*
         设置透明色 背景色 :type color: :py:class:`GsColor`
        :param color: 传入颜色

        |

        *Overload 2:*
         透明色 :rtype: :py:class:`GsColor`
        :return: 返回透明色
        """
        return _gskernel.GsMapTileSpliter_TransparencyColor(self, *args)

    def ClipBoundary(self, *args) -> "void":
        r"""
        *Overload 1:*
         是否裁切边框 :rtype: boolean
        :return: 返回是否裁切边框

        |

        *Overload 2:*
         设置是否裁切边框 :type bClip: boolean
        :param bClip: 是否裁切边框
        """
        return _gskernel.GsMapTileSpliter_ClipBoundary(self, *args)

    def WidthStep(self, *args) -> "int":
        r"""
        *Overload 1:*
         设置大位图宽 :type widthStep: int
        :param widthStep: 大位图宽

        |

        *Overload 2:*
         大位图宽 :rtype: int
        :return: 返回大位图宽
        """
        return _gskernel.GsMapTileSpliter_WidthStep(self, *args)

    def HeightStep(self, *args) -> "int":
        r"""
        *Overload 1:*
         设置大位图高 :type heightStep: int
        :param heightStep:

        |

        *Overload 2:*
         大位图高 :rtype: int
        :return: 返回大位图高
        """
        return _gskernel.GsMapTileSpliter_HeightStep(self, *args)

    def EncodingType(self, *args) -> "void":
        r"""
        *Overload 1:*
         瓦片编码类型 :rtype: int
        :return: 返回瓦片编码类型

        |

        *Overload 2:*
         设置瓦片编码类型 :type tileEncodingType: int
        :param tileEncodingType:
        """
        return _gskernel.GsMapTileSpliter_EncodingType(self, *args)

    def DPI(self, *args) -> "void":
        r"""
        *Overload 1:*
         绘制DPI :rtype: float
        :return: 返回DPI

        |

        *Overload 2:*
         设置绘制DPI :type dpi: float
        :param dpi: 设置的DPI
        """
        return _gskernel.GsMapTileSpliter_DPI(self, *args)

    def MemoryCacheMaxSize(self, *args) -> "void":
        r"""
        *Overload 1:*
         最大使用缓存大小，仅使用文件类型时有效 :rtype: int
        :return: 

        |

        *Overload 2:*
         设置最大使用缓存大小，仅使用文件类型时有效 :type memoryCacheMaxSize: int
        :param memoryCacheMaxSize:
        """
        return _gskernel.GsMapTileSpliter_MemoryCacheMaxSize(self, *args)

    def CacheFilePath(self, *args) -> "void":
        r"""
        *Overload 1:*
         文件缓存路径 :rtype: :py:class:`GsString`
        :return: 返回缓存的路径

        |

        *Overload 2:*
         设置文件缓存路径 :type fileName: string
        :param fileName: 设置的缓存路径
        """
        return _gskernel.GsMapTileSpliter_CacheFilePath(self, *args)

    def Execute(self, nStartLevel: 'int', nEndLevel: 'int', trackCancel: 'GsTrackCancel'=None) -> "bool":
        r"""
         执行切割过程 :type nStartLevel: int
        :param nStartLevel: 起始级别 :type nEndLevel: int
        :param nEndLevel: 结束级别 :type trackCancel: :py:class:`GsTrackCancel`
        :param trackCancel: 取消对象 :rtype: boolean
        :return: 返回是否切割成功
        """
        return _gskernel.GsMapTileSpliter_Execute(self, nStartLevel, nEndLevel, trackCancel)

    def Update(self, nStartLevel: 'int', nEndLevel: 'int', pGeo: 'GsGeometry', trackCancel: 'GsTrackCancel'=None) -> "bool":
        r"""
         执行范围更新过程 :type nStartLevel: int
        :param nStartLevel: 起始级别 :type nEndLevel: int
        :param nEndLevel: 结束级别 :type pGeo: :py:class:`GsGeometry`
        :param pGeo:  :type trackCancel: :py:class:`GsTrackCancel`
        :param trackCancel:  :rtype: boolean
        :return: 返回是否更新成功
        """
        return _gskernel.GsMapTileSpliter_Update(self, nStartLevel, nEndLevel, pGeo, trackCancel)

    def OnProgressAdd(self, call: 'TileSpliter_OnProgress') -> "void":
        return _gskernel.GsMapTileSpliter_OnProgressAdd(self, call)

    def OnProgressRemove(self, call: 'TileSpliter_OnProgress') -> "void":
        return _gskernel.GsMapTileSpliter_OnProgressRemove(self, call)
    __swig_destroy__ = _gskernel.delete_GsMapTileSpliter

# Register GsMapTileSpliter in _gskernel:
_gskernel.GsMapTileSpliter_swigregister(GsMapTileSpliter)

class GsBaseSplit(object):
    r""" 矢量切片基类"""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __swig_destroy__ = _gskernel.delete_GsBaseSplit

    def Split(self, *args) -> "bool":
        r"""
        *Overload 1:*
         将几何切一个层级范围 :param GsGeometry*: pGeo, 几何对象 :param int: nminLevel, 最小层级 :param int: nMaxLevel 最大层级 :rtype: boolean
        :return: true 切割成功 ,OnSpliter 将传出切割好的瓦片, 通过反复处理OnSpliter中传出的几何即可拿到此地物切割完成的数据

        |

        *Overload 2:*
         将几何切一个层级 :param GsGeometry*: pGeo, 几何对象 :param int: nLevel, 层级 :rtype: boolean
        :return: true 切割成功 ,OnSpliter 将传出切割好的瓦片, 通过反复处理OnSpliter中传出的几何即可拿到此地物切割完成的数据

        |

        *Overload 3:*
         将几何切一个层级 :param GsGeometry*: pGeo, 几何对象 :param int: nLevel, 层级 :rtype: boolean
        :return: true 切割成功 ,OnSpliter 将传出切割好的瓦片, 通过反复处理OnSpliter中传出的几何即可拿到此地物切割完成的数据
        """
        return _gskernel.GsBaseSplit_Split(self, *args)

    def SimplfyTol(self, *args) -> "double":
        r"""
        *Overload 1:*
         简化参数,为0不简化, 其他数值按照给定比例简化, 建议给切割层级的当前分辨 :param GsGeometry*:

        |

        *Overload 2:*
         简化参数 :rtype: float
        :return: GsGeometry*
        """
        return _gskernel.GsBaseSplit_SimplfyTol(self, *args)

    def Boundary(self, *args) -> "GsGeometry *":
        r"""
        *Overload 1:*
         设置边界 :param GsGeometry: * pGeo

        |

        *Overload 2:*
         获取边界 :rtype: :py:class:`GsGeometry`
        :return: GsGeometry*
        """
        return _gskernel.GsBaseSplit_Boundary(self, *args)

    def ClipBoundary(self, *args) -> "void":
        r"""
        *Overload 1:*
         获取是否裁切边界 :param bClip: 	

        |

        *Overload 2:*
         设置是否裁切边界 :type bClip: boolean
        :param bClip:
        """
        return _gskernel.GsBaseSplit_ClipBoundary(self, *args)

    def TileExpendTol(self, *args) -> "int":
        r"""
        *Overload 1:*
         设置外扩的像素大小, 256*256 -> 288*288  如: 瓦片大小为256*256, 实际生成的数据为288*288 范围的数据, 每个瓦片边多出8*8 的数据用于接边显示  所以如果设置为0, 在绘制的瓦片可能存在格网 :param GsGeometry*:

        |

        *Overload 2:*
         获取外扩的像素大小 :rtype: int
        :return: GsGeometry*
        """
        return _gskernel.GsBaseSplit_TileExpendTol(self, *args)

    def Pyramid(self, *args) -> "GsPyramid *":
        r"""
        *Overload 1:*
         设置切片金字塔 :param GsPyramid*:  ptrPyramid金字塔参数

        |

        *Overload 2:*
         获取切片金字塔 :rtype: :py:class:`GsPyramid`
        :return: GsPyramid*
        """
        return _gskernel.GsBaseSplit_Pyramid(self, *args)

# Register GsBaseSplit in _gskernel:
_gskernel.GsBaseSplit_swigregister(GsBaseSplit)

class GsFileVectorTileSpliter(GsBaseSplit):
    r""" 基于文件的矢量切片"""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        _gskernel.GsFileVectorTileSpliter_swiginit(self, _gskernel.new_GsFileVectorTileSpliter(*args))
    __swig_destroy__ = _gskernel.delete_GsFileVectorTileSpliter

    def Level(self, nMinLevel: 'int', nMaxLevel: 'int') -> "void":
        r"""
         设置瓦片的最小及最大层级 :type nMinLevel: int
        :param nMinLevel:  :type nMaxLevel: int
        :param nMaxLevel:
        """
        return _gskernel.GsFileVectorTileSpliter_Level(self, nMinLevel, nMaxLevel)

    def TileObjectCount(self, *args) -> "int":
        return _gskernel.GsFileVectorTileSpliter_TileObjectCount(self, *args)

    def TilePointCount(self, *args) -> "int":
        r"""
        *Overload 1:*
         设置单个瓦片中最小点数个数 :type nObjCount: int
        :param nObjCount:

        |

        *Overload 2:*
         设置单个瓦片中最小点数个数 :param nObjCount:
        """
        return _gskernel.GsFileVectorTileSpliter_TilePointCount(self, *args)

    def TileClass(self, pTileClass: 'GsTileClass') -> "void":
        r"""
         设置瓦片对象 :type pTileClass: :py:class:`GsTileClass`
        :param pTileClass:
        """
        return _gskernel.GsFileVectorTileSpliter_TileClass(self, pTileClass)

    def GZipCompress(self, bGZip: 'bool') -> "void":
        r"""
         设置压缩 :type bGZip: boolean
        :param bGZip:
        """
        return _gskernel.GsFileVectorTileSpliter_GZipCompress(self, bGZip)

    def CachePath(self, strPath: 'char const *') -> "void":
        r""" 设置临时路径"""
        return _gskernel.GsFileVectorTileSpliter_CachePath(self, strPath)

    def StartUnionLevel(self, nLevel: 'int') -> "void":
        r"""
         设置开始缩并的层级 :type nLevel: int
        :param nLevel:
        """
        return _gskernel.GsFileVectorTileSpliter_StartUnionLevel(self, nLevel)

    def FilterExtent(self, *args) -> "void":
        return _gskernel.GsFileVectorTileSpliter_FilterExtent(self, *args)

    def CompressionRatio(self, dCompressionRatio: 'double') -> "void":
        r""" 设置压缩比例"""
        return _gskernel.GsFileVectorTileSpliter_CompressionRatio(self, dCompressionRatio)

    def AddToGseFile(self, *args) -> "void":
        r"""
        *Overload 1:*
         :type pFcls: :py:class:`GsFeatureClass`
         :param pFcls:

        |

        *Overload 2:*
         :type fcs: string
         :param fcs:

        |

        *Overload 3:*
         :type db: :py:class:`GsGeoDatabase`
         :param db:  :type clsname: string
        :param clsname:
        """
        return _gskernel.GsFileVectorTileSpliter_AddToGseFile(self, *args)

    def Add(self, pFea: 'GsFeature', pIndex: 'int *'=None, indexLenth: 'int'=0, feaName: 'char const *'=None) -> "void":
        return _gskernel.GsFileVectorTileSpliter_Add(self, pFea, pIndex, indexLenth, feaName)

    def Consistent(self, nLevel: 'int') -> "void":
        r"""
         对临时文件进行top一致性处理 :type nLevel: int
        :param nLevel:
        """
        return _gskernel.GsFileVectorTileSpliter_Consistent(self, nLevel)

    def ClipCut(self, level: 'int', tol_expand: 'double') -> "void":
        r"""
         tol_expand 外扩容查，单位为瓦片的大小 :type level: int
        :param level:  :type tol_expand: float
        :param tol_expand:
        """
        return _gskernel.GsFileVectorTileSpliter_ClipCut(self, level, tol_expand)

    def TilePixelExtent(self, *args) -> "int":
        r"""
        *Overload 1:*
         瓦片有效像素大小 :type TilenPixel: int
        :param TilenPixel: 默认4096,最小256,越小瓦片越小

        |

        *Overload 2:*
         瓦片有效像素大小 :param TilenPixel: 默认4096,最小256,越小瓦片越小
        """
        return _gskernel.GsFileVectorTileSpliter_TilePixelExtent(self, *args)

    def Clip(self, bClip: 'bool') -> "bool":
        return _gskernel.GsFileVectorTileSpliter_Clip(self, bClip)

    def CoordinateTransformation(self, ptrTrans: 'GsCoordinateTransformation') -> "void":
        return _gskernel.GsFileVectorTileSpliter_CoordinateTransformation(self, ptrTrans)

    def OnCommitAdd(self, call: 'GsFileVectorTileSpliter_OnCommit') -> "void":
        return _gskernel.GsFileVectorTileSpliter_OnCommitAdd(self, call)

    def OnCommitRemove(self, call: 'GsFileVectorTileSpliter_OnCommit') -> "void":
        return _gskernel.GsFileVectorTileSpliter_OnCommitRemove(self, call)

# Register GsFileVectorTileSpliter in _gskernel:
_gskernel.GsFileVectorTileSpliter_swigregister(GsFileVectorTileSpliter)

class GsMemeoryTileSplit(GsBaseSplit):
    r""" 基于内存的矢量切片, 此类负责生产,消费自己通过缓存去取"""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, maxCount: 'int'=0):
        _gskernel.GsMemeoryTileSplit_swiginit(self, _gskernel.new_GsMemeoryTileSplit(maxCount))

    def Next(self) -> "GsSmarterPtr< GsGeometry >":
        return _gskernel.GsMemeoryTileSplit_Next(self)
    __swig_destroy__ = _gskernel.delete_GsMemeoryTileSplit

# Register GsMemeoryTileSplit in _gskernel:
_gskernel.GsMemeoryTileSplit_swigregister(GsMemeoryTileSplit)

class GsSingleTileSplit(GsBaseSplit):
    r""" 输入geometry 切割完 且使用委托方式掉用,  这样Java不用继承此类就可以直接使用此类完成几何切割能力"""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self):
        _gskernel.GsSingleTileSplit_swiginit(self, _gskernel.new_GsSingleTileSplit())

    def OnGeometrySplitAdd(self, call: 'GsSingleTileSplit_OnGeometrySplit') -> "void":
        return _gskernel.GsSingleTileSplit_OnGeometrySplitAdd(self, call)

    def OnGeometrySplitRemove(self, call: 'GsSingleTileSplit_OnGeometrySplit') -> "void":
        return _gskernel.GsSingleTileSplit_OnGeometrySplitRemove(self, call)
    __swig_destroy__ = _gskernel.delete_GsSingleTileSplit

# Register GsSingleTileSplit in _gskernel:
_gskernel.GsSingleTileSplit_swigregister(GsSingleTileSplit)

class GsGeohash(object):
    r""" Geohash计算"""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, xmin: 'double'=-180.0, ymin: 'double'=-90.0, xmax: 'double'=180.0, ymax: 'double'=90.0):
        _gskernel.GsGeohash_swiginit(self, _gskernel.new_GsGeohash(xmin, ymin, xmax, ymax))

    def Forward(self, x: 'double', y: 'double', len: 'int') -> "GsString":
        r""" Geohash正算。"""
        return _gskernel.GsGeohash_Forward(self, x, y, len)
    __swig_destroy__ = _gskernel.delete_GsGeohash

# Register GsGeohash in _gskernel:
_gskernel.GsGeohash_swigregister(GsGeohash)

class GsPCGeoDatabase(object):
    r""" 桌面数据库环境初始化"""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    @staticmethod
    def Initialize() -> "void":
        r""" 初始化"""
        return _gskernel.GsPCGeoDatabase_Initialize()

    def __init__(self):
        _gskernel.GsPCGeoDatabase_swiginit(self, _gskernel.new_GsPCGeoDatabase())
    __swig_destroy__ = _gskernel.delete_GsPCGeoDatabase

# Register GsPCGeoDatabase in _gskernel:
_gskernel.GsPCGeoDatabase_swigregister(GsPCGeoDatabase)

def GsPCGeoDatabase_Initialize() -> "void":
    r""" 初始化"""
    return _gskernel.GsPCGeoDatabase_Initialize()

class GsMapDefine_OnOpenFeatureClass(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    __swig_destroy__ = _gskernel.delete_GsMapDefine_OnOpenFeatureClass

    def OnOpenFeatureClass(self, conn: 'GsConnectProperty', name: 'char const *') -> "GsFeatureClass *":
        return _gskernel.GsMapDefine_OnOpenFeatureClass_OnOpenFeatureClass(self, conn, name)

    def __init__(self):
        if self.__class__ == GsMapDefine_OnOpenFeatureClass:
            _self = None
        else:
            _self = self
        _gskernel.GsMapDefine_OnOpenFeatureClass_swiginit(self, _gskernel.new_GsMapDefine_OnOpenFeatureClass(_self, ))
    def __disown__(self):
        self.this.disown()
        _gskernel.disown_GsMapDefine_OnOpenFeatureClass(self)
        return weakref.proxy(self)

# Register GsMapDefine_OnOpenFeatureClass in _gskernel:
_gskernel.GsMapDefine_OnOpenFeatureClass_swigregister(GsMapDefine_OnOpenFeatureClass)

class GsMapDefine_OnOpenTileClass(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    __swig_destroy__ = _gskernel.delete_GsMapDefine_OnOpenTileClass

    def OnOpenTileClass(self, conn: 'GsConnectProperty', name: 'char const *') -> "GsTileClass *":
        return _gskernel.GsMapDefine_OnOpenTileClass_OnOpenTileClass(self, conn, name)

    def __init__(self):
        if self.__class__ == GsMapDefine_OnOpenTileClass:
            _self = None
        else:
            _self = self
        _gskernel.GsMapDefine_OnOpenTileClass_swiginit(self, _gskernel.new_GsMapDefine_OnOpenTileClass(_self, ))
    def __disown__(self):
        self.this.disown()
        _gskernel.disown_GsMapDefine_OnOpenTileClass(self)
        return weakref.proxy(self)

# Register GsMapDefine_OnOpenTileClass in _gskernel:
_gskernel.GsMapDefine_OnOpenTileClass_swigregister(GsMapDefine_OnOpenTileClass)

class GsMapDefine_OnOpenRasterClass(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    __swig_destroy__ = _gskernel.delete_GsMapDefine_OnOpenRasterClass

    def OnOpenRasterClass(self, conn: 'GsConnectProperty', name: 'char const *') -> "GsRasterClass *":
        return _gskernel.GsMapDefine_OnOpenRasterClass_OnOpenRasterClass(self, conn, name)

    def __init__(self):
        if self.__class__ == GsMapDefine_OnOpenRasterClass:
            _self = None
        else:
            _self = self
        _gskernel.GsMapDefine_OnOpenRasterClass_swiginit(self, _gskernel.new_GsMapDefine_OnOpenRasterClass(_self, ))
    def __disown__(self):
        self.this.disown()
        _gskernel.disown_GsMapDefine_OnOpenRasterClass(self)
        return weakref.proxy(self)

# Register GsMapDefine_OnOpenRasterClass in _gskernel:
_gskernel.GsMapDefine_OnOpenRasterClass_swigregister(GsMapDefine_OnOpenRasterClass)

class GsMapDefine(object):
    r""" 地图定义文件读写类"""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        r""" 从地图定义文件打开"""
        _gskernel.GsMapDefine_swiginit(self, _gskernel.new_GsMapDefine(*args))

    def FilePath(self, *args) -> "GsString":
        r"""
        *Overload 1:*
        设置地图定义文件的路径

        |

        *Overload 2:*
        获取地图定义文件的路径
        """
        return _gskernel.GsMapDefine_FilePath(self, *args)

    def ParserMap(self, *args) -> "bool":
        r"""
        *Overload 1:*
        解析地图定义文件为地图

        |

        *Overload 2:*
        解析地图定义文件为地图

        |

        *Overload 3:*
        解析地图定义文件为地图
        """
        return _gskernel.GsMapDefine_ParserMap(self, *args)

    def SaveMap(self, pMap: 'GsMap', strFilePath: 'char const *') -> "bool":
        r""" 保存到文件"""
        return _gskernel.GsMapDefine_SaveMap(self, pMap, strFilePath)

    def OnOpenFeatureClassAdd(self, call: 'GsMapDefine_OnOpenFeatureClass') -> "void":
        r""" 发生长事务执行的时候进度信息，例如创建金字塔"""
        return _gskernel.GsMapDefine_OnOpenFeatureClassAdd(self, call)

    def OnOpenFeatureClassRemove(self, call: 'GsMapDefine_OnOpenFeatureClass') -> "void":
        return _gskernel.GsMapDefine_OnOpenFeatureClassRemove(self, call)

    def OnOpenTileClassAdd(self, call: 'GsMapDefine_OnOpenTileClass') -> "void":
        return _gskernel.GsMapDefine_OnOpenTileClassAdd(self, call)

    def OnOpenTileClassRemove(self, call: 'GsMapDefine_OnOpenTileClass') -> "void":
        return _gskernel.GsMapDefine_OnOpenTileClassRemove(self, call)

    def OnOpenRasterClassAdd(self, call: 'GsMapDefine_OnOpenRasterClass') -> "void":
        return _gskernel.GsMapDefine_OnOpenRasterClassAdd(self, call)

    def OnOpenRasterClassRemove(self, call: 'GsMapDefine_OnOpenRasterClass') -> "void":
        return _gskernel.GsMapDefine_OnOpenRasterClassRemove(self, call)
    __swig_destroy__ = _gskernel.delete_GsMapDefine

# Register GsMapDefine in _gskernel:
_gskernel.GsMapDefine_swigregister(GsMapDefine)

class GsDCOTranslater(GsRefObject):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, vecParameter: 'GsStringVector'):
        _gskernel.GsDCOTranslater_swiginit(self, _gskernel.new_GsDCOTranslater(vecParameter))
    __swig_destroy__ = _gskernel.delete_GsDCOTranslater

    def Translate(self, mapFile: 'char const *') -> "bool":
        r"""
         执行数据转换 :type mapFile: string
        :param mapFile: 映射文件的路径
        """
        return _gskernel.GsDCOTranslater_Translate(self, mapFile)

# Register GsDCOTranslater in _gskernel:
_gskernel.GsDCOTranslater_swigregister(GsDCOTranslater)

class GsWebUriParser(GsRefObject):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __swig_destroy__ = _gskernel.delete_GsWebUriParser

    def FormatUri(self) -> "GsString":
        r""" 创建格式化的URL字符串"""
        return _gskernel.GsWebUriParser_FormatUri(self)

    def UriString(self) -> "GsString":
        r""" 获取Uri字符串"""
        return _gskernel.GsWebUriParser_UriString(self)

    def ParseCapability(self) -> "bool":
        r""" 解析描述信息"""
        return _gskernel.GsWebUriParser_ParseCapability(self)

# Register GsWebUriParser in _gskernel:
_gskernel.GsWebUriParser_swigregister(GsWebUriParser)

class GsTMSUriParser(GsWebUriParser):
    r""" 瓦片地图服务解析器"""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr

    def LayerName(self) -> "GsString":
        r""" 获取图层名"""
        return _gskernel.GsTMSUriParser_LayerName(self)

    def LayerExtent(self) -> "GsBox":
        r""" 获取图层范围"""
        return _gskernel.GsTMSUriParser_LayerExtent(self)

    def TopLevel(self) -> "int":
        r""" 顶层瓦片级别"""
        return _gskernel.GsTMSUriParser_TopLevel(self)

    def BottomLevel(self) -> "int":
        r""" 底层瓦片级别"""
        return _gskernel.GsTMSUriParser_BottomLevel(self)

    def Pyramid(self) -> "GsPyramid *":
        r""" 金字塔"""
        return _gskernel.GsTMSUriParser_Pyramid(self)

    def SpatialReference(self) -> "GsSpatialReference *":
        r""" 空间参考"""
        return _gskernel.GsTMSUriParser_SpatialReference(self)
    __swig_destroy__ = _gskernel.delete_GsTMSUriParser

# Register GsTMSUriParser in _gskernel:
_gskernel.GsTMSUriParser_swigregister(GsTMSUriParser)

eTiandituVectorGeographicWMTS = _gskernel.eTiandituVectorGeographicWMTS
r""" 天地图地理坐标系矢量瓦片WMTS服务"""
eTiandituImageGeographicWMTS = _gskernel.eTiandituImageGeographicWMTS
eTiandituVectorGeographicGeoTile = _gskernel.eTiandituVectorGeographicGeoTile
eTiandituImageGeographicGeoTile = _gskernel.eTiandituImageGeographicGeoTile
eTiandituVectorWebMercatorWMTS = _gskernel.eTiandituVectorWebMercatorWMTS
eTiandituImageWebMercatorWMTS = _gskernel.eTiandituImageWebMercatorWMTS
eAmapVectorWebMercator = _gskernel.eAmapVectorWebMercator
r""" 高德"""
eAmapImageWebMercator = _gskernel.eAmapImageWebMercator
eGoogleVectorWebMercator = _gskernel.eGoogleVectorWebMercator
r""" 谷歌地图"""
eGoogleImageWebMercator = _gskernel.eGoogleImageWebMercator
eBingVectorWebMercator = _gskernel.eBingVectorWebMercator
r""" 必应地图"""
eBingImageWebMercator = _gskernel.eBingImageWebMercator
eOSMVectorWebMercator = _gskernel.eOSMVectorWebMercator
r""" OSM"""
eOSMImageWebMercator = _gskernel.eOSMImageWebMercator
eArcgisOnlineVectorWebMercator = _gskernel.eArcgisOnlineVectorWebMercator
r""" Arcgis"""
eArcgisOnlineImageWebMercator = _gskernel.eArcgisOnlineImageWebMercator
class GsWellknownTMSUriParser(GsTMSUriParser):
    r""" 公众瓦片地图解析"""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, web: 'GsWellknownWebTileService'):
        _gskernel.GsWellknownTMSUriParser_swiginit(self, _gskernel.new_GsWellknownTMSUriParser(web))

    def FormatUri(self) -> "GsString":
        r""" 创建格式化的URL字符串"""
        return _gskernel.GsWellknownTMSUriParser_FormatUri(self)

    def LayerName(self) -> "GsString":
        r""" 获取图层名"""
        return _gskernel.GsWellknownTMSUriParser_LayerName(self)

    def LayerExtent(self) -> "GsBox":
        r""" 获取图层范围"""
        return _gskernel.GsWellknownTMSUriParser_LayerExtent(self)

    def TopLevel(self) -> "int":
        r""" 顶层瓦片级别"""
        return _gskernel.GsWellknownTMSUriParser_TopLevel(self)

    def BottomLevel(self) -> "int":
        r""" 底层瓦片级别"""
        return _gskernel.GsWellknownTMSUriParser_BottomLevel(self)

    def Pyramid(self) -> "GsPyramid *":
        r""" 金字塔"""
        return _gskernel.GsWellknownTMSUriParser_Pyramid(self)

    def SpatialReference(self) -> "GsSpatialReference *":
        r""" 空间参考"""
        return _gskernel.GsWellknownTMSUriParser_SpatialReference(self)
    __swig_destroy__ = _gskernel.delete_GsWellknownTMSUriParser

# Register GsWellknownTMSUriParser in _gskernel:
_gskernel.GsWellknownTMSUriParser_swigregister(GsWellknownTMSUriParser)

class GsWMTSUriParser(GsTMSUriParser):
    r""" WMTS服务解析类"""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, strUri: 'char const *'):
        _gskernel.GsWMTSUriParser_swiginit(self, _gskernel.new_GsWMTSUriParser(strUri))
    __swig_destroy__ = _gskernel.delete_GsWMTSUriParser

    def FormatUri(self) -> "GsString":
        r""" 创建格式化的URL字符串"""
        return _gskernel.GsWMTSUriParser_FormatUri(self)

    def LayerExtent(self) -> "GsBox":
        r""" 获取图层范围"""
        return _gskernel.GsWMTSUriParser_LayerExtent(self)

    def TopLevel(self) -> "int":
        r""" 顶层瓦片级别"""
        return _gskernel.GsWMTSUriParser_TopLevel(self)

    def BottomLevel(self) -> "int":
        r""" 底层瓦片级别"""
        return _gskernel.GsWMTSUriParser_BottomLevel(self)

    def Pyramid(self) -> "GsPyramid *":
        r""" 金字塔"""
        return _gskernel.GsWMTSUriParser_Pyramid(self)

    def SpatialReference(self) -> "GsSpatialReference *":
        r""" 空间参考"""
        return _gskernel.GsWMTSUriParser_SpatialReference(self)

    def LayerName(self, *args) -> "bool":
        r"""
        *Overload 1:*
        获取图层名

        |

        *Overload 2:*
        设置当前图层名
        """
        return _gskernel.GsWMTSUriParser_LayerName(self, *args)

    def AllLayerName(self) -> "GsVector< GsString >":
        r""" 获取图层名"""
        return _gskernel.GsWMTSUriParser_AllLayerName(self)

    def CurrentTileMatrixSet(self, *args) -> "GsString":
        r"""
        *Overload 1:*
        获取样式类型 获取图片格式 获取瓦片矩阵集名称 设置当前瓦片矩阵集

        |

        *Overload 2:*
        获取当前瓦片矩阵集
        """
        return _gskernel.GsWMTSUriParser_CurrentTileMatrixSet(self, *args)

# Register GsWMTSUriParser in _gskernel:
_gskernel.GsWMTSUriParser_swigregister(GsWMTSUriParser)

class GsGeoTileUriParser(GsTMSUriParser):
    r""" 吉奥瓦片服务解析类"""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, strUri: 'char const *'):
        _gskernel.GsGeoTileUriParser_swiginit(self, _gskernel.new_GsGeoTileUriParser(strUri))
    __swig_destroy__ = _gskernel.delete_GsGeoTileUriParser

    def FormatUri(self) -> "GsString":
        r""" 创建格式化的URL字符串"""
        return _gskernel.GsGeoTileUriParser_FormatUri(self)

    def LayerName(self) -> "GsString":
        r""" 图层名"""
        return _gskernel.GsGeoTileUriParser_LayerName(self)

    def LayerExtent(self) -> "GsBox":
        r""" 获取图层范围"""
        return _gskernel.GsGeoTileUriParser_LayerExtent(self)

    def TopLevel(self) -> "int":
        r""" 顶层瓦片级别"""
        return _gskernel.GsGeoTileUriParser_TopLevel(self)

    def BottomLevel(self) -> "int":
        r""" 底层瓦片级别"""
        return _gskernel.GsGeoTileUriParser_BottomLevel(self)

    def Pyramid(self) -> "GsPyramid *":
        r""" 金字塔"""
        return _gskernel.GsGeoTileUriParser_Pyramid(self)

    def SpatialReference(self) -> "GsSpatialReference *":
        r""" 空间参考"""
        return _gskernel.GsGeoTileUriParser_SpatialReference(self)

    def TileDataType(self) -> "GsString":
        r"""
         瓦片数据类型 :rtype: :py:class:`GsString`
        :return: image-影像数据、terrain-地形数据、wtfs-地名数据
        """
        return _gskernel.GsGeoTileUriParser_TileDataType(self)

# Register GsGeoTileUriParser in _gskernel:
_gskernel.GsGeoTileUriParser_swigregister(GsGeoTileUriParser)

class GsWTFSUriParser(GsGeoTileUriParser):
    r""" 地名服务解析类"""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, strUri: 'char const *'):
        _gskernel.GsWTFSUriParser_swiginit(self, _gskernel.new_GsWTFSUriParser(strUri))
    __swig_destroy__ = _gskernel.delete_GsWTFSUriParser

    def FormatUri(self) -> "GsString":
        r""" 创建格式化的URL字符串"""
        return _gskernel.GsWTFSUriParser_FormatUri(self)

    def FormatIconUri(self) -> "GsString":
        r""" 创建格式化的请求ICON字符串"""
        return _gskernel.GsWTFSUriParser_FormatIconUri(self)

# Register GsWTFSUriParser in _gskernel:
_gskernel.GsWTFSUriParser_swigregister(GsWTFSUriParser)

class GsUnsignedIntVector(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self):
        _gskernel.GsUnsignedIntVector_swiginit(self, _gskernel.new_GsUnsignedIntVector())
    __swig_destroy__ = _gskernel.delete_GsUnsignedIntVector

    def add(self, obj: 'unsigned int const &') -> "void":
        return _gskernel.GsUnsignedIntVector_add(self, obj)

    def size(self) -> "size_t":
        return _gskernel.GsUnsignedIntVector_size(self)

    def clear(self) -> "void":
        return _gskernel.GsUnsignedIntVector_clear(self)

    def empty(self) -> "bool":
        return _gskernel.GsUnsignedIntVector_empty(self)

    def get(self, n: 'int') -> "unsigned int":
        return _gskernel.GsUnsignedIntVector_get(self, n)

    def set(self, n: 'int', val: 'unsigned int const &') -> "void":
        return _gskernel.GsUnsignedIntVector_set(self, n, val)

# Register GsUnsignedIntVector in _gskernel:
_gskernel.GsUnsignedIntVector_swigregister(GsUnsignedIntVector)

class GsMBFeatureVector(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self):
        _gskernel.GsMBFeatureVector_swiginit(self, _gskernel.new_GsMBFeatureVector())
    __swig_destroy__ = _gskernel.delete_GsMBFeatureVector

    def add(self, obj: 'GsMBFeature') -> "void":
        return _gskernel.GsMBFeatureVector_add(self, obj)

    def size(self) -> "size_t":
        return _gskernel.GsMBFeatureVector_size(self)

    def clear(self) -> "void":
        return _gskernel.GsMBFeatureVector_clear(self)

    def empty(self) -> "bool":
        return _gskernel.GsMBFeatureVector_empty(self)

    def get(self, n: 'int') -> "GsMBFeature":
        return _gskernel.GsMBFeatureVector_get(self, n)

    def set(self, n: 'int', val: 'GsMBFeature') -> "void":
        return _gskernel.GsMBFeatureVector_set(self, n, val)

# Register GsMBFeatureVector in _gskernel:
_gskernel.GsMBFeatureVector_swigregister(GsMBFeatureVector)

class GsAnyVector(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self):
        _gskernel.GsAnyVector_swiginit(self, _gskernel.new_GsAnyVector())
    __swig_destroy__ = _gskernel.delete_GsAnyVector

    def add(self, obj: 'GsAny') -> "void":
        return _gskernel.GsAnyVector_add(self, obj)

    def size(self) -> "size_t":
        return _gskernel.GsAnyVector_size(self)

    def clear(self) -> "void":
        return _gskernel.GsAnyVector_clear(self)

    def empty(self) -> "bool":
        return _gskernel.GsAnyVector_empty(self)

    def get(self, n: 'int') -> "GsAny":
        return _gskernel.GsAnyVector_get(self, n)

    def set(self, n: 'int', val: 'GsAny') -> "void":
        return _gskernel.GsAnyVector_set(self, n, val)

# Register GsAnyVector in _gskernel:
_gskernel.GsAnyVector_swigregister(GsAnyVector)

eMB_UNKNOWN = _gskernel.eMB_UNKNOWN
eMB_POINT = _gskernel.eMB_POINT
eMB_LINESTRING = _gskernel.eMB_LINESTRING
eMB_POLYGON = _gskernel.eMB_POLYGON
class GsMBFeature(object):
    r""" 基于MapBox矢量瓦片标准的矢量地物对象"""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    ID = property(_gskernel.GsMBFeature_ID_get, _gskernel.GsMBFeature_ID_set, doc=r""" 地物唯一ID,PB索引1，缺省值0， PB:optional uint64 id = 1[default = 0];""")
    Tags = property(_gskernel.GsMBFeature_Tags_get, _gskernel.GsMBFeature_Tags_set, doc=r""" 地物属性在StringTable中的索引，PB索引1 偶数为Key，基数为Value PB:repeated uint32 tags = 2[packed = true];""")
    Type = property(_gskernel.GsMBFeature_Type_get, _gskernel.GsMBFeature_Type_set, doc=r""" 几何类型，PB索引3 PB:optional GeomType type = 3[default = UNKNOWN];""")
    Geometry = property(_gskernel.GsMBFeature_Geometry_get, _gskernel.GsMBFeature_Geometry_set, doc=r""" 几何数据，PB索引4 repeated uint32 geometry = 4[packed = true];""")
    GeometryPtr = property(_gskernel.GsMBFeature_GeometryPtr_get, _gskernel.GsMBFeature_GeometryPtr_set, doc=r""" 高度编码后的几何数据对应的解码后的几何对象""")

    def __init__(self):
        _gskernel.GsMBFeature_swiginit(self, _gskernel.new_GsMBFeature())

    def Save(self, data: 'GsString') -> "bool":
        r"""
         存储为二进制数据 :type data: :py:class:`GsString`
        :param data:  :rtype: boolean
        :return: 
        """
        return _gskernel.GsMBFeature_Save(self, data)

    def IsValid(self) -> "bool":
        r"""
         标识图层是否有效 :rtype: boolean
        :return: 
        """
        return _gskernel.GsMBFeature_IsValid(self)

    def EnsureGeometry(self, tileExtent: 'GsBox', nPixelEtent: 'unsigned int'=4096) -> "GsGeometry *":
        r"""
         获取解压后的几何对象 :type tileExtent: :py:class:`GsBox`
        :param tileExtent:  :type nPixelEtent: int
        :param nPixelEtent:  :rtype: :py:class:`GsGeometry`
        :return: 
        """
        return _gskernel.GsMBFeature_EnsureGeometry(self, tileExtent, nPixelEtent)

    def AssignGeometry(self, pGeo: 'GsGeometry', tileExtent: 'GsBox', nPixelEtent: 'unsigned int'=4096) -> "void":
        r"""
         设置Geometry将Geometry编码 :type pGeo: :py:class:`GsGeometry`
        :param pGeo:  :type tileExtent: :py:class:`GsBox`
        :param tileExtent:  :type nPixelEtent: int
        :param nPixelEtent:
        """
        return _gskernel.GsMBFeature_AssignGeometry(self, pGeo, tileExtent, nPixelEtent)

    def Layer(self, Layer: 'GsMBLayer') -> "void":
        r"""
         设置图层,方便查询,不提供获取方法 :type Layer: :py:class:`GsMBLayer`
        :param Layer:
        """
        return _gskernel.GsMBFeature_Layer(self, Layer)
    __swig_destroy__ = _gskernel.delete_GsMBFeature

# Register GsMBFeature in _gskernel:
_gskernel.GsMBFeature_swigregister(GsMBFeature)

class GsMBLayer(object):
    r""" 基于MapBox矢量瓦片标准的矢量图层对象"""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    Version = property(_gskernel.GsMBLayer_Version_get, _gskernel.GsMBLayer_Version_set, doc=r""" 版本号,PB索引15，缺省值1， PB:required uint32 version = 15[default = 1];""")
    Name = property(_gskernel.GsMBLayer_Name_get, _gskernel.GsMBLayer_Name_set, doc=r""" 图层名称,PB索引1， PB:required string name = 1;""")
    Features = property(_gskernel.GsMBLayer_Features_get, _gskernel.GsMBLayer_Features_set, doc=r""" 所有的地物,PB索引2， PB:repeated Feature features = 2;""")
    Keys = property(_gskernel.GsMBLayer_Keys_get, _gskernel.GsMBLayer_Keys_set, doc=r""" 字符串表StringTable,PB索引3， PB:repeated string keys = 3;""")
    Values = property(_gskernel.GsMBLayer_Values_get, _gskernel.GsMBLayer_Values_set, doc=r""" 属性值表,PB索引4， PB:repeated Value values = 4;""")
    Extent = property(_gskernel.GsMBLayer_Extent_get, _gskernel.GsMBLayer_Extent_set, doc=r""" 逻辑范围,PB索引5，缺省值4096 PB:optional uint32 extent = 5[default = 4096];""")

    def __init__(self):
        _gskernel.GsMBLayer_swiginit(self, _gskernel.new_GsMBLayer())

    def Save(self, data: 'GsString') -> "bool":
        r"""
         存储为二进制数据 :type data: :py:class:`GsString`
        :param data: 保存的目标数据 :rtype: boolean
        :return: 返回是否存储成功
        """
        return _gskernel.GsMBLayer_Save(self, data)

    def IsValid(self) -> "bool":
        r"""
         标识图层是否有效 :rtype: boolean
        :return: 返回是否有效
        """
        return _gskernel.GsMBLayer_IsValid(self)

    def QueryFeature(self, oid: 'unsigned long long') -> "GsMBFeature &":
        r"""
         根据OID获取一个Feature :type oid: int
        :param oid: 需要查找Feature的OID :rtype: :py:class:`GsMBFeature`
        :return: 返回Feature对象
        """
        return _gskernel.GsMBLayer_QueryFeature(self, oid)

    def ExistFeature(self, oid: 'unsigned long long') -> "bool":
        r"""
         根据OID判断Feature是否才能在 :type oid: int
        :param oid: 需要查找的oid :rtype: boolean
        :return: 返回是否存在
        """
        return _gskernel.GsMBLayer_ExistFeature(self, oid)

    def AddKey(self, key: 'char const *', bIgnoreCase: 'bool'=True) -> "unsigned int":
        r"""
         增加一个Key，返回Key在StringTable中的索引 :type key: string
        :param key: 需要查找的字符串 :type bIgnoreCase: boolean
        :param bIgnoreCase: 是否忽略大小写 :rtype: int
        :return: 返回查找到的索引
        """
        return _gskernel.GsMBLayer_AddKey(self, key, bIgnoreCase)

    def AddValue(self, val: 'GsAny') -> "unsigned int":
        r"""
         增加一个值，返回值在字典中的索引 :type val: :py:class:`GsAny`
        :param val: 添加的值 :rtype: int
        :return: 返回添加的值在字典中的索引
        """
        return _gskernel.GsMBLayer_AddValue(self, val)

    def Clear(self) -> "void":
        r""" 清空"""
        return _gskernel.GsMBLayer_Clear(self)
    __swig_destroy__ = _gskernel.delete_GsMBLayer

# Register GsMBLayer in _gskernel:
_gskernel.GsMBLayer_swigregister(GsMBLayer)

class GsMBVectorTile(object):
    r""" 基于MapBox矢量瓦片标准的矢量瓦片对象 https://github.com/mapbox/vector-tile-spec"""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self):
        r""" 构造空的矢量瓦片"""
        _gskernel.GsMBVectorTile_swiginit(self, _gskernel.new_GsMBVectorTile())
    __swig_destroy__ = _gskernel.delete_GsMBVectorTile

    def Parse(self, data: 'signed char const *', nLen: 'int') -> "void":
        r"""
         从二进制数据解析 :type data: signed char
        :param data: 二进制块首地址 :type nLen: int
        :param nLen: 二进制块的长度 :rtype: void
        :return: 返回是否解析成功
        """
        return _gskernel.GsMBVectorTile_Parse(self, data, nLen)

    def Save(self, data: 'GsString') -> "bool":
        r"""
         存储为二进制数据 :type data: :py:class:`GsString`
        :param data: 保存到data对象中 :rtype: boolean
        :return: 返回是否保存成功
        """
        return _gskernel.GsMBVectorTile_Save(self, data)

    def ExistLayer(self, name: 'char const *', bIgnoreCase: 'bool'=True) -> "bool":
        r"""
         判断图层是否存在 :type name: string
        :param name: 图层的名字 :type bIgnoreCase: boolean
        :param bIgnoreCase: 是否忽略大小写 :rtype: boolean
        :return: 返回是否存在图层
        """
        return _gskernel.GsMBVectorTile_ExistLayer(self, name, bIgnoreCase)

    def Clear(self) -> "void":
        r""" 清空"""
        return _gskernel.GsMBVectorTile_Clear(self)

# Register GsMBVectorTile in _gskernel:
_gskernel.GsMBVectorTile_swigregister(GsMBVectorTile)

class GsZipMBVectorTile(GsMBVectorTile):
    r""" 基于经过GZ或ZLib压缩的矢量瓦片"""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    eUnZip = _gskernel.GsZipMBVectorTile_eUnZip
    r""" 未压缩"""
    eGZip = _gskernel.GsZipMBVectorTile_eGZip
    r""" gs压缩类型"""
    eZLib = _gskernel.GsZipMBVectorTile_eZLib
    r""" Zlib压缩"""
    m_eType = property(_gskernel.GsZipMBVectorTile_m_eType_get, _gskernel.GsZipMBVectorTile_m_eType_set)

    def __init__(self):
        _gskernel.GsZipMBVectorTile_swiginit(self, _gskernel.new_GsZipMBVectorTile())

    def Parse(self, data: 'signed char const *', nLen: 'int') -> "void":
        r"""
         从二进制数据解析 :type data: signed char
        :param data: 二进制块首地址 :type nLen: int
        :param nLen: 二进制块的长度 :rtype: void
        :return: 返回是否解析成功
        """
        return _gskernel.GsZipMBVectorTile_Parse(self, data, nLen)

    def Save(self, data: 'GsString') -> "bool":
        r"""
         存储为二进制数据 :type data: :py:class:`GsString`
        :param data: 存储为data对象 :rtype: boolean
        :return: 是否保存成功
        """
        return _gskernel.GsZipMBVectorTile_Save(self, data)
    __swig_destroy__ = _gskernel.delete_GsZipMBVectorTile

# Register GsZipMBVectorTile in _gskernel:
_gskernel.GsZipMBVectorTile_swigregister(GsZipMBVectorTile)

class GsFilterZipMBVectorTile(GsZipMBVectorTile):
    r""" 基于经过GZ或ZLib压缩的矢量瓦片,解析瓦片数据就过滤掉出需要的图层数据"""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self):
        _gskernel.GsFilterZipMBVectorTile_swiginit(self, _gskernel.new_GsFilterZipMBVectorTile())
    __swig_destroy__ = _gskernel.delete_GsFilterZipMBVectorTile

# Register GsFilterZipMBVectorTile in _gskernel:
_gskernel.GsFilterZipMBVectorTile_swigregister(GsFilterZipMBVectorTile)

class GsDoubleVector(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self):
        _gskernel.GsDoubleVector_swiginit(self, _gskernel.new_GsDoubleVector())
    __swig_destroy__ = _gskernel.delete_GsDoubleVector

    def add(self, obj: 'double const &') -> "void":
        return _gskernel.GsDoubleVector_add(self, obj)

    def size(self) -> "size_t":
        return _gskernel.GsDoubleVector_size(self)

    def clear(self) -> "void":
        return _gskernel.GsDoubleVector_clear(self)

    def empty(self) -> "bool":
        return _gskernel.GsDoubleVector_empty(self)

    def get(self, n: 'int') -> "double":
        return _gskernel.GsDoubleVector_get(self, n)

    def set(self, n: 'int', val: 'double const &') -> "void":
        return _gskernel.GsDoubleVector_set(self, n, val)

# Register GsDoubleVector in _gskernel:
_gskernel.GsDoubleVector_swigregister(GsDoubleVector)

eJoinAll = _gskernel.eJoinAll
r""" 合并所有属性"""
eJoinNoOID = _gskernel.eJoinNoOID
r""" 不合并OID"""
eJoinOnlyOID = _gskernel.eJoinOnlyOID
r""" 仅仅合并OID"""
eAsInput = _gskernel.eAsInput
r""" 数据输出结果为输入数据的最小维度"""
eAsLine = _gskernel.eAsLine
r""" 输出结果为线"""
eAsPoint = _gskernel.eAsPoint
r""" 输出结果为点"""
class GsAnalysisData(GsFeatureBuffer):
    r""" 分析数据封装。"""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self):
        _gskernel.GsAnalysisData_swiginit(self, _gskernel.new_GsAnalysisData())
    __swig_destroy__ = _gskernel.delete_GsAnalysisData

# Register GsAnalysisData in _gskernel:
_gskernel.GsAnalysisData_swigregister(GsAnalysisData)

class GsAnalysisDataIO(GsFeatureDataIO):
    r""" 分析数据读写，通过继承此类以实现"""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self):
        if self.__class__ == GsAnalysisDataIO:
            _self = None
        else:
            _self = self
        _gskernel.GsAnalysisDataIO_swiginit(self, _gskernel.new_GsAnalysisDataIO(_self, ))
    __swig_destroy__ = _gskernel.delete_GsAnalysisDataIO
    def __disown__(self):
        self.this.disown()
        _gskernel.disown_GsAnalysisDataIO(self)
        return weakref.proxy(self)

# Register GsAnalysisDataIO in _gskernel:
_gskernel.GsAnalysisDataIO_swigregister(GsAnalysisDataIO)

class GsOverlayAnalysis(GsRefObject):
    r""" 大数据叠置分析"""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, tol: 'double'):
        _gskernel.GsOverlayAnalysis_swiginit(self, _gskernel.new_GsOverlayAnalysis(tol))
    __swig_destroy__ = _gskernel.delete_GsOverlayAnalysis

    @staticmethod
    def MaxAnalysisMemorySize(*args) -> "void":
        r"""
        *Overload 1:*
        获取空间分析中最大内存使用，单位字节

        |

        *Overload 2:*
        设置空间分析中最大内存使用，单位字节
        """
        return _gskernel.GsOverlayAnalysis_MaxAnalysisMemorySize(*args)

    def Union(self, *args) -> "bool":
        r"""
        *Overload 1:*
        合并N个地物类

        |

        *Overload 2:*
        合并2个地物类
        """
        return _gskernel.GsOverlayAnalysis_Union(self, *args)

    def Erase(self, pInput: 'GsAnalysisDataIO', pErase: 'GsAnalysisDataIO', pOut: 'GsAnalysisDataIO') -> "bool":
        r""" 擦除"""
        return _gskernel.GsOverlayAnalysis_Erase(self, pInput, pErase, pOut)

    def Identity(self, pInput: 'GsAnalysisDataIO', pIdentity: 'GsAnalysisDataIO', eJoinType: 'GsJoinAttributeType', pOut: 'GsAnalysisDataIO') -> "bool":
        r""" 标记"""
        return _gskernel.GsOverlayAnalysis_Identity(self, pInput, pIdentity, eJoinType, pOut)

    def Intersect(self, *args) -> "bool":
        r"""
        *Overload 1:*
        相交

        |

        *Overload 2:*
        相交

        |

        *Overload 3:*
        相交
        """
        return _gskernel.GsOverlayAnalysis_Intersect(self, *args)

    def Update(self, pInput: 'GsAnalysisDataIO', pUpdate: 'GsAnalysisDataIO', pOut: 'GsAnalysisDataIO') -> "bool":
        r""" 更新"""
        return _gskernel.GsOverlayAnalysis_Update(self, pInput, pUpdate, pOut)

    def SymmetricalDifference(self, vInputA: 'GsAnalysisDataIO', vInputB: 'GsAnalysisDataIO', eJoinType: 'GsJoinAttributeType', pOut: 'GsAnalysisDataIO') -> "bool":
        r""" 对称差"""
        return _gskernel.GsOverlayAnalysis_SymmetricalDifference(self, vInputA, vInputB, eJoinType, pOut)

# Register GsOverlayAnalysis in _gskernel:
_gskernel.GsOverlayAnalysis_swigregister(GsOverlayAnalysis)

def GsOverlayAnalysis_MaxAnalysisMemorySize(*args) -> "void":
    r"""
    *Overload 1:*
    获取空间分析中最大内存使用，单位字节

    |

    *Overload 2:*
    设置空间分析中最大内存使用，单位字节
    """
    return _gskernel.GsOverlayAnalysis_MaxAnalysisMemorySize(*args)

eNoneDissolve = _gskernel.eNoneDissolve
r""" 每个地物均生成独立缓冲区。完全不融合"""
eDissolveByGeo = _gskernel.eDissolveByGeo
r""" 根据几何位置融合，几何上重叠的融合"""
eDissolveByAttribute = _gskernel.eDissolveByAttribute
r""" 根据属性字段融合，将属性值相同的结果进行融合。"""
eFullBuffer = _gskernel.eFullBuffer
r""" 完全缓冲区 对于线输入要素，将在线两侧生成缓冲区。 对于面输入要素，将在面周围生成缓冲区，并且这些缓冲区将包含并叠加输入要素的区域。 对于点输入要素，将在点周围生成缓冲区。"""
eOutsideBuffer = _gskernel.eOutsideBuffer
r""" 外缓冲区 对于面输入要素，仅在输入面的外部生成缓冲区（输入面内部的区域将在输出缓冲区中被擦除）。此选项对于线输入要素无效"""
eInsideBuffer = _gskernel.eInsideBuffer
r""" 內缓冲区 对于面输入要素，仅在输入面的内部生成缓冲区（输入面内部的区域与输出缓冲区求交）,此选项对于线输入要素无效"""
class GsBufferAnalysis(GsRefObject):
    r""" 缓冲区分析"""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, tol: 'double'):
        _gskernel.GsBufferAnalysis_swiginit(self, _gskernel.new_GsBufferAnalysis(tol))
    __swig_destroy__ = _gskernel.delete_GsBufferAnalysis

    def CapType(self, *args) -> "void":
        r"""
        *Overload 1:*
        线输入要素末端的缓冲区形状，缺省为内插圆

        |

        *Overload 2:*
        线输入要素末端的缓冲区形状，缺省为内插圆
        """
        return _gskernel.GsBufferAnalysis_CapType(self, *args)

    def BufferType(self, *args) -> "void":
        r"""
        *Overload 1:*
        缓冲区类型

        |

        *Overload 2:*
        缓冲区类型
        """
        return _gskernel.GsBufferAnalysis_BufferType(self, *args)

    def DissolveType(self, *args) -> "void":
        r"""
        *Overload 1:*
        执行哪种融合操作以移除输出缓冲区重叠,缺省为不融合

        |

        *Overload 2:*
        执行哪种融合操作以移除输出缓冲区重叠,缺省为不融合
        """
        return _gskernel.GsBufferAnalysis_DissolveType(self, *args)

    def DissolveField(self, *args) -> "void":
        r"""
        *Overload 1:*
        融合字段的索引

        |

        *Overload 2:*
        融合字段的索引
        """
        return _gskernel.GsBufferAnalysis_DissolveField(self, *args)

    def Buffer(self, *args) -> "bool":
        r"""
        *Overload 1:*
         生成缓冲区 :type dblRadius: float
        :param dblRadius: 缓冲区的半径 :type pInput: :py:class:`GsAnalysisDataIO`
        :param pInput: 输入数据 :type pOut: :py:class:`GsAnalysisDataIO`
        :param pOut: 输出数据

        |

        *Overload 2:*
         根据属性值生成缓冲区 :type nRadiusFieldIndex: int
        :param nRadiusFieldIndex: 获取缓冲区半径的字段索引 :type pInput: :py:class:`GsAnalysisDataIO`
        :param pInput: 输入数据 :type pOut: :py:class:`GsAnalysisDataIO`
        :param pOut: 输出数据

        |

        *Overload 3:*
         生成多重缓冲区 :type vecRadius: GsVector< double >
        :param vecRadius: 输入半径的数组 :type pInput: :py:class:`GsAnalysisDataIO`
        :param pInput: 输入数据 :type pOut: :py:class:`GsAnalysisDataIO`
        :param pOut: 输出数据
        """
        return _gskernel.GsBufferAnalysis_Buffer(self, *args)

# Register GsBufferAnalysis in _gskernel:
_gskernel.GsBufferAnalysis_swigregister(GsBufferAnalysis)

class GsExtractionAnalysis(GsRefObject):
    r""" 提取分析"""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        r"""
        *Overload 1:*
         缺省构造函数.

        |

        *Overload 2:*
         根据配置文件构造提取分析对象 :type cfg: :py:class:`GsConfig`
        :param cfg: 输入配置的根节点
        """
        _gskernel.GsExtractionAnalysis_swiginit(self, _gskernel.new_GsExtractionAnalysis(*args))

    def ExtractValuesToPoints(self, pRaster: 'GsRasterClass', pInput: 'GsAnalysisDataIO', pOut: 'GsAnalysisDataIO') -> "bool":
        r""" 提取值至点"""
        return _gskernel.GsExtractionAnalysis_ExtractValuesToPoints(self, pRaster, pInput, pOut)
    __swig_destroy__ = _gskernel.delete_GsExtractionAnalysis

# Register GsExtractionAnalysis in _gskernel:
_gskernel.GsExtractionAnalysis_swigregister(GsExtractionAnalysis)

class GsAnalysisDataIOAgent(GsRefObject):
    r""" 封装GsAnalysisDataIO指针，便于控制生命周期"""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __swig_destroy__ = _gskernel.delete_GsAnalysisDataIOAgent

    def Ptr(self) -> "GsAnalysisDataIO *":
        r""" 获取GsAnalysisDataIO指针"""
        return _gskernel.GsAnalysisDataIOAgent_Ptr(self)

# Register GsAnalysisDataIOAgent in _gskernel:
_gskernel.GsAnalysisDataIOAgent_swigregister(GsAnalysisDataIOAgent)

eTRT_PointCoveredByAreaBoundary = _gskernel.eTRT_PointCoveredByAreaBoundary
r"""
    点必须被其他要素的边界覆盖.
    输入:topo\点拓扑检查\必须被其他要素的边界覆盖\点要素.fcs
    输入:topo\点拓扑检查\必须被其他要素的边界覆盖\面要素.fcs
    image html eTRT_PointCoveredByAreaBoundary.png "eTRT_PointCoveredByAreaBoundary"
    输出:验证失败，存在3个未被边界覆盖的点要素
    """
eTRT_PointCoveredByLineEndpoint = _gskernel.eTRT_PointCoveredByLineEndpoint
r"""
     点必须被其他要素的端点覆盖
    输入:topo\点拓扑检查\点必须被其他要素的端点覆盖\点要素.fcs
    输入:topo\点拓扑检查\点必须被其他要素的端点覆盖\线要素.fcs
    image html eTRT_PointCoveredByLineEndpoint.png "eTRT_PointCoveredByLineEndpoint"
    输出:验证失败，存在3个未被线端点覆盖的点要素
    """
eTRT_PointCoveredByLine = _gskernel.eTRT_PointCoveredByLine
r"""
     点必须被线覆盖
    输入:topo\点拓扑检查\点必须被线覆盖\点要素.fcs
    输入:topo\点拓扑检查\点必须被线覆盖\线要素.fcs
    image html eTRT_PointCoveredByLine.png "eTRT_PointCoveredByLine"
    输出:验证失败，存在1个未被线覆盖的点要素
    """
eTRT_PointProperlyInsideArea = _gskernel.eTRT_PointProperlyInsideArea
r"""
     点必须完全位于面内部
    输入:topo\点拓扑检查\点必须完全位于面内部\点要素.fcs
    输入:topo\点拓扑检查\点必须完全位于面内部\面要素.fcs
    image html eTRT_PointProperlyInsideArea.png "eTRT_PointProperlyInsideArea"
    输出:验证失败，存在3个不位于面内部的点要素
    """
eTRT_PointCoveredByPoint = _gskernel.eTRT_PointCoveredByPoint
r"""
     点必须被其他要素类覆盖
    输入:topo\点拓扑检查\点必须被其他要素类覆盖\点要素1.fcs
    输入:topo\点拓扑检查\点必须被其他要素类覆盖\点要素2.fcs
    image html eTRT_PointCoveredByPoint.png "eTRT_PointCoveredByPoint"
    输出:验证失败，存在3个未被线覆盖的点要素

    """
eTRT_PointNoCovered = _gskernel.eTRT_PointNoCovered
r"""
     点必须不能相交
    输入:topo\点拓扑检查\点必须不能相交.fcs
    image html eTRT_PointNoCovered.png "eTRT_PointNoCovered"
    输出:验证失败，存在1个相交的点要素

    """
eTRT_PointNoCoveredByPoint = _gskernel.eTRT_PointNoCoveredByPoint
r"""
     点不与其他要素点重合
    输入:topo\点拓扑检查\点不与其他要素点重合\点要素1.fcs
    输入:topo\点拓扑检查\点不与其他要素点重合\点要素2.fcs
    image html eTRT_PointNoCoveredByPoint.png "eTRT_PointNoCoveredByPoint"
    输出:验证失败，存在7个重合的点要素

    """
eTRT_PointNotInsideArea = _gskernel.eTRT_PointNotInsideArea
r"""
     点不在面内部或边界
    输入:topo\点拓扑检查\点不在面内部或边界\点要素.fcs
    输入:topo\点拓扑检查\点不在面内部或边界\面要素.fcs
    image html eTRT_PointNotInsideArea.png "eTRT_PointNotInsideArea"
    输出:

    """
eTRT_LineNoOverlap = _gskernel.eTRT_LineNoOverlap
r"""
     线不能重叠,单个图层或IO各要素之间不覆盖
    输入:topo\线拓扑检查\线重叠.fcs
    image html eTRT_LineNoOverlap.png "eTRT_LineNoOverlap"
    输出:验证失败，存在1处重叠的线要素
    """
eTRT_LineNoIntersection = _gskernel.eTRT_LineNoIntersection
r"""
     线不能相交,单个图层或IO各要素之间不相交
    输入:topo\线拓扑检查\多线相交.fcs
    image html eTRT_LineNoIntersection.png "eTRT_LineNoIntersection"
    输出:验证失败，存在1处重叠，1处相交
    """
eTRT_LineCoveredByLineClass = _gskernel.eTRT_LineCoveredByLineClass
r"""
     线必须被其他要素类的要素覆盖,
    输入:topo\线拓扑检查\线必须被其他要素覆盖\线被线覆盖1.fcs
    输入:topo\线拓扑检查\线必须被其他要素覆盖\线被线覆盖2.fcs
    image html eTRT_LineCoveredByLineClass.png "eTRT_LineCoveredByLineClass"
    输出:验证失败，存在2处未被覆盖的线要素
    """
eTRT_LineNoOverlapLine = _gskernel.eTRT_LineNoOverlapLine
r"""
     线不能与其他要素重叠
    输入:topo\线拓扑检查\线与其他要素重叠\线要素1.fcs
    输入:topo\线拓扑检查\线与其他要素重叠\线要素2.fcs
    image html eTRT_LineNoOverlapLine.png "eTRT_LineNoOverlapLine"
    输出:验证失败，存在1处重叠的线要素
    """
eTRT_LineCoveredByAreaBoundary = _gskernel.eTRT_LineCoveredByAreaBoundary
r"""
     线必须被其他要素的边界覆盖
    输入:topo\线拓扑检查\线必须被其他要素覆盖\线被面覆盖线.fcs
    输入:topo\线拓扑检查\线必须被其他要素覆盖\线被面覆盖面.fcs
    image html eTRT_LineCoveredByAreaBoundary.png "eTRT_LineCoveredByAreaBoundary"
    输出:验证失败，存在1处未被边界覆盖的线要素
    """
eTRT_LineNoDangles = _gskernel.eTRT_LineNoDangles
r"""
     线不能有悬挂点,单个图层或IO
    输入:topo\线拓扑检查\线有悬挂点.fcs
    image html eTRT_LineNoDangles.png "eTRT_LineNoDangles"
    输出:验证失败，存在3个悬挂点
    """
eTRT_LineNoPseudos = _gskernel.eTRT_LineNoPseudos
r"""
     线不能有伪节点,单个图层或IO
    输入:topo\线拓扑检查\线有伪结点.fcs
    image html eTRT_LineNoPseudos.png "eTRT_LineNoPseudos"
    输出:验证失败，存在1处伪结点
    """
eTRT_LineNoSelfOverlap = _gskernel.eTRT_LineNoSelfOverlap
r"""
     线不能自重叠,单个图层或IO
    输入:topo\线拓扑检查\线自重叠.fcs
    image html eTRT_LineNoSelfOverlap.png "eTRT_LineNoSelfOverlap"
    输出:验证失败，存在1处自重叠的线段
    """
eTRT_LineNoSelfIntersect = _gskernel.eTRT_LineNoSelfIntersect
r"""
     线不能自相交,单个图层或IO
    输入:topo\线拓扑检查\线自相交.fcs
    image html eTRT_LineNoSelfIntersect.png "eTRT_LineNoSelfIntersect"
    输出:验证失败，存在1处交点
    """
eTRT_LineNoMultipart = _gskernel.eTRT_LineNoMultipart
r"""
     线必须为单一部分,单个图层或IO
    输入:topo\线拓扑检查\单一部分检测.fcs
    image html eTRT_LineNoMultipart.png "eTRT_LineNoMultipart"
    输出:验证成功
    """
eTRT_LineNoIntersectOrInteriorTouch = _gskernel.eTRT_LineNoIntersectOrInteriorTouch
r"""
     线不能相交或者内部相连,单个图层或者IO比较
    输入:topo\线拓扑检查\线是否相交或内部相连.fcs
    image html eTRT_LineNoIntersectOrInteriorTouch.png "eTRT_LineNoIntersectOrInteriorTouch"
    输出:验证失败，存在1处重叠，1处相交
    """
eTRT_LineEndpointCoveredByPoint = _gskernel.eTRT_LineEndpointCoveredByPoint
r"""
     线端点必须被其他要素覆盖
    输入:topo\线拓扑检查\端点必须被其他要素覆盖\线的端点必须被点要素覆盖之线要素.fcs
    输入:topo\线拓扑检查\端点必须被其他要素覆盖\线的端点必须被点要素覆盖之点要素.fcs
    image html eTRT_LineEndpointCoveredByPoint.png "eTRT_LineEndpointCoveredByPoint"
    输出:验证失败，存在3处未被覆盖的端点
    """
eTRT_PointMustOnLineLineIntersection = _gskernel.eTRT_PointMustOnLineLineIntersection
r"""
     线线相交交点处必须存在节点
    输入:topo\线拓扑检查\线线相交处必须存在节点.fcs
    image html eTRT_PointMustOnLineLineIntersection.png "eTRT_PointMustOnLineLineIntersection"
    输出:验证失败，存在3个不位于端点的交点
    """
eTRT_LineProperlyInsideArea = _gskernel.eTRT_LineProperlyInsideArea
r"""
     线必须完全位于面内部
    输入:topo\点拓扑检查\线必须位于内部\线必须位于内部之线.fcs
    输入:topo\点拓扑检查\线必须位于内部\线必须位于内部之面.fcs
    image html eTRT_LineProperlyInsideArea.png "eTRT_LineProperlyInsideArea"
    输出:验证失败，存在1个不位于内部的线

    """
eTRT_LineNoIntersectLine = _gskernel.eTRT_LineNoIntersectLine
r"""
     线不能与其他要素线相交
    输入:topo\点拓扑检查\线与其他要素类相交检查\线与其他要素相交1.fcs
    输入:topo\点拓扑检查\线与其他要素类相交检查\线与其他要素相交2.fcs
    image html eTRT_LineNoSelfIntersectLine.png "eTRT_LineNoSelfIntersectLine"
    输出:验证失败，存在3个相交点，2条重叠线

    """
eTRT_LineAggregateThreshold = _gskernel.eTRT_LineAggregateThreshold
r"""
     线节点距离必须大于聚合阀值
    输入:topo\线拓扑检查\线节点距离必须大于聚合阀值\线节点距离必须大于聚合阀值.fcs
    image html eTRT_LineAggregateThreshold.png "eTRT_LineAggregateThreshold"
    输出:验证失败，存在2个不符合条件的点

    """
eTRT_LineNoOverlapArea = _gskernel.eTRT_LineNoOverlapArea
r"""
     线不能与面重叠
    输入:topo\线拓扑检查\线不能与面重叠\线要素.fcs
    输入:topo\线拓扑检查\线不能与面重叠\面要素.fcs
    image html eTRT_LineNoOverlapArea.png "eTRT_LineNoOverlapArea"
    输出:

    """
eTRT_AreaNoGaps = _gskernel.eTRT_AreaNoGaps
r"""
     面不能有空隙
    输入:topo\面拓扑检查\面不能有空隙.fcs
    image html eTRT_AreaNoGaps.png "eTRT_AreaNoGaps"
    输出:验证失败，存在1处空隙
    """
eTRT_AreaNoOverlap = _gskernel.eTRT_AreaNoOverlap
r"""
     面不能重叠
    输入:topo\面拓扑检查\面不能重叠.fcs
    image html eTRT_AreaNoOverlap.png "eTRT_AreaNoOverlap"
    输出:验证失败，存在1处重叠
    """
eTRT_AreaNoOverlapArea = _gskernel.eTRT_AreaNoOverlapArea
r"""
     面不与其他要素重叠
    输入:topo\面拓扑检查\面不能与其他要素重叠\面要素1.fcs
    输入:topo\面拓扑检查\面不能与其他要素重叠\面要素2.fcs
    image html eTRT_AreaNoOverlapArea.png "eTRT_AreaNoOverlapArea"
    输出:验证失败，存在1处重叠
    """
eTRT_AreaCoveredByAreaClass = _gskernel.eTRT_AreaCoveredByAreaClass
r"""
     面必须被其他要素类的要素覆盖
    输入:topo\面拓扑检查\面必须被其他要素的要素覆盖\面要素1.fcs
    输入:topo\面拓扑检查\面必须被其他要素的要素覆盖\面要素2.fcs
    image html eTRT_AreaCoveredByAreaClass.png "eTRT_AreaCoveredByAreaClass"
    输出:验证失败，存在1处未被覆盖的面
    """
eTRT_AreaCoverEachOther = _gskernel.eTRT_AreaCoverEachOther
r"""
     面必须互相覆盖
    输入:topo\面拓扑检查\必须相互覆盖\面要素1.fcs
    输入:topo\面拓扑检查\必须相互覆盖\面要素2.fcs
    image html eTRT_AreaCoverEachOther.png "eTRT_AreaCoverEachOther"
    输出:验证失败，存在2处未被覆盖的面
    """
eTRT_AreaCoveredByArea = _gskernel.eTRT_AreaCoveredByArea
r"""
     面必须被其他要素覆盖
    输入:topo\面拓扑检查\面必须被其他要素覆盖\面必须被面覆盖1.fcs
    输入:topo\面拓扑检查\面必须被其他要素覆盖\面必须被面覆盖2.fcs
    image html eTRT_AreaCoveredByArea.png "eTRT_AreaCoveredByArea"
    输出:验证失败，存在2处未被覆盖的面
    """
eTRT_AreaBoundaryCoveredByLine = _gskernel.eTRT_AreaBoundaryCoveredByLine
r"""
     面边界必须被其他要素覆盖
    输入:topo\面拓扑检查\面边界必须被其他要素覆盖\面边界必须被覆盖.fcs
    输入:topo\面拓扑检查\面边界必须被其他要素覆盖\面边界必须被覆盖之线要素.fcs
    image html eTRT_AreaBoundaryCoveredByLine.png "eTRT_AreaBoundaryCoveredByLine"
    输出:验证失败，存在2处未被覆盖的边界线
    """
eTRT_AreaBoundaryCoveredByAreaBoundary = _gskernel.eTRT_AreaBoundaryCoveredByAreaBoundary
r"""
     面边界必须被其他要素边界覆盖
    输入:topo\面拓扑检查\面边界必须被其他要素边界覆盖\面要素1.fcs
    输入:topo\面拓扑检查\面边界必须被其他要素边界覆盖\面要素2.fcs
    image html eTRT_AreaBoundaryCoveredByAreaBoundary.png "eTRT_AreaBoundaryCoveredByAreaBoundary"
    输出:验证失败，存在2处未被覆盖的边界线
    """
eTRT_AreaContainPoint = _gskernel.eTRT_AreaContainPoint
r"""
     面包含点
    输入:topo\面拓扑检查\面包含点之面要素.fcs
    输入:topo\面拓扑检查\面包含点值点要素.fcs
    image html eTRT_AreaContainPoint.png "eTRT_AreaContainPoint"
    输出:验证失败，存在1个未包含点的面
    """
eTRT_AreaContainOnlyOnePoint = _gskernel.eTRT_AreaContainOnlyOnePoint
r"""
     面只能包含一个点
    输入:topo\面拓扑检查\面只能包含一个点\面包含一个点之面要素.fcs
    输入:topo\面拓扑检查\面只能包含一个点\面包含一个点之点要素.fcs
    image html eTRT_AreaContainOnlyOnePoint.png "eTRT_AreaContainOnlyOnePoint"
    输出:验证失败，存在2个不符合条件的面

    """
eTRT_AreaAggregateThreshold = _gskernel.eTRT_AreaAggregateThreshold
r"""
     面节点距离必须大于聚合阀值
    输入:topo\面拓扑检查\面节点距离必须大于聚合阀值\面要素1.fcs
    image html eTRT_AreaAggregateThreshold.png "eTRT_AreaAggregateThreshold"
    输出:验证失败，存在3个不符合条件的点

    """
eTRT_AreaSelfNoGaps = _gskernel.eTRT_AreaSelfNoGaps
r"""
     面自身不能有内洞
    输入:topo\面拓扑检查\面自身不能有内洞.fcs
    image html eTRT_AreaSelfNoGaps.png "eTRT_AreaSelfNoGaps"
    输出:

    """
eTRT_AreaSelfNoOverlap = _gskernel.eTRT_AreaSelfNoOverlap
r"""
     面不能自相交
    输入:topo\面拓扑检查\面不能自相交.fcs
    image html eTRT_AreaSelfNoOverlap.png "eTRT_AreaSelfNoOverlap"
    输出:

    """
eValidateNoImplemention = _gskernel.eValidateNoImplemention
r""" 未实现，不支持"""
eValidateFaild = _gskernel.eValidateFaild
r""" 验证失败"""
eValidateSucceed = _gskernel.eValidateSucceed
r""" 验证成功"""
eValidateUserCanced = _gskernel.eValidateUserCanced
r""" 用户取消"""
class GsGeometryTypeValidator(object):
    r""" 几何类型校验器 校验传入的几何类型是否满足此类型要求"""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    StartOrder = property(_gskernel.GsGeometryTypeValidator_StartOrder_get, _gskernel.GsGeometryTypeValidator_StartOrder_set, doc=r""" 开始索引""")
    EndOrder = property(_gskernel.GsGeometryTypeValidator_EndOrder_get, _gskernel.GsGeometryTypeValidator_EndOrder_set, doc=r""" 结束索引""")
    Type = property(_gskernel.GsGeometryTypeValidator_Type_get, _gskernel.GsGeometryTypeValidator_Type_set, doc=r""" 几何类型""")

    def __init__(self, *args):
        _gskernel.GsGeometryTypeValidator_swiginit(self, _gskernel.new_GsGeometryTypeValidator(*args))

    def Validate(self, order: 'int', eType: 'GsGeometryType') -> "bool":
        r""" 执行校验"""
        return _gskernel.GsGeometryTypeValidator_Validate(self, order, eType)
    __swig_destroy__ = _gskernel.delete_GsGeometryTypeValidator

# Register GsGeometryTypeValidator in _gskernel:
_gskernel.GsGeometryTypeValidator_swigregister(GsGeometryTypeValidator)

class GsTopologyRuleValidator_OnValidateProgress(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    __swig_destroy__ = _gskernel.delete_GsTopologyRuleValidator_OnValidateProgress

    def OnValidateProgress(self, Topo: 'GsTopologyRuleValidator', name: 'char const *', a: 'int', count: 'int', progressRate: 'float') -> "bool":
        return _gskernel.GsTopologyRuleValidator_OnValidateProgress_OnValidateProgress(self, Topo, name, a, count, progressRate)

    def __init__(self):
        if self.__class__ == GsTopologyRuleValidator_OnValidateProgress:
            _self = None
        else:
            _self = self
        _gskernel.GsTopologyRuleValidator_OnValidateProgress_swiginit(self, _gskernel.new_GsTopologyRuleValidator_OnValidateProgress(_self, ))
    def __disown__(self):
        self.this.disown()
        _gskernel.disown_GsTopologyRuleValidator_OnValidateProgress(self)
        return weakref.proxy(self)

# Register GsTopologyRuleValidator_OnValidateProgress in _gskernel:
_gskernel.GsTopologyRuleValidator_OnValidateProgress_swigregister(GsTopologyRuleValidator_OnValidateProgress)

class GsTopologyRuleValidator(GsRefObject):
    r""" 拓扑规则验证器"""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _gskernel.delete_GsTopologyRuleValidator

    def AddData(self, data: 'GsAnalysisDataIO') -> "bool":
        r""" 添加一个用于拓扑检查的要素类数据，要素类型需要符合DataType返回的类型"""
        return _gskernel.GsTopologyRuleValidator_AddData(self, data)

    def OutputData(self, data: 'GsAnalysisDataIO') -> "bool":
        r""" 设置用于拓扑检查的输出IO"""
        return _gskernel.GsTopologyRuleValidator_OutputData(self, data)

    def DataType(self, n: 'int') -> "GsGeometryType":
        r""" 获取可以添加的第N个要素类的类型 要素类的类型会返回eGeometryTypePoint,eGeometryTypePolyline,eGeometryTypePolygon,eGeometryTypeUnknown 四种类型，分别代表点、线、面和任意类型"""
        return _gskernel.GsTopologyRuleValidator_DataType(self, n)

    def MaxDataCount(self) -> "int":
        r""" 获取最多需要多少要要素类"""
        return _gskernel.GsTopologyRuleValidator_MaxDataCount(self)

    def MinDataCount(self) -> "int":
        r""" 获取最少少需要多少要素类"""
        return _gskernel.GsTopologyRuleValidator_MinDataCount(self)

    def Config(self, *args) -> "void":
        r"""
        *Overload 1:*
        通用配置

        |

        *Overload 2:*
        通用配置
        """
        return _gskernel.GsTopologyRuleValidator_Config(self, *args)

    def RuleType(self) -> "GsTopologyRuleType":
        r""" 拓扑规则的类型"""
        return _gskernel.GsTopologyRuleValidator_RuleType(self)

    def LastError(self) -> "char const *":
        r""" 最近一次错误描述"""
        return _gskernel.GsTopologyRuleValidator_LastError(self)

    def Tolerance(self, *args) -> "void":
        r"""
        *Overload 1:*
        容差

        |

        *Overload 2:*
        容差
        """
        return _gskernel.GsTopologyRuleValidator_Tolerance(self, *args)

    def ValidateRule(self) -> "GsTopologyRuleValidateResult":
        r""" 验证拓扑规则"""
        return _gskernel.GsTopologyRuleValidator_ValidateRule(self)

    def OnValidateProgressAdd(self, call: 'GsTopologyRuleValidator_OnValidateProgress') -> "void":
        r""" 验证拓扑规则时的进度 参数意义 参数1 GsTopologyRuleValidator对象指针 参数2 执行步骤的名称 参数3 执行步骤 参数4 总的步骤数量 参数5 单个步骤的进度，范围[0~1] 返回值  返回true，会继续执行验证，返回false会中断执行"""
        return _gskernel.GsTopologyRuleValidator_OnValidateProgressAdd(self, call)

    def OnValidateProgressRemove(self, call: 'GsTopologyRuleValidator_OnValidateProgress') -> "void":
        return _gskernel.GsTopologyRuleValidator_OnValidateProgressRemove(self, call)

# Register GsTopologyRuleValidator in _gskernel:
_gskernel.GsTopologyRuleValidator_swigregister(GsTopologyRuleValidator)

class GsTopologyCheckPreprocesser_OnProgress(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    __swig_destroy__ = _gskernel.delete_GsTopologyCheckPreprocesser_OnProgress

    def OnProgress(self, b: 'float') -> "bool":
        return _gskernel.GsTopologyCheckPreprocesser_OnProgress_OnProgress(self, b)

    def __init__(self):
        if self.__class__ == GsTopologyCheckPreprocesser_OnProgress:
            _self = None
        else:
            _self = self
        _gskernel.GsTopologyCheckPreprocesser_OnProgress_swiginit(self, _gskernel.new_GsTopologyCheckPreprocesser_OnProgress(_self, ))
    def __disown__(self):
        self.this.disown()
        _gskernel.disown_GsTopologyCheckPreprocesser_OnProgress(self)
        return weakref.proxy(self)

# Register GsTopologyCheckPreprocesser_OnProgress in _gskernel:
_gskernel.GsTopologyCheckPreprocesser_OnProgress_swigregister(GsTopologyCheckPreprocesser_OnProgress)

class GsTopologyCheckPreprocesser(GsRefObject):
    r""" 拓扑检查预处理，将一批地物类预处理"""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _gskernel.delete_GsTopologyCheckPreprocesser

    def Add(self, *args) -> "void":
        r"""
        *Overload 1:*
        添加用于检查的地物类

        |

        *Overload 2:*
        添加用于检查的数据
        """
        return _gskernel.GsTopologyCheckPreprocesser_Add(self, *args)

    def Preprocess(self) -> "bool":
        r""" 执行预处理"""
        return _gskernel.GsTopologyCheckPreprocesser_Preprocess(self)

    def ResultCount(self) -> "int":
        r""" 预处理结果数量"""
        return _gskernel.GsTopologyCheckPreprocesser_ResultCount(self)

    def Result(self, n: 'int') -> "GsSmarterPtr< GsAnalysisDataIOAgent >":
        r""" 预处理结果"""
        return _gskernel.GsTopologyCheckPreprocesser_Result(self, n)

    def Clear(self) -> "bool":
        r""" 预处理结果清除, 如果拓扑检查没完成,请不要清除"""
        return _gskernel.GsTopologyCheckPreprocesser_Clear(self)

    def OnProgressAdd(self, call: 'GsTopologyCheckPreprocesser_OnProgress') -> "void":
        r""" 处理进度 参数意义 参数1 执行进度，范围[0~1] 返回值  返回true，会继续执行处理，返回false会中断执行"""
        return _gskernel.GsTopologyCheckPreprocesser_OnProgressAdd(self, call)

    def OnProgressRemove(self, call: 'GsTopologyCheckPreprocesser_OnProgress') -> "void":
        return _gskernel.GsTopologyCheckPreprocesser_OnProgressRemove(self, call)

# Register GsTopologyCheckPreprocesser in _gskernel:
_gskernel.GsTopologyCheckPreprocesser_swigregister(GsTopologyCheckPreprocesser)

class GsTopologyCheckAnalysis(GsRefObject):
    r""" 拓扑检查分析"""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        _gskernel.GsTopologyCheckAnalysis_swiginit(self, _gskernel.new_GsTopologyCheckAnalysis(*args))

    def CreateTopologyRule(self, eRule: 'GsTopologyRuleType', tol: 'double') -> "GsSmarterPtr< GsTopologyRuleValidator >":
        r""" 创建一种拓扑检查规则"""
        return _gskernel.GsTopologyCheckAnalysis_CreateTopologyRule(self, eRule, tol)

    def CreatePreprocesser(self, tol: 'double') -> "GsSmarterPtr< GsTopologyCheckPreprocesser >":
        r""" 创建预处理对象"""
        return _gskernel.GsTopologyCheckAnalysis_CreatePreprocesser(self, tol)
    __swig_destroy__ = _gskernel.delete_GsTopologyCheckAnalysis

# Register GsTopologyCheckAnalysis in _gskernel:
_gskernel.GsTopologyCheckAnalysis_swigregister(GsTopologyCheckAnalysis)

class GsRasterContour(GsRefObject):
    r""" 栅格轮廓分析 dem -> 矢量等值线"""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self):
        _gskernel.GsRasterContour_swiginit(self, _gskernel.new_GsRasterContour())
    __swig_destroy__ = _gskernel.delete_GsRasterContour

    def ContourInterval(self, *args) -> "double":
        r"""
        *Overload 1:*
        设置执行等值线分析的间隔值

        |

        *Overload 2:*
        获取执行等值线分析的间隔值
        """
        return _gskernel.GsRasterContour_ContourInterval(self, *args)

    def ContourBase(self, *args) -> "double":
        r"""
        *Overload 1:*
        设置执行等值线分析的起算值

        |

        *Overload 2:*
        获取执行等值线分析的起算值
        """
        return _gskernel.GsRasterContour_ContourBase(self, *args)

    def OutputData(self, hLayer: 'GsAnalysisDataIO') -> "void":
        r""" 设置矢量输出图层"""
        return _gskernel.GsRasterContour_OutputData(self, hLayer)

    def ResolutionX(self, *args) -> "double":
        r"""
        *Overload 1:*
        设置分析数据X方向的分辨率

        |

        *Overload 2:*
        获取分析数据X方向的分辨率
        """
        return _gskernel.GsRasterContour_ResolutionX(self, *args)

    def ResolutionY(self, *args) -> "void":
        r"""
        *Overload 1:*
        设置分析数据Y方向的分辨率

        |

        *Overload 2:*
        获取分析数据Y方向的分辨率
        """
        return _gskernel.GsRasterContour_ResolutionY(self, *args)

    def SrcX(self, *args) -> "double":
        r"""
        *Overload 1:*
        设置分析数据起始点x坐标

        |

        *Overload 2:*
        获取分析数据起始点x坐标
        """
        return _gskernel.GsRasterContour_SrcX(self, *args)

    def SrcY(self, *args) -> "void":
        r"""
        *Overload 1:*
        获取分析数据起始点Y坐标

        |

        *Overload 2:*
        设置分析数据起始点Y坐标
        """
        return _gskernel.GsRasterContour_SrcY(self, *args)

    def Contour(self, *args) -> "bool":
        r"""
        *Overload 1:*
         执行等值线分析:param GsRaster: * pRaster	栅格块:rtype: boolean
        :return: 返回true成功,返回false失败

        |

        *Overload 2:*
         执行等值线分析:param double: * pRasterBuff	栅格数据:param int: nW, 栅格数据的宽度:param int: nH, 栅格数据的高度:rtype: boolean
        :return: 返回true成功,返回false失败

        |

        *Overload 3:*
         执行等值线分析:param float: * pRasterBuff	栅格数据:param int: nW, 栅格数据的宽度:param int: nH, 栅格数据的高度:rtype: boolean
        :return: 返回true成功,返回false失败

        |

        *Overload 4:*
         执行等值线分析:param int: * pRasterBuff	栅格数据:param int: nW, 栅格数据的宽度:param int: nH, 栅格数据的高度:rtype: boolean
        :return: 返回true成功,返回false失败

        |

        *Overload 5:*
         执行等值线分析:param short: * pRasterBuff	栅格数据:param int: nW, 栅格数据的宽度:param int: nH, 栅格数据的高度:rtype: boolean
        :return: 返回true成功,返回false失败

        |

        *Overload 6:*
         执行等值线分析:param char: * pRasterBuff	栅格数据:param int: nW, 栅格数据的宽度:param int: nH, 栅格数据的高度:rtype: boolean
        :return: 返回true成功,返回false失败
        """
        return _gskernel.GsRasterContour_Contour(self, *args)

    def FixedLevels(self, pLevels: 'double *', nCount: 'int') -> "void":
        r""" 使用固定高程执行等值线分析:param double*: pLevels, 数组内容:param int: nCount 数组长度"""
        return _gskernel.GsRasterContour_FixedLevels(self, pLevels, nCount)

    def FixedLevelCount(self) -> "int":
        r"""
         获取固定高程执行等值线分析数组大小:rtype: int
        :return: int nCount 数组长度
        """
        return _gskernel.GsRasterContour_FixedLevelCount(self)

    def UseNoData(self, *args) -> "bool":
        r"""
        *Overload 1:*
         获取固定高程执行等值线分析数组:rtype: void
        :return: double * 数组double *FixedLevels()const ; 设置是否使用无效色值

        |

        *Overload 2:*
         获取是否使用无效色值
        """
        return _gskernel.GsRasterContour_UseNoData(self, *args)

    def NoDataValue(self, *args) -> "double":
        r"""
        *Overload 1:*
        设置无效色值

        |

        *Overload 2:*
        获取无效色值
        """
        return _gskernel.GsRasterContour_NoDataValue(self, *args)

    def ValidRegion(self, *args) -> "GsGeometry *":
        r"""
        *Overload 1:*
        设置生成等值线的有效范围

        |

        *Overload 2:*
        获取生成等值线的有效范围
        """
        return _gskernel.GsRasterContour_ValidRegion(self, *args)

    def GeometryDimType(self, *args) -> "int":
        return _gskernel.GsRasterContour_GeometryDimType(self, *args)

    def MinArea(self, *args) -> "double":
        return _gskernel.GsRasterContour_MinArea(self, *args)

# Register GsRasterContour in _gskernel:
_gskernel.GsRasterContour_swigregister(GsRasterContour)



